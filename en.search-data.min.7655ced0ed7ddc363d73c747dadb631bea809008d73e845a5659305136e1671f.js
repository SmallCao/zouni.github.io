'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/golang/bb/','title':"Bb",'section':"Posts",'content':"asdfasfdasdfasdfasdf\n"});index.add({'id':1,'href':'/docs/docutment/atom/%E5%BC%82%E5%B8%B8/','title':"异常",'section':"Docs",'content':"The package spell-check cannot load the system dictionary for zh-CN. See the settings for ways of changing the languages used, resolving missing dictionaries, or hiding this warning.\n  Use Locales 前面的勾选去掉 下面添加 en-US  "});index.add({'id':2,'href':'/docs/docutment/docker/centos%E5%AE%89%E8%A3%85/','title':"Centos安装",'section':"Docs",'content':"官网 #  https://docs.docker.com/engine/install/centos/#prerequisites 先卸载旧版本\nsudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 安装yum-utils软件包（提供yum-config-manager 实用程序）并设置稳定的存储库。\nsudo yum install -y yum-utils sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 开始安装引擎\nsudo yum install docker-ce docker-ce-cli containerd.io 启动\nsudo systemctl start docker 测试是否正常\nsudo docker run hello-world "});index.add({'id':3,'href':'/docs/docutment/docker/DockerFile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/alpine-%E5%9D%91/','title':"Alpine 坑",'section':"Docs",'content':"安装uwsgi 报各种 致命错误 #   缺少c编译器  File \u0026#34;uwsgiconfig.py\u0026#34;, line 742, in __init__ raise Exception(\u0026#34;you need a C compiler to build uWSGI\u0026#34;) Exception: you need a C compiler to build uWSGI 首次安装软件，需要先更新源。\napk update apk add gcc 执行pip3 install uWSGI  In file included from core/socket.c:1:0: ./uwsgi.h:165:19: fatal error: stdio.h: No such file or directory compilation terminated. In file included from core/logging.c:2:0: ./uwsgi.h:165:19: fatal error: stdio.h: No such file or directory compilation terminated. In file included from core/utils.c:1:0: ./uwsgi.h:165:19: fatal error: stdio.h: No such file or directory compilation terminated. In file included from core/protocol.c:1:0: ./uwsgi.h:165:19: fatal error: stdio.h: No such file or directory compilation terminated. 缺乏C语言的标准库\napk add libc-dev 继续安装 pip3 install uwsgi  In file included from core/logging.c:2:0: ./uwsgi.h:238:26: fatal error: linux/limits.h: No such file or directory compilation terminated. In file included from core/utils.c:1:0: ./uwsgi.h:238:26: fatal error: linux/limits.h: No such file or directory compilation terminated. In file included from core/protocol.c:1:0: ./uwsgi.h:238:26: fatal error: linux/limits.h: No such file or directory compilation terminated. In file included from core/socket.c:1:0: ./uwsgi.h:238:26: fatal error: linux/limits.h: No such file or directory compilation terminated. 缺乏Linux相关的头文件\napk add linux-headers 由于uWSGI功能众多，所以，使用的参数不同，需要的功能也会有差异。 在使用\u0026ndash;static-map等参数时，可能会有额外的编译依赖，否则会有运行时报错。  !!! no internal routing support, rebuild with pcre support !!!\rPCRE（Perl Compatible Regular Expressions）是一个Perl库，包括 perl 兼容的正则表达式库。 编译依赖为pcre-dev，运行依赖为pcre。\n运行时，某些功能需要访问/etc/mime.types文件。  !!! no /etc/mime.types file found !!!\rMIME（Multipurpose Internet Mail Extensions）多用途互联网邮件扩展类型。 是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。\n这个东西对应的Alpine库是mailcap。\n 最终通过以下命令安装成功\n RUN apk update \u0026amp;\u0026amp; apk add \\  libuuid \\  pcre \\  mailcap \\  gcc \\  libc-dev \\  linux-headers \\  pcre-dev \\  \u0026amp;\u0026amp; pip install --no-cache-dir uWSGI\u0026gt;=2.0.15 \\  \u0026amp;\u0026amp; apk del \\  gcc \\  libc-dev \\  linux-headers \\  \u0026amp;\u0026amp; rm -rf /tmp/* 虽然成功了，但是由于有部分Python库，无法在Alpine上使用，比如opencv-python。 原因是，Alpine的libc不是GNU的，而是musl libc。 详见：Cannot install opencv-contrib-python from Alpine Linux · Issue #75 · skvark/opencv-python。 #   I completely forgot that Alpine Linux is based on musl libc and not on GNU libc and thus it\u0026rsquo;s not a GNU/Linux distribution. Manylinux supports only GNU/Linux.\n 所以放弃使用alpine #  "});index.add({'id':4,'href':'/docs/docutment/docker/DockerFile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/alpine%E9%95%9C%E5%83%8F/','title':"Alpine镜像",'section':"Docs",'content':"alpine 启动没有/bin/bash docker\nalpine软件安装\napk add python3\r修改成aliyun源\n  vi /etc/apk/repositories https://mirrors.aliyun.com/alpine/   or\nsed 命令修改 仓库文件\n sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories\r 阿里云镜像源地址：\rhttps://developer.aliyun.com/mirror/\r"});index.add({'id':5,'href':'/docs/docutment/docker/DockerFile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/command/','title':"Command",'section':"Docs",'content':"DockerFile 分为四部分：基础镜像、维护者、镜像操作指令、容器启动时执行指令\nWORKDIR 指定工作目录，类似于 cd,定位到某一个目录\nWORKDIR /usr/local/nginx RUN 构建镜像时运行指令\nRUN apk add nginx \u0026amp;\u0026amp; mkdir /run/nginx/ 构建指令：\ndocker build -f dockerfile-path . "});index.add({'id':6,'href':'/docs/docutment/docker/DockerFile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/%E8%BF%90%E8%A1%8Cdockerfile/','title':"运行dockerfile",'section':"Docs",'content':"运行构建dockerfile #   -f 指定dockerfile 文件构建镜像  docker build -f D:\\docker\\dockerfile\\Dockerfile\r-t  docker build -t image_name:tag .\r"});index.add({'id':7,'href':'/docs/docutment/docker/docker%E5%AE%89%E8%A3%85/','title':"Docker安装",'section':"Docs",'content':"  安装： 官网下载 https://hub.docker.com/对应版本\n  设置：\n 修改 registry-mirrors 镜像地址  https://reg-mirror.qiniu.com http://hub-mirror.c.163.com/ https://registry.docker-cn.com       "});index.add({'id':8,'href':'/docs/docutment/docker/docker%E6%93%8D%E4%BD%9C/','title':"Docker操作",'section':"Docs",'content':"镜像操作： #   从仓库搜索镜像：docker search image-name\n搜索结果过滤:  #是否是官方提供：  docker search --filter \u0026#34;is-official=true\u0026#34; image_name # 是否是自动化构建：  docker search --filter \u0026#34;is-automated=true\u0026#34; image_name # 大于多少个`star`  docker search --filter stars=3 image_name 下载镜像：\r docker pull image_name 本地镜像的查看：  docker images 删除：  docker rmi image_name 修改镜像名字：  docker tag images_id 要推送的主机地址/镜像名：版本号 push到docker仓库  # 前提是已经在docker服务注册并创建了仓库 docker push 刚刚修改的镜像名字（要推送的主机地址/镜像名：版本号）这一长串 容器基本操作： #   查看容器：  docker ps 创建容器:  docker run -itd --name=container_name images_name  -i: 以交互模式运行容器;\t-d: 后台运行;\n-t: 为容器重新分配一个伪输入终端;\n\u0026ndash;name: 容器名字;\n 查看所有容器:  docker ps -a 停止容器：  docker stop container_name 重启容器:  docker restart container_name 删除容器: # 删除之前要先停止  docker rm container_name 容器修改与保存 #   进入容器  docker exec -it container_name /bin/bash 修改容器提交:  docker commit -a \u0026#34;author\u0026#34; -m \u0026#34;modify\u0026#34; container_name/container_id new_image_name:tag_name 端口映射 #  docker run -itd --name=container_name -p 8888:80 images_name  -p 8888 指的是 宿主机端口-\u0026gt;端口映射到容器80端口 访问：127.0.0.1:8888\n注意: 命令顺序不能反，image_name 在最后\n  "});index.add({'id':9,'href':'/docs/docutment/docker/docker%E6%96%87%E4%BB%B6%E6%8C%82%E8%BD%BD/','title':"Docker文件挂载",'section':"Docs",'content':"文件挂载 #   docker run -itd \u0026ndash;name=small_nginx -p 8888:80 -v d:/index.html:/usr/share/nginx/html/index.html small/nginx\n  -v 表示： 宿主机文件路径：容器文件路径 -p 表示: 宿主机ip:容器ip  这里修改了nginx默认启动页面关联到本地\n 文件目录挂载 #   docker run -itd \u0026ndash;name=small_mysql -p 33066:3306 -v d:/docker/mysql/:/var/lib/mysql/ -e MYSQL_ROOT_PASSWORD=123456 mysql\n  -e 表示：向容器内传参，ex:设定数据库密码：MYSQL_ROOT_PASSWORD=123456  docker run -itd \u0026ndash;name=flask_mysql -p 33066:3306 -v /var/lib/mysql:/var/lib/mysql/ -e MYSQL_ROOT_PASSWORD=123456 mysql\n"});index.add({'id':10,'href':'/docs/docutment/docker/nginx/%E6%9E%84%E5%BB%BAnginx%E5%AE%B9%E5%99%A8/','title':"构建nginx容器",'section':"Docs",'content':"docker run -itd --name=nginx -p 80:80 -p 443:443 -v /usr/local/small/nginx/conf.d:/etc/nginx/conf.d -v /usr/local/small/web/facepark/static:/root/web/facepark/static nginx:2.0\r"});index.add({'id':11,'href':'/docs/docutment/docker/pycharm%E4%BD%BF%E7%94%A8docker/','title':"Pycharm使用docker",'section':"Docs",'content':"docker打开设置\nExpose daemon on tcp://localhost:2375 without TLS\n设置连接docker 显示Connection successfull 表示连接成功了\n接下来配置python 解释器 如果已经创建了容器，就会自动加载\n"});index.add({'id':12,'href':'/docs/docutment/docker/redis/redis%E9%85%8D%E7%BD%AE/','title':"Redis配置",'section':"Docs",'content':"docker run -p 6379:6379 \u0026ndash;name redis -v /root/redis/redis.conf:/etc/redis/redis.conf -v /root/redis/data:/data -d redis redis-server /etc/redis/redis.conf \u0026ndash;appendonly yes\n"});index.add({'id':13,'href':'/docs/docutment/docker/%E5%88%9B%E5%BB%BAmysql%E5%AE%B9%E5%99%A8/','title':"创建mysql容器",'section':"Docs",'content':"下载镜像 #  # 官方提供的mysql镜像\rdocker pull mysql\r创建容器 #  docker run -itd --name=mysql_wxc -p 3306:3306 -v E:\\mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql\r -p 指定3306端口映射宿主机 -v 数据库文件映射到宿主机 -e 指定参数 ‘MYSQL_ROOT_PASSWORD’ 设置数据库密码  进入容器 #  docker exec -it mysql_wxc bash\r"});index.add({'id':14,'href':'/docs/docutment/docker/%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8/','title':"创建容器",'section':"Docs",'content':"创建容器：\ndocker run -itd --name=container_name images_name\r端口映射：\ndocker run -itd --name=ct_name -p 88:80 img_name\r-p 88:80\r88:宿主机端口\r80:容器端口\r文件挂载：\n-v 宿主机文件目录：容器文件目录\r"});index.add({'id':15,'href':'/docs/docutment/docker/%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94/','title':"容器互联",'section':"Docs",'content':"容器互联 #  docker run -itd --name=small_nginx --link container_name:alias -v path:local_path image_name  \u0026ndash;link 表示：被挂载容器名：别名  docker run -itd --name=flask_t -p 81:80 --link flask_mysql:flask_mysql -v /root/small/mysql/:/var/lib/mysql flask:1.2\r"});index.add({'id':16,'href':'/docs/docutment/docker/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/','title':"常见问题",'section':"Docs",'content':"启动失败 #  查看日志\ndocker logs -f -t --tail 20 nginx\r"});index.add({'id':17,'href':'/docs/docutment/docker/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/','title':"搭建本地仓库",'section':"Docs",'content':"搭建本地仓库 #  搜索 官方仓库 #  docker search registry 下载仓库 #  docker pull registry 创建容器 #  docker run -d -p 5000:5000 --restart=always --privileged=true --name=registry-small -v d:/docker/registry:/var/lib/registry registry\r修改镜像，准备推送 到仓库容器 #  docker tag image_id registry_name:port/images_name\r修改hosts 增加 域名 #  127.0.0.1 registry_name\r推送镜像到私有仓库 #  docker push registry_name:port/images_name 查看镜像是否推送成功 #  windows 浏览器 可以直接打开\n http://127.0.0.1:5000/v2/_catalog\n  查看版本号\n http://127.0.0.1:5000/v2/alpine/tags/list\n  linux 查看同样的方法 用命令查看\ncurl -X GET http://127.0.0.1:5000/v2/_catalog "});index.add({'id':18,'href':'/docs/docutment/flutter/%E5%88%9D%E5%A7%8B%E5%8C%96/','title':"初始化",'section':"Docs",'content':"配置环境变量 #  E:\\WorkRoom\\android\\flutter\\flutter\\bin\r添加到path中\r运行命令：\nflutter doctor\r 许可证的问题，not accepted,那就让他ok，根据提示输入命令：\nflutter doctor --android-licenses\r一路yes到底，最后再检查一次就 ok 了 "});index.add({'id':19,'href':'/docs/docutment/git/git%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/','title':"Git使用说明",'section':"Docs",'content':"第一次使用git，没有环境？ #   先安装git 生成公钥，用来添加到远程仓库  # 生成公钥，然后一路回车\rssh-keygen -t rsa -C \u0026quot;cao_cgq@163.com\u0026quot;\r 3. 复制公钥，打开码云-\u0026gt; 个人头像点设置-\u0026gt;找到安全设置-\u0026gt;SSH公钥 添加完公钥之后，就可以接下来的步骤了\n怎么样将代码提交到远程仓库 #   在码云新建仓库，beego_first  本地项目路径下初始化仓库  git init\r 3. 本地项目添加远程仓库，\n# git remote add origin 仓库地址\rgit remote add origin git@gitee.com:SmallMrCao/beego_first.git\r 4. 添加完之后先pull，然后再add\ngit pull\rgit add *\r出现这个问题，说明在add之前没有pull，需要执行以下命令，把无关的内容pull下来\n git pull origin master --allow-unrelated-histories\r最后执行提交就完成了  git push\r"});index.add({'id':20,'href':'/docs/docutment/git/%E4%BF%AE%E6%94%B9%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E5%B9%B6%E6%8F%90%E4%BA%A4/','title':"修改仓库地址并提交",'section':"Docs",'content':"将本地项目提交到git服务器需要以下操作： #  git init 初始化本地仓库\rgit add .\rgit commit -m \u0026quot;###\u0026quot; -------以上3步只是本地提交\rgit remote add origin git@xx.xx.xx.xx:repos/xxx/xxx/xxx.git\rgit pull origin master --allow-unrelated-histories 允许一些无关联的历史\rgit push origin 本地分支:远程分支\r修改远程仓库地址3种方式 #  直接修改\ngit remote origin set-url [url] 先删除后修改\ngit remote rm origin git remote add origin [url] 直接修改config文件\n"});index.add({'id':21,'href':'/docs/docutment/git/%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/','title':"删除远程仓库文件",'section':"Docs",'content':"删除文件夹\ngit rm --cached -r 文件夹名字\r 删除文件\ngit rm --cached 文件名字\r 删除后不用git add 直接提交\ngit commit -m \u0026quot;desc\u0026quot; 提交\rgit push\r "});index.add({'id':22,'href':'/docs/docutment/git/%E5%9B%9E%E6%BB%9A/','title':"回滚",'section':"Docs",'content':"回滚 #  已进行git push，即已推送到“远程仓库”中。我们将已被提交到“远程仓库”的代码还原操作叫做“回滚”！注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！\n撤销指定文件到指定版本 #  # 查看指定文件的历史版本 git log \u0026lt;filename\u0026gt; # 回滚到指定commitID git checkout \u0026lt;commitID\u0026gt; \u0026lt;filename\u0026gt; 删除最后一次远程提交 #  方式一：使用revert\ngit revert HEAD git push origin master 方式二：使用reset\ngit reset --hard HEAD^ git push origin master -f 二者区别：\n revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在； reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。  回滚某次提交 #  # 找到要回滚的commitID git log git revert commitID 删除某次提交 #  git log --oneline -n5  git rebase -i \u0026#34;commit id\u0026#34;^ 注意：需要注意最后的^号，意思是commit id的前一次提交\ngit rebase -i \u0026#34;8475cb5\u0026#34;^ "});index.add({'id':23,'href':'/docs/docutment/git/%E6%92%A4%E9%94%80/','title':"撤销",'section':"Docs",'content':"已add，但是没commit #  git reset HEAD~\r已commit，不改变代码，仅仅只是想取消这个操作 #  git reset --soft HEAD^ # ^ 一次提交 ^^ 两次提交\r"});index.add({'id':24,'href':'/docs/docutment/git/%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/','title':"撤销操作",'section':"Docs",'content':"撤销 #  撤销是在本地，回滚是操作远程\n 在工作区的代码  git checkout -- a.txt # 丢弃某个文件，或者  git checkout -- . # 丢弃全部 注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。\n代码git add到缓存区，并未commit提交  ## 将本地commit的内容撤回，修改的文件内容不会消失 git reset HEAD~ git reset HEAD . #或者 git reset HEAD a.txt 这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化\n文件执行了git add操作，但想撤销对其的修改（index内回滚）  # 取消暂存 git reset HEAD fileName # 撤销修改 git checkout fileName 修改的文件已被git commit，但想再次修改不再产生新的Commit  # 修改最后一次提交 git add sample.txt git commit --amend -m\u0026#34;说明\u0026#34; 已在本地进行了多次git commit操作，现在想撤销到其中某次Commit  git reset [--hard|soft|mixed|merge|keep] [commit|HEAD] "});index.add({'id':25,'href':'/docs/docutment/git/%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/','title':"生成公钥",'section':"Docs",'content':"生成公钥 #  执行命令：\nssh-keygen -t rsa -C \u0026quot;xxxxx@xxxxx.com\u0026quot; 多次回车 定位到根目录\ncd ~ cat .ssh/id_rsa.pub 复制公钥\n"});index.add({'id':26,'href':'/docs/docutment/go/alpine%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/','title':"Alpine容器运行",'section':"Docs",'content':"mkdir /lib64\rln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2\r"});index.add({'id':27,'href':'/docs/docutment/go/beego/beego%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/','title':"Beego项目配置",'section':"Docs",'content':"app.conf runmode = dev //有4中 // dev 开发 //test 测试 //sprod 准生产环境 //prod 生产环境 "});index.add({'id':28,'href':'/docs/docutment/go/beego/orm%E5%AE%89%E8%A3%85/','title':"Orm安装",'section':"Docs",'content':"go get github.com/astaxie/beego/orm\ngo get github.com/go-sql-driver/mysql\n"});index.add({'id':29,'href':'/docs/docutment/go/beego/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/','title':"创建项目",'section':"Docs",'content':"安装beego管理工具bee #  go get github.com/beego/bee go get github.com/astaxie/beego 装好了bee管理工具之后，运用bee创建项目 #  创建项目 #  bee new会自动在GOPATH路径src目录下创建项目\nbee new project_name\r运行项目 #  定位到项目目录 GOPATH/src/project_name\n\rgo build project_name\rgo run\r或者\rbee run\r"});index.add({'id':30,'href':'/docs/docutment/go/beego/%E9%83%A8%E7%BD%B2/','title':"部署",'section':"Docs",'content':"部署 #  编译打包 #  windows平台打包linux可执行文件\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; ) //filepath: 要编译的文件的路径 func build(filepath string){ _ = os.Setenv(\u0026#34;CGO_ENABLED\u0026#34;, \u0026#34;0\u0026#34;) _ = os.Setenv(\u0026#34;GOARCH\u0026#34;, \u0026#34;amd64\u0026#34;) _ = os.Setenv(\u0026#34;GOOS\u0026#34;, \u0026#34;linux\u0026#34;) arg := []string{\u0026#34;build\u0026#34;, filepath} if err := exec.Command(\u0026#34;go\u0026#34;, arg...).Run(); err!=nil { fmt.Println(\u0026#34;编译失败:\u0026#34;, err) } else{ fmt.Println(\u0026#34;编译成功\u0026#34;) } } func main() { build(`D:\\WorkProject\\go\\src\\beego_first\\main.go`) } go 编译之后是二进制文件，beego:打包需要自行copy \u0026gt; (views,static,conf) 几个文件夹到部署应用目录下\n"});index.add({'id':31,'href':'/docs/docutment/go/gin/gorm/','title':"Gorm",'section':"Docs",'content':"gorm使用 #  "});index.add({'id':32,'href':'/docs/docutment/go/gin/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/','title':"关于跨域问题",'section':"Docs",'content':"跨域请求在网上找了很多文章都是下面这种做法：\nfunc cors() gin.HandlerFunc { return func(c *gin.Context) { method := c.Request.Method fmt.Println(\u0026#34;啥玩意儿的\u0026#34;) c.Header(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;) c.Header(\u0026#34;Access-Control-Allow-Headers\u0026#34;, \u0026#34;Content-Type,AccessToken,X-CSRF-Token, Authorization, Token\u0026#34;) c.Header(\u0026#34;Access-Control-Allow-Methods\u0026#34;, \u0026#34;POST, GET, OPTIONS\u0026#34;) c.Header(\u0026#34;Access-Control-Expose-Headers\u0026#34;, \u0026#34;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\u0026#34;) c.Header(\u0026#34;Access-Control-Allow-Credentials\u0026#34;, \u0026#34;true\u0026#34;) if method == \u0026#34;OPTIONS\u0026#34; { c.AbortWithStatus(http.StatusNoContent) } c.Next() } } 但是并不好使用，所以又找到下面这种方法，总算是搞明白了啥意思了！\nfunc cors() gin.HandlerFunc { return func(c *gin.Context) { origin := c.Request.Header.Get(\u0026#34;origin\u0026#34;) if len(origin) == 0 { origin = c.Request.Header.Get(\u0026#34;Origin\u0026#34;) } c.Writer.Header().Set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, origin) c.Writer.Header().Set(\u0026#34;Access-Control-Allow-Credentials\u0026#34;, \u0026#34;true\u0026#34;) c.Writer.Header().Set(\u0026#34;Access-Control-Allow-Headers\u0026#34;, \u0026#34;Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With\u0026#34;) c.Writer.Header().Set(\u0026#34;Access-Control-Allow-Methods\u0026#34;, \u0026#34;OPTIONS, GET, POST\u0026#34;) c.Writer.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json; charset=utf-8\u0026#34;) if c.Request.Method == \u0026#34;OPTIONS\u0026#34; { c.AbortWithStatus(http.StatusNoContent) return } c.Next() } } 跨域请求字段说明\nAccess-Control-Allow-Origin\n首先，客户端请求时要带上一个Origin，用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。然后服务端在返回时需要带上这个字段，并把对方传过来的值返回去。告知客户端，允许这次请求。 这个字段也可以设置为*，即允许所有客户端访问。但是这样做会和Access-Control-Allow-Credentials 起冲突。可能导致跨域请求失败。\nAccess-Control-Allow-Credentials\n这个字段是一个BOOL值，可以允许客户端携带一些校验信息，比如cookie等。如果设置为Access-Control-Allow-Origin：*，而该字段是true，并且客户端开启了withCredentials, 仍然不能正确访问。需要把Access-Control-Allow-Origin的值设置为客户端传过来的值。\n"});index.add({'id':33,'href':'/docs/docutment/go/gin/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/','title':"项目结构",'section':"Docs",'content':"main #  程序入口\nrouters #  路由配置\ncontrollers #  控制器\ndao #  数据库操作\nstatic #  静态文件\nmodels #  数据模型\nservices #  逻辑业务操作\nconfig #  "});index.add({'id':34,'href':'/docs/docutment/go/goland%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/','title':"Goland中文乱码",'section':"Docs",'content':"Help-\u0026gt;Edit Custom VM Options\u0026hellip;在开打文件中添加参数-Dfile.encoding=UTF-8\n  "});index.add({'id':35,'href':'/docs/docutment/go/grpc/proto3%E5%9F%BA%E7%A1%80/','title':"Proto3基础",'section':"Docs",'content':"1. 定义proto文件 #  //声明protobuf版本\rsyntax = \u0026quot;proto3\u0026quot;;\r自动生成pb的时候，会提示要有go_package\noption go_package='.;grpc';\r .: 表示生成pb文件在哪个位置 ;grpc: 表示生成的pb文件所属保命  package grpc;\rservice Greeter{\rrpc SayHello (HelloRequest) returns(HelloReply){}\r}\rmessage HelloRequest{\rstring name = 1;\r}\rmessage HelloReply{\rstring message = 1;\r}\r2. 生成pb文件 #  //go:generate protoc -I . --go_out=plugins=grpc:./ ./helloworld.proto\r"});index.add({'id':36,'href':'/docs/docutment/go/grpc/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/','title':"基础配置",'section':"Docs",'content':"配置基本信息 #   获取grpc  go get -u google.golang.org/grpc\rgo get -u github.com/golang/protobuf/{proto,protoc-gen-go}\r"});index.add({'id':37,'href':'/docs/docutment/go/rabbitmq/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/','title':"容器运行",'section':"Docs",'content':"创建运行容器 #  docker run -itd --name small-mq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 5672:5672 -p 15672:15672 rabbitmq 我是分割线 #  docker run -dit \u0026ndash;name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:managemen\n"});index.add({'id':38,'href':'/docs/docutment/go/socket.io/','title':"Socket.io",'section':"Docs",'content':"socket.io 配置到外网 服务器后，就会出现如下问题\nError during WebSocket handshake: Unexpected response code: 400\r ，根据github的讨论，得到如下答案\nproxy_http_version 1.1;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection \u0026quot;upgrade\u0026quot;;\rproxy_set_header Host $host;\r其中第一行是告诉nginx使用HTTP/1.1通信协议，这是websoket必须要使用的协议。 第二行和第三行告诉nginx，当它想要使用WebSocket时，响应http升级请求。\n"});index.add({'id':39,'href':'/docs/docutment/go/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/json/','title':"Json",'section':"Docs",'content':"json编码 #  type Person struct { Name string `json:\u0026#34;name\u0026#34;` Age int `json:\u0026#34;age,omitempty\u0026#34;` } type Toys struct { Person Toys []string `json:\u0026#34;toys\u0026#34;` } func main(){ p := Person{Name:\u0026#34;cao\u0026#34;,Age:12} toys := []string{\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;} toy := Toys{Person:p,Toys: toys} resbyte,err := json.Marshal(toy) if err != nil{ log.Fatal(err) } // 返回byte切片，转成string类型  resstring := string(resbyte) fmt.Println(resstring) } Out:\n{\u0026quot;name\u0026quot;:\u0026quot;cao\u0026quot;,\u0026quot;toys\u0026quot;:[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;]}\rjson:\u0026quot;age\u0026quot; : 可以理解成别名，\noemiempty ： 值为空，就忽略此字段\n解码json Unmarshal() #  将json字符串转成结构体变量，json.Unmarshal()必须传入byte切片\n"});index.add({'id':40,'href':'/docs/docutment/go/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/unsafe.pointer/','title':"Unsafe.pointer",'section':"Docs",'content':"unsafe.pointer #   可支持操作内存； 可以转换到任意类型指针 非安全的，不建议使用  "});index.add({'id':41,'href':'/docs/docutment/go/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/','title':"多线程编程",'section':"Docs",'content':"go 关键字 就定义了一个协程\n"});index.add({'id':42,'href':'/docs/docutment/go/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/','title':"常见问题整理",'section':"Docs",'content':"map #  map中元素为结构体，不能直接修改，因为map元素无法取地址；\ntype Student struct { name string } 修改map中struct元素的值，错误示例：\nfunc TestMap(t *testing.T) { m := map[string]Student11{\u0026#34;people\u0026#34;: {\u0026#34;zhoujielun\u0026#34;}} //编译错误 Cannot assign to m[\u0026#34;people\u0026#34;].name \tm[\u0026#34;people\u0026#34;].name = \u0026#34;wuyanzu\u0026#34; } 解决办法：\nfunc TestMap(t *testing.T) { //Student =\u0026gt; *Student \tm := map[string]*Student{\u0026#34;people\u0026#34;: {\u0026#34;zhoujielun\u0026#34;}} //编译错误 Cannot assign to m[\u0026#34;people\u0026#34;].name \tm[\u0026#34;people\u0026#34;].name = \u0026#34;wuyanzu\u0026#34; } "});index.add({'id':43,'href':'/docs/docutment/go/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/','title':"异常处理",'section':"Docs",'content':"go中的异常处理机制 #  为了保证程序不会因为一个异常而导致停摆，同时又不像其它语言那么啰嗦，对go语言的异常机制的简单理解实践一下吧\npackage main import \u0026#34;fmt\u0026#34; func divide(a int,b int,isPanic bool) int { //,类似于 java try catch ，，通过panic抛出异常 recover 捕获， \tif isPanic{ defer func() { if err := recover(); err != nil{ fmt.Println(err) } }() } //可以自行捕获异常,自定义异常信息 \t/*if b==0{ panic(\u0026#34;除数不能等于0\u0026#34;) }*/ c := a/b return c } func main() { divide(3,0,true) fmt.Println(\u0026#34;我的天，一切运转正常\u0026#34;) } Out1:\nruntime error: integer divide by zero\r我的天，一切运转正常\rOut2:\n自定义异常信息\r除数不能等于0\r我的天，一切运转正常\r如果没有recover,程序不能正常往下执行，就此打住了；\n"});index.add({'id':44,'href':'/docs/docutment/go/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%A6%E8%A7%A3/','title':"格式化详解",'section':"Docs",'content':"fmt.printf #  常规格式化 #   %v : 打印变量值 %T : 类型  整型 #   %+d 带符号的整型，fmt.Printf(\u0026quot;%+d\u0026quot;, 255)输出+255 %q 打印单引号 %o 不带零的八进制 %#o 带零的八进制 %x 小写的十六进制 %X 大写的十六进制 %#x 带0x的十六进制 %U 打印Unicode字符 %#U 打印带字符的Unicode %b 打印整型的二进制  float 浮点型 #  string 字符串 #  "});index.add({'id':45,'href':'/docs/docutment/go/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/','title':"环境配置",'section':"Docs",'content':"安装环境，配置环境变量 #  GOROOT:go安装路径\rGOPATH: 项目目录\rPATH ：%GOROOT%\\bin;%GOPATH%\\bin\rGOland 配置环境 #  https://github.com/goproxyio/goproxy\ngo env -w GO111MODULE=on\rgo env -w GOPROXY=https://goproxy.io,direct\r# 设置不走 proxy 的私有仓库，多个用逗号相隔（可选）\rgo env -w GOPRIVATE=*.corp.example.com\r# 设置不走 proxy 的私有组织（可选）\rgo env -w GOPRIVATE=example.com/org_name\rgo moudle 初始化 #  go mod project_name\rgo build\r "});index.add({'id':46,'href':'/docs/docutment/kotlin/jetpack/','title':"Jetpack",'section':"Docs",'content':"android jetpack框架组件\ndatabinding; 数据绑定库\nlivedata: 数据观察类，\nRoom: 数据库\nViewmodel: 绑定activity或者fragment生命周期，\n"});index.add({'id':47,'href':'/docs/docutment/kotlin/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8C%BA%E9%97%B4/','title':"区间",'section':"Docs",'content':"区间使用 #  1..10: 1-10 区间内的数字打印（ 包含10）\nfun main() { for(i in 1 .. 10){ print(i) } } //until 不包含10 step:指定步长，每隔 两个输出一个 for(i in 1 until 10 step 2){ print(i) } 10 downTo 1:倒着输出区间 10-1\nfor(i in 10 downTo 1 step 1){ print(i) } "});index.add({'id':48,'href':'/docs/docutment/kotlin/%E6%B3%A8%E8%A7%A3/','title':"注解",'section':"Docs",'content':"注解 #  注解就是一种特殊的注释/解释，分两种情况，1.在代码编写阶段，编译器会看到的，并且明白是什么意思；2. 在运行阶段，反射机制，动态代理等应用。\n元注解 #  给注解加一个注释/ 注解上的注解；比如某个注解的作用域通过元注解告诉编译器，还有注解的生命周期等。 @Target ElementType.TYPE：允许被修饰的注解作用在类、接口和枚举上 ElementType.FIELD：允许作用在属性字段上 ElementType.METHOD：允许作用在方法上 ElementType.PARAMETER：允许作用在方法参数上 ElementType.CONSTRUCTOR：允许作用在构造器上 ElementType.LOCAL_VARIABLE：允许作用在本地局部变量上 ElementType.ANNOTATION_TYPE：允许作用在注解上 ElementType.PACKAGE：允许作用在包上\n"});index.add({'id':49,'href':'/docs/docutment/kotlin/%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E9%97%AE%E9%A2%98/','title':"约束布局 Text View自动换行问题",'section':"Docs",'content':"1.修改textview的约束条件\napp:layout_constraintStart_toEndOf=\u0026quot;@+id/textView3\u0026quot;\r改为\rapp:layout_constraintLeft_toRightOf=\u0026quot;@+id/textView3\u0026quot;\r注意 其他的start end也都改为left right 2.其他属性搭配：\nandroid:layout_height=\u0026quot;wrap_content\u0026quot;\r搭配：app:layout_constrainedWidth=\u0026quot;true\u0026quot;\randroid:layout_height=\u0026quot;wrap_content\u0026quot;\r搭配：app:layout_constrainedHeight=\u0026quot;false\u0026quot;（不写默认即false）\r"});index.add({'id':50,'href':'/docs/docutment/linux/ftp/FTP%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80/','title':"F T P修改默认地址",'section':"Docs",'content':"查看ftp默认用户主目录在哪里 Yum install finger\nfinger ftp [root@OX39Ø6c finger ftp Login: ftp Directory: / var/ftp Never logged in. No mail. No Plan. Name: FTP User Shell: /sbin/nologin /\n修改默认目录 vim /etc/passwd\n[root@OX39Ø6c vim /etc/passwd ftp:x:14:50: FTP\n修改/var/ftp 为想要修改的目录路径 然后重启vsftpd服务 service vsftpd restart\n如果修改之后仍不能用，需要关闭 SELinux\n 修改/etc/selinux/config文件中的SELINUX=\u0026quot;\u0026quot; 为 disabled ，然后重启。 如果不想重启系统，使用命令setenforce 0  "});index.add({'id':51,'href':'/docs/docutment/linux/ftp/ftp%E9%85%8D%E7%BD%AE/','title':"Ftp配置",'section':"Docs",'content':"1.查看是否安装ftp服务 rpm -q vsftpd\n2.安装ftp服务 yum install vsftpd 3.开机启动 chkconfig vsftpd on 4.启动服务 service vsftpd start 5.重新启动vsftpd service vsftpd restart 来自 https://www.cnblogs.com/surge/p/3868270.html\n修改相关配置项在 /etc/vsftpd/vsftpd.conf中\n"});index.add({'id':52,'href':'/docs/docutment/linux/ubuntu/','title':"Ubuntu",'section':"Docs",'content':"键盘失灵 #  1.安装软件后键盘鼠标失灵，需要安装xserver包 xserver-xorg-input-all 保证电脑能联网，或者通过ssh远程连接\nsudo apt install xserver-xorg-input-all\r "});index.add({'id':53,'href':'/docs/docutment/linux/%E5%85%B3%E6%9C%BA%E4%BA%8E%E9%87%8D%E5%90%AF/','title':"关机于重启",'section':"Docs",'content':"   命令 详情     reboot 普通重启   shutdown -r now 立即重启(root)   shutdown -r 10 10分钟后重启   shutdown -r 20:00 8点重启       关机 详情     halt 立刻关机   poweroff 立刻关机   shutdown -h now 立刻关机(root)   shutdown -h 10 10分钟后关机    "});index.add({'id':54,'href':'/docs/docutment/linux/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/','title':"定时任务",'section':"Docs",'content':"定时任务 #   查看定时任务  crontab -l 编辑定时任务  crontab -e 每周五23点定时关机\n0 23 * * 5 /usr/sbin/shutdown now 命令必须是完整路径：/usr/sbin/shutdown\n查看命令路径：which\n"});index.add({'id':55,'href':'/docs/docutment/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/','title':"常用命令",'section':"Docs",'content':"查看文件\ncat filename 查看指定文件 行数\ntail filename -n 行数 上传文件 SCP\n# scp 用户名@远程地址：远程文件路径 本地文件路径 scp root@zouni.vip:/path localpath "});index.add({'id':56,'href':'/docs/docutment/linux/%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B/','title':"杀死进程",'section':"Docs",'content':"# 查找进程\rps auxf |grep uwsgi\r# 查看当前进程\rpstree -ap|grep gunicorn\r# 杀死 进程\rkill -9 544\r"});index.add({'id':57,'href':'/docs/docutment/linux/%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC/','title':"查看版本",'section':"Docs",'content':"内核版本\nuname -a 所有版本信息\nlsb_release -a centos 查看版本\ncat /etc/redhat-release 结果\nCentOS Linux release 8.1.1911 (Core) "});index.add({'id':58,'href':'/docs/docutment/linux/%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/','title':"硬盘空间清理",'section':"Docs",'content':"查看硬盘使用情况 #  df -h\r 查看大文件 #  du -h -x --max-depth=1\r "});index.add({'id':59,'href':'/docs/docutment/linux/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/','title':"端口占用",'section':"Docs",'content':"netstat -apn|grep 8888\n"});index.add({'id':60,'href':'/docs/docutment/mysql/mysqlconfig/','title':"Mysqlconfig",'section':"Docs",'content':"mysql 配置 #  首先查看centos是否已经安装了mysql源 #  yum list installed mysql*\r如果有就删除\ryum remove mysql-community-*\r安装mysql源 #  https://dev.mysql.com/downloads/repo/yum/\rwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\r安装mysql #  yum -y install mysql57-community-release-el7-10.noarch.rpm\r查看是否已经安装了数据库源 #  yum repolist all | grep mysql\r查看数据库源 #  /etc/yum.repos.d/mysql-community.repo\r修改源可用 mysql80 enable = 1\r安装数据库服务 #  yum install mysql-server\r启动mysql #  systemctl start mysqld.service\r查看状态 #  systemctl status mysqld.service\r查看初始密码 #  grep \u0026quot;password\u0026quot; /var/log/mysqld.log\r修改密码 #  mysql\u0026gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';\rmysql\u0026gt; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456'\r注意:密码设置必须要大小写字母数字和特殊符号（,/';:等）,不然不能配置成功\n"});index.add({'id':61,'href':'/docs/docutment/mysql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/','title':"忘记密码",'section':"Docs",'content':"修改配置文件，无密码登录 编辑文件：\n/etc/mysql/mysq.conf.d/mysqld.cnf\r加入skip-grant-tables 跳过密码登录；\n重启mysql服务\nsystemctl restart mysql.service\r进入mysql\n# mysql;\r# use mysql;\r# 更新密码为空\r# UPDATE user SET authentication_string='' WHERE User='root' AND Host ='localhost';\r# flush privileges;\r退出\r注释掉skip-grant-tables\n重启mysql，无密码登录 #  "});index.add({'id':62,'href':'/docs/docutment/mysql/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%BC%80%E5%90%AF/','title':"远程访问开启",'section':"Docs",'content':"开启mysql的远程访问 两种方式 #   方式1  grant all privileges on *.* to 'root'@'192.168.1.145' identified by '123456' with grant option;\rflush privileges;\r 方式2  use mysql;\rupdate user set host = '%' where user = 'root';\r更细权限之后，一定要刷新一下，否则不会生效\nflush privileges;\r 方式3   此处为设置root用户远程\rmysql -uroot -p #输入密码\ruse mysql;\rupdate user set host = '%' where user = 'root';\rselect host, user from user;\rflush privileges;\r去掉配置文件中bind-address #  bind-address = 127.0.0.1\r# bind-address = 127.0.0.1\r"});index.add({'id':63,'href':'/docs/docutment/nginx/%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1/','title':"一个端口多个服务",'section':"Docs",'content':"一个端口配置多个服务 #  实验阶段\u0026mdash;\u0026mdash;-\nserver { listen 80; server_name apitest.aa.com; location / {\rproxy_pass http://10.26.31.176:8081; #微服务地址测试环境\rroot html; index index.html index.htm; } }\rserver { listen 80; server_name api.aa.com; location / { proxy_pass http://10.26.31.176:8080; #微服务地址线上环境\rroot html; index index.html index.htm; } }\r"});index.add({'id':64,'href':'/docs/docutment/nginx/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/','title':"常用命令",'section':"Docs",'content':"启动 #  nginx\r 查看帮助 #  nginx -h  查看版本 #  nginx -v\r 查看配置参数 #  nginx -V\r 指定参数 #  nginx -s\r 测试配置参数是否正确 #  nginx -t -C filename\r 测试配置是否正确 #  nginx -t  重载，每次修改配置信息都需要重载nginx #  nginx -s reload\r 停止运行 #  nginx -s stop\r "});index.add({'id':65,'href':'/docs/docutment/nginx/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/','title':"手动编译安装nginx",'section':"Docs",'content':"下载官方nginx 包 #   wget http://nginx.org/download/nginx-1.10.1.tar.gz\n 配置nginx #  #\u0026ndash;prefix 指定安装的目录 #/usr/local/nginx 是安装目录，不能和自己下载的文件目录重了 #./configure \u0026ndash;prefix=/usr/local/nginx\n#带ssl stub_status模块 添加strem模块 –with-stream，这样就能传输tcp协议了 #http_stub_status_module 状态监控 #http_ssl_module 配置https #stream 配置tcp得转发 #http_gzip_static_module 压缩 #http_sub_module 替换请求\n./configure \u0026ndash;prefix=/usr/local/nginx \u0026ndash;with-http_stub_status_module \u0026ndash;with-http_ssl_module \u0026ndash;with-stream\n#带用户得方式 ./configure \u0026ndash;user=www \u0026ndash;group=www \u0026ndash;prefix=/usr/local/nginx \u0026ndash;with-http_stub_status_module \u0026ndash;with-http_ssl_module \u0026ndash;with-stream \u0026ndash;with-http_gzip_static_module \u0026ndash;with-http_sub_module\n 编译 安装 #   make \u0026amp;\u0026amp; make install\n "});index.add({'id':66,'href':'/docs/docutment/nginx/%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/','title':"权限问题",'section':"Docs",'content':"403异常 #  第一次配置一般是权限问题 /etc/nginx/nginx.conf\nuse nginx; 改为： use root;\n"});index.add({'id':67,'href':'/docs/docutment/nodejs/mysql%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5/','title':"Mysql连接失败",'section':"Docs",'content':"数据库连接失败\nError: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\rat Handshake.Sequence._packetToError (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\rat Handshake.ErrorPacket (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\sequences\\Handshake.js:123:18)\rat Protocol._parsePacket (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\rat Parser._parsePacket (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\rat Parser.write (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\rat Protocol.write (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\rat Socket.\u0026lt;anonymous\u0026gt; (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\Connection.js:88:28)\rat Socket.\u0026lt;anonymous\u0026gt; (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\Connection.js:526:10)\rat Socket.emit (events.js:315:20)\rat addChunk (_stream_readable.js:302:12)\r--------------------\rat Protocol._enqueue (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\rat Protocol.handshake (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\protocol\\Protocol.js:51:23)\rat Connection.connect (D:\\WorkProject\\DeepLearning\\python_basic\\node_modules\\mysql\\lib\\Connection.js:116:18)\rat Object.\u0026lt;anonymous\u0026gt; (D:\\WorkProject\\DeepLearning\\python_basic\\catch\\game\\test.js:10:12)\rat Module._compile (internal/modules/cjs/loader.js:1200:30)\rat Object.Module._extensions..js (internal/modules/cjs/loader.js:1220:10)\rat Module.load (internal/modules/cjs/loader.js:1049:32)\rat Function.Module._load (internal/modules/cjs/loader.js:937:14)\rat Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\rat internal/main/run_main_module.js:17:47 {\rcode: 'ER_NOT_SUPPORTED_AUTH_MODE',\rerrno: 1251,\rsqlMessage: 'Client does not support authentication protocol requested by server; consider upgrading MySQL client',\rsqlState: '08004',\rfatal: true\r}\r解决办法：\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';\rflush privileges;\r试了之后不好使！\n"});index.add({'id':68,'href':'/docs/docutment/postgresql/%E6%97%B6%E5%8C%BA/','title':"时区",'section':"Docs",'content':"时区设置 #   goland 自带Database，默认时区是UTC,修改时区：  serverTimezone Asia/Shanghai\r "});index.add({'id':69,'href':'/docs/docutment/postgresql/%E8%A6%81%E7%82%B9/','title':"要点",'section':"Docs",'content':" 相当与mysql的show databases;  select datname from pg_database; 相当于mysql的show tables;  SELECT table_name FROM information_schema.tables WHERE table_schema = \u0026#39;public\u0026#39;; public 是默认的schema的名字\n相当与mysql的describe table_name;  SELECT column_name FROM information_schema.columns WHERE table_name =\u0026#39;table_name\u0026#39;; \u0026lsquo;table_name\u0026rsquo;是要查询的表的名字\n"});index.add({'id':70,'href':'/docs/docutment/python/bs4/%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90/','title':"基础解析",'section':"Docs",'content':"请求网页内容 #  # features : 解析器类型 result = BeautifulSoup(pagecontent,features = \u0026#39;html.parser\u0026#39;) # 获取所有ul标签 result.find_all(\u0026#39;ul\u0026#39;,id=\u0026#39;list\u0026#39;) "});index.add({'id':71,'href':'/docs/docutment/python/enviroment/anaconda/jupyter/','title':"Jupyter",'section':"Docs",'content':"生成配置文件 #  jupyter notebook --generate-config 生成密钥 #  jupyter notebook password # 设置密码：123456 如下地址 #  /root/.jupyter/jupyter_notebook_config.json # 生成密钥如下： sha1:23524a335a85:461a1f37e8e32af1ab8899329b3e41c41ea6e546  修改配置文件 #  vi /root/.jupyter/jupyter_notebook_config.py\r修改如下内容：\n# 允许 作为root访问 c.NotebookApp.allow_root = True # 允许访问的主机ip * 随意访问 c.NotebookApp.ip=\u0026#39;*\u0026#39; # 密钥：/root/.jupyter/jupyter_notebook_config.json 文件的内容 c.NotebookApp.password = u\u0026#39;sha1:03... \u0026#39; # 修改工作目录 c.NotebookApp.notebook_dir=\u0026#39;filepath\u0026#39; 修改完之后，重新启动jupyter notebook，浏览器打开127.0.0.1:8888输入刚开始设置的密码就正常登录了\n"});index.add({'id':72,'href':'/docs/docutment/python/enviroment/anaconda/tensorflow-gpu%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/','title':"Tensorflow Gpu虚拟环境",'section':"Docs",'content':"修改镜像源为国内源，方便快速下载\n直接创建环境，并下载tensorflow-gpu\nconda create -n tf2 tensorflow-gpu 激活环境\nsource activate conda activate tf2 "});index.add({'id':73,'href':'/docs/docutment/python/enviroment/anaconda/%E4%BF%AE%E6%94%B9%E6%BA%90/','title':"修改源",'section':"Docs",'content':"生成配置文件：conda config命令\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\rconda config --set show_channel_urls yes\r会在用户根目录下生成.condarc文件\n conda info  查看是否生效\n "});index.add({'id':74,'href':'/docs/docutment/python/enviroment/anaconda/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/','title':"创建虚拟环境",'section':"Docs",'content':"创建虚拟环境，并指定安装的model\nconda create -n env_name script_name\rF:\rconda create -n tensorflow tensorflow-gpu==2.1\r指定要安装的model版本，conda会自动安装所有关联的包\n"});index.add({'id':75,'href':'/docs/docutment/python/enviroment/anaconda/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/','title':"常用命令",'section':"Docs",'content':"查看所有创建的虚拟环境\nconda info -e\ror\rconda env list\r 创建虚拟环境\nconda create -n envname\r 激活虚拟环境\n# centos 需要执行 source activate\nconda activate envname\r 关闭虚拟环境\nconda deactivate envname  删除虚拟环境\nconda remove -n envname --all\r 重命名环境 =\u0026gt; 先clone 再重建 == 克隆or移植环境\nconda create -n python_basic --clone matplotlib_basic\r "});index.add({'id':76,'href':'/docs/docutment/python/enviroment/pip/','title':"Pip",'section':"Docs",'content':"pip 安装软件 #  -U : 升级到最新版本\n-i : 指定下载库源\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple -U funcat\rpip 更新失败 #  pip install --upgrade pip\r更新失败 解决办法： 重新下载安装\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\r强制安装：\npython get-pip.py --force-reinstall\r"});index.add({'id':77,'href':'/docs/docutment/python/enviroment/pypi%E4%BF%AE%E6%94%B9%E6%BA%90/','title':"Pypi修改源",'section':"Docs",'content':"修改源的两种方式 #   临时修改 -i 指定源 安装指定的 model\n-U : 升级到最新版本\n-i : 指定下载库源  pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -U funcat\r永久修改  pip install pip -U\rpip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\r源 #     name source     清华 https://pypi.tuna.tsinghua.edu.cn/simple   阿里 https://mirrors.aliyun.com/pypi/simple/    "});index.add({'id':78,'href':'/docs/docutment/python/flask/flask_migrate/%E5%9D%91/','title':"坑",'section':"Docs",'content':"flask-migrate 坑 #   字段长度更新会提示 No changes in schema detected.  解决办法：初始化Migrate的时候增加属性compare_type为True\nMigrate(app=app, db=db,render_as_batch = True,compare_type = True) "});index.add({'id':79,'href':'/docs/docutment/python/flask/flask_migrate/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/','title':"数据库迁移",'section':"Docs",'content':"初始化 #  初始化迁移文件\npython manage.py db init\r将模型映射 添加到文件中\npython manage.py db migrate\r最后 映射到数据库中：\npython manage.py db upgrade\rmanage.py 添加数据 #  命令行 添加数据\npython manage.py create_user -u yunhai -e cao_cgq@163.com -p 1234\r"});index.add({'id':80,'href':'/docs/docutment/python/flask/js/ajax%E9%87%8D%E5%AE%9A%E5%90%91%E9%97%AE%E9%A2%98/','title':"Ajax重定向问题",'section':"Docs",'content':"ajax 收到服务器端返回请求302,服务端给定重定向地址\n服务端返回\n{\u0026#39;code\u0026#39;: 302, \u0026#39;data\u0026#39;: \u0026#39;/cms/\u0026#39;} 前端处理\n$(function () { var url = window.location.pathname $.ajax({ url: url+\u0026#39;logout\u0026#39;, type: \u0026#39;get\u0026#39;, dataType:\u0026#39;json\u0026#39; success: function (data,status) { // var datas = JSON.parse(data)  if(data.code === 302){ location.href = data.data; } alert(\u0026#39;重定向\u0026#39;) }, error: function (data) { console.log(data.toString()) } }) } "});index.add({'id':81,'href':'/docs/docutment/python/flask/session/','title':"Session",'section':"Docs",'content':"session 过期时间\ndef login(): session.permanent = True app.permanent_session_lifetime = timedelta(minutes=1) # 设置session到期时间 "});index.add({'id':82,'href':'/docs/docutment/python/flask/uwsgi%E5%9D%91/','title':"Uwsgi坑",'section':"Docs",'content':"pip3 安装 uwsgi遇到异常： #   Exception: you need a C compiler to build uWSGI\n 解决办法：\nyum install gcc\r安装完c解释器后没有 又提示没找到python文件 #   plugins/python/uwsgi_python.h:2:10: fatal error: Python.h: No such file or directory\n 解决办法：\n 安装python3-dev,正常这么安装 提示找不到,先搜索\n yum search python3 dev   因为当前版本是python3.6, 所以最终找到python36-devel 并安装\n yum install python36-devel  "});index.add({'id':83,'href':'/docs/docutment/python/flask/%E5%AD%90%E5%9F%9F%E5%90%8D/','title':"子域名",'section':"Docs",'content':"1.本地测试需要修改hosts文件：C:\\Windows\\System32\\drivers\\etc\\hosts目录\n127.0.0.1\tzouni.vip\r127.0.0.1\tstudent.zouni.vip\r2.代码中设置： 修改蓝图 subdomain 为指定的子域名\nbp = Blueprint(\u0026#39;cms\u0026#39;, __name__, subdomain=\u0026#39;cms\u0026#39;) 3.设置 config 配置 SERVER_NAME=主域名\n"});index.add({'id':84,'href':'/docs/docutment/python/flask/%E6%A8%A1%E6%9D%BF/%E6%A8%A1%E6%9D%BF%E5%88%9B%E5%BB%BA%E6%B3%A8%E6%84%8F/','title':"模板创建注意",'section':"Docs",'content':"蓝图自定义模板文件夹template_folder注意点：\n如果app/templates中有index.html\n并且app/cms/templates也有index.html文件\n渲染模板会优先查找app/templates目录下。\n蓝图如果要正常使用，创建规则必须是app/cms/templates/cms/index.html，渲染render_template('cms/index.html') 完整例子：\nbp = Blueprint(\u0026#39;cms\u0026#39;, __name__, url_prefix=\u0026#39;/cms\u0026#39;, template_folder=\u0026#39;templates\u0026#39;) @bp.route(\u0026#39;/cms/index\u0026#39;) def index(): return render_template(\u0026#39;cms/index.html\u0026#39;） flask模板查找规则是优先项目根目录``\n"});index.add({'id':85,'href':'/docs/docutment/python/flask/%E9%83%A8%E7%BD%B2/docker%E9%83%A8%E7%BD%B2/','title':"Docker部署",'section':"Docs",'content':"docker run -itd \u0026ndash;name=nginx -p 80:80 -d -v /usr/local/small/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -v /usr/local/small/nginx/conf.d:/etc/nginx/conf.d -v /usr/local/small/web/:/root/web/ -d nginx\n"});index.add({'id':86,'href':'/docs/docutment/python/flask/%E9%83%A8%E7%BD%B2/supervisor/','title':"Supervisor",'section':"Docs",'content':"supervisor是进程守护服务 #  安装supervisor有以下操作\nsupervisor必须用python2\npip2 install supervisor 创建supervisor.conf 配置文件\n# supervisor的程序名字 [program:项目名字] # supervisor执行的命令 command=uwsgi --ini uwsgi.ini # 项目的目录 directory = /项目路径 # 开始的时候等待多少秒 startsecs=0 # 停止的时候等待多少秒 stopwaitsecs=0 # 自动开始 autostart=true # 程序挂了后自动重启 autorestart=true # 输出的log文件 stdout_logfile=/var/log/supervisord.log # 输出的错误文件 stderr_logfile=/var/log/supervisord.err [supervisord] # log的级别 loglevel=debug [inet_http_server] # supervisor的服务器 port = :9001 # 用户名和密码 username = admin password = 123 # 使用supervisorctl的配置 [supervisorctl] # 使用supervisorctl登录的地址和端口号 serverurl = http://127.0.0.1:9001 # 登录supervisorctl的用户名和密码 username = admin password = 123 [rpcinterface:supervisor] supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface supervisor命令操作 #  启动supervisor\nsupervisord -c filename 重启supervisor\nsupervisorctl -u admin -p 123 reload 进入supervisor控制台\nsupervisorctl -c filename 查看当前运行状态\nstatus 关闭在运行的程序\nstop 重启应用\nreload "});index.add({'id':87,'href':'/docs/docutment/python/flask/%E9%83%A8%E7%BD%B2/uwsgi%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/','title':"Uwsgi遇到的坑",'section':"Docs",'content':"编译配套 ssl的 uwsgi #  安装编译需要的环境 #  yum install openssl\ryum install openssl-devel\r安装 greenlet #  pip3 install greenlet\r找到 greenlet 位置 #  /root/.virtualenvs/flask/include/site/python3.6\r安装 #  CFLAGS=\u0026quot;-I/root/.virtualenvs/flask/include/site/python3.6\u0026quot; UWSGI_PROFILE=\u0026quot;asyncio\u0026quot; pip install uwsgi --no-use-wheel\ror\nCFLAGS=\u0026quot;-I/usr/include/openssl\u0026quot; UWSGI_PROFILE_OVERRIDE=ssl=true pip install uwsgi -I --no-cache-dir\rCFLAGS=\u0026quot;-I$/usr/bin/python3.6\u0026quot; UWSGI_PROFILE=\u0026ldquo;asyncio\u0026rdquo; pip3 install uwsgi \u0026ndash;no-use-wheel\nCFLAGS=\u0026quot;-I/usr/local/opt/openssl/include\u0026quot; LDFLAGS=\u0026quot;-L/usr/local/opt/openssl/lib\u0026quot; UWSGI_PROFILE_OVERRIDE=ssl=true pip install uwsgi -I \u0026ndash;no-cache-dir\nCFLAGS=\u0026quot;-I/usr/include/openssl\u0026quot; UWSGI_PROFILE_OVERRIDE=ssl=true pip install uwsgi -I \u0026ndash;no-cache-dir\nsudo CFLAGS=\u0026quot;-I/usr/local/opt/openssl/include\u0026quot; LDFLAGS=\u0026quot;-L/usr/local/opt/openssl/lib\u0026quot; UWSGI_PROFILE_OVERRIDE=ssl=true pip3 install uwsgi -I \u0026ndash;no-cache-dir\n"});index.add({'id':88,'href':'/docs/docutment/python/flask/%E9%83%A8%E7%BD%B2/virtualenvwrapper/','title':"Virtualenvwrapper",'section':"Docs",'content':"安装虚拟环境 #  安装虚拟环境\npip2 install virtualenvwrapper # **查找安装路径**  which virtualenvwrapper.sh  编辑.bashrc\nvim ~/.bashrc # 增加以下环境变量 export WORKON_HOME=$HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh 立即生效\nsource .bashrc 查找python3路径\nwhich python3  创建虚拟环境\nmkvirtualenv --python=/usr/bin/python3 name-env workon name-env 切换/激活 虚拟环境\nworkon name-evn cd ~/.virtualenvs/name-env/bin/ 退出虚拟环境\ndeactivate name-env 删除虚拟环境\nrmvirtualenv env-name "});index.add({'id':89,'href':'/docs/docutment/python/flask/%E9%83%A8%E7%BD%B2/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/','title':"数据库配置",'section':"Docs",'content':"mysql 配置 #  首先查看centos是否已经安装了mysql源 #  yum list installed mysql*\r如果有就删除\ryum remove mysql-community-*\r安装mysql源 #  https://dev.mysql.com/downloads/repo/yum/\rwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\r安装mysql #  yum -y install mysql57-community-release-el7-10.noarch.rpm\r查看是否已经安装了数据库源 #  yum repolist all | grep mysql\r查看数据库源 #  /etc/yum.repos.d/mysql-community.repo\r修改源可用 mysql80 enable = 1\r安装数据库服务 #  yum install mysql-server\r启动mysql #  systemctl start mysqld.service\r查看状态 #  systemctl status mysqld.service\r查看初始密码 #  grep \u0026quot;password\u0026quot; /var/log/mysqld.log\r修改密码 #  mysql\u0026gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';\r注意:密码设置必须要大小写字母数字和特殊符号（,/';:等）,不然不能配置成功 #  开启mysql的远程访问 两种方式 #   方式1  grant all privileges on *.* to 'root'@'192.168.0.1' identified by 'password' with grant option;\rflush privileges;\r 方式2  use mysql;\rupdate user set host = '%' where user = 'root';\r更细权限之后，一定要刷新一下，否则不会生效\nflush privileges;\r"});index.add({'id':90,'href':'/docs/docutment/python/flask/%E9%83%A8%E7%BD%B2/%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/','title':"部署流程",'section':"Docs",'content':"安装虚拟环境 #  安装虚拟环境\npip2 install virtualenvwrapper # **查找安装路径**  which virtualenvwrapper.sh  编辑.bashrc\nvim ~/.bashrc # 增加以下环境变量 export WORKON_HOME=$HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh 立即生效\nsource .bashrc 查找python3路径\nwhich python3  创建虚拟环境\nmkvirtualenv --python=/usr/bin/python3 name-env workon name-env 切换/激活 虚拟环境\nworkon name-evn cd ~/.virtualenvs/name-env/bin/ 退出虚拟环境\ndeactivate name-env 安装git用来传代码 #  安装git\nyum install git # 生成公钥 ssh-keygen -t rsa -C “email” # 查看公钥 cat ~/.ssh/id_rsa.pub #同步代码 git clone Uwsgi #  pip3 install uwsgi 在项目中创建uwsgi.ini配置文件\n[uwsgi] # 必须全部为绝对路径 # 项目的路径 chdir = /root/flask_f/ # Django的wsgi文件 wsgi-file = /root/flask_f/app.py # 回调的app对象 callable = app # Python虚拟环境的路径 home = /root/.virtualenvs/small-env # 进程相关的设置 # 主进程 master = true # 最大数量的工作进程 processes = 10 # nginx 直接用socket #http = :80 socket = /root/flask_f/small.sock # 设置socket的权限 chmod-socket = 666 # 退出的时候是否清理环境 vacuum = true 启动应用服务器 指定项目的uwsgi.ini配置文件\nuwsgi --ini uwsgi.ini Nginx #  Nginx 配置,目录下增加自定义配置文件\ncd /etc/nginx/conf.d upstream small{ server unix:///root/flask_f/small.sock; } # 配置服务器 server { # 监听的端口号 listen 80; # 域名 server_name 47.111.249.148; charset utf-8; # 最大的文件上传尺寸 client_max_body_size 75M; # 静态文件访问的url location /static { # 静态文件地址 alias /root/flask_f/static; } # 最后，发送所有非静态文件请求到django服务器 location / { uwsgi_pass small; # uwsgi_params文件地址 include /etc/nginx/uwsgi_params; } } "});index.add({'id':91,'href':'/docs/docutment/python/Ipython%E9%AD%94%E6%B3%95%E5%91%BD%E4%BB%A4/','title':"Ipython魔法命令",'section':"Docs",'content':"IPython是一个增强的shell工具, #  %cd —更改当前工作目录\n%edit —打开编辑器并在关闭编辑器后执行键入的代码\n%env —显示当前环境变量\n%pip install [pkgs] —在不离开交互式shell的情况下安装软件包\n%time和%timeit—定时执行Python代码\n"});index.add({'id':92,'href':'/docs/docutment/python/jupyter/%E8%8E%B7%E5%8F%96token/','title':"获取token",'section':"Docs",'content':"查看当前运行的jupyter notebook token\njupyter notebook list http://0.0.0.0:8888/?token=3c1c5cc60766ae6c4aea6234268d73b869fb34072b051cef\nhttp://127.0.0.1:8888/?token=3c1c5cc60766ae6c4aea6234268d73b869fb34072b051cef\n"});index.add({'id':93,'href':'/docs/docutment/python/matplotlib/animation%E5%8A%A8%E7%94%BB/','title':"Animation动画",'section':"Docs",'content':"动画 #  from matplotlib import animation,pyplot as plt import numpy as np fig,axe = plt.subplots() x = np.arange(0,2*np.pi,0.01) line, = axe.plot(x,np.sin(x)) def animations(i): line.set_ydata(np.sin(x+i/10)) return line def init(): line.set_ydata(np.sin(x)) return line # func 动画更新函数回调 # frames : 帧数，共多少帧 播放完 # init_func : 初始化回调函数 # interval : 刷新间隔 ms 毫秒 # blit ：是否整体刷新 ani = animation.FuncAnimation(fig=fig,func=animations,frames=100,init_func=init,interval=20,blit=False) plt.show() "});index.add({'id':94,'href':'/docs/docutment/python/matplotlib/%E5%AD%90%E5%9B%BE/','title':"子图",'section':"Docs",'content':"最简单方式创建子图 #  import numpy as np from matplotlib import pyplot as plt np.random.seed(123456) # 随机生成1-20的随机数 x = np.random.randint(1, 20, 20) xmax = x.max() xmin = x.min() xmax, xmin # 数据缩放到0-1的 区间 xx = (x - xmin) / (xmax - xmin) # 2,1,1, 代表 画子图 2行1列第一 个位置 # 参数中间的逗号可以免掉不写，211 plt.subplot(211) plt.plot(x) plt.subplot(2,1,2) plt.plot(y) plt.show()  创建子图 #  from matplotlib import pyplot as plt # 第一个子图 将 整个图分成 2行1列，占据第1个位置 plt.subplot(211) plt.plot([1,2],[3,4]) # 第二个子图 将整个图分成 2行3列 放在第4个位置，也就是2行第1位 plt.subplot(234) plt.plot([1,2],[3,4]) plt.subplot(235) plt.plot([1,2],[3,4]) plt.subplot(236) plt.plot([1,2],[3,4]) plt.show()  在网格图中指定位置创建子图 #  from matplotlib import pyplot as plt # 背景颜色 白色 plt.figure(facecolor=\u0026#39;white\u0026#39;) # shape: 网格形状 2行3列 一共6个单元的网格 # loc: 子图要方的位置，[0,0] 表示第一个格子 sub = plt.subplot2grid(shape=[2,3],loc=[0,0],colspan=2) sub.plot([1,2,3]) sub1 = plt.subplot2grid([2,3],[1,0]) sub1.plot([1,2,3]) sub2 = plt.subplot2grid([2,3],[1,1]) sub2.plot([1,2,3]) sub3 = plt.subplot2grid([2,3],[1,2]) sub3.plot([1,2,3]) plt.show()  切片创建子图 #  from matplotlib import pyplot as plt from matplotlib import gridspec as gs plt.figure(facecolor=\u0026#39;white\u0026#39;) gs = gs.GridSpec(3,3) plt.subplot(gs[0,2]) plt.subplot(gs[1,0]) plt.subplot(gs[2,1:]) plt.show()  subplots 创建子图，共享x,y #  from matplotlib import pyplot as plt # 创建子图 2行3列，共享x ,y 轴坐标 figure,subs = plt.subplots(nrows=2,ncols=3,sharex=True,sharey=True) figure.set_facecolor(\u0026#39;white\u0026#39;) subs[0,0].plot([1,2,3]) subs[1,1].plot([1,2,3]) plt.show()  "});index.add({'id':95,'href':'/docs/docutment/python/matplotlib/%E6%95%A3%E7%82%B9%E5%9B%BE/','title':"散点图",'section':"Docs",'content':"散点图\nfrom matplotlib import pyplot as plt x = [1, 2, 3] y = [3, 4, 5] plt.scatter(x, y) plt.show()  meshgrid生成点阵图\nfrom matplotlib import pyplot as plt x = [1, 2, 3] y = [3, 4, 5] xxx, yyy = np.meshgrid(x, y) plt.scatter(xxx, yyy) plt.show()  "});index.add({'id':96,'href':'/docs/docutment/python/numpy/meshgrid%E7%94%A8%E6%B3%95/','title':"Meshgrid用法",'section':"Docs",'content':"import numpy as np x = [1,2] y = [2,3] xx,yy = np.meshgrid(x,y) # 生成对应的网格坐标点 Out:\n# 对应输出坐标点：(1，2),(1,3),(2,2,),(2,3) [[1 2] [1 2]] [[2 2] [3 3]] "});index.add({'id':97,'href':'/docs/docutment/python/numpy/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/','title':"数组操作",'section':"Docs",'content':"查看数组有多少类别\nimport numpy as np array = [1,2,3,2,1,2,1] np.unique(array) ------------------------- array([1, 2, 3]) # x np.sum(x) "});index.add({'id':98,'href':'/docs/docutment/python/opencv/%E5%9B%BE%E5%83%8F%E5%90%88%E5%B9%B6/','title':"图像合并",'section':"Docs",'content':"图像融合 #  cv2.addWeighted(src1, alpha, src2, beta, gamma, dst=None, dtype=None)\n src1 : 图像 alpha : 透明系数 src2 : 图像2 beta : 透明系数 gamma : 亮度调节  import cv2 a = cv2.imread(\u0026#39;images/aaa.png\u0026#39;) b = cv2.imread(\u0026#39;images/bbb.png\u0026#39;) a = a[:b.shape[0],:b.shape[1],:] res = cv2.addWeighted(src1=a,alpha=0.3,src2=b,beta=1,gamma=0.3) cv2.imshow(\u0026#39;a\u0026#39;,a) cv2.waitKey(1000) cv2.imshow(\u0026#39;b\u0026#39;,b) cv2.waitKey(1000) cv2.imshow(\u0026#39;res\u0026#39;,res) cv2.waitKey(1000) cv2.destroyAllWindows() "});index.add({'id':99,'href':'/docs/docutment/python/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/','title':"图像基础操作",'section':"Docs",'content':"读取图片 #  import cv2 img = cv2.imread(\u0026#39;image_path\u0026#39;) 显示图片 #  import cv2 img = cv2.imread(\u0026#39;image_path\u0026#39;) cv2.imshow(\u0026#39;name\u0026#39;,img) cv2.waitKey() cv2.destroyAllWindows() 图像形状 #  import cv2 img = cv2.imread(\u0026#39;image_path\u0026#39;) img.shape 图像分割，通道拆分 #  import cv2 img = cv2.imread(\u0026#39;image_path\u0026#39;) b,g,r = cv2.split(img) 图像运算 #   cv2.add 方法 相加 取最大值255 img_a + img_b ,直接相加结果除255 取模  import cv2 img_a = cv2.imread(\u0026#39;image_a_path\u0026#39;) img_b = cv2.imread(\u0026#39;image_b_path\u0026#39;) img_c = cv2.add(img_a,img_b) img_d = img_a + img_b "});index.add({'id':100,'href':'/docs/docutment/python/opencv/%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E5%8F%98%E6%8D%A2/','title':"图像缩放变换",'section':"Docs",'content':"图像缩放 #   两种方式   dsize : 元组，传入要缩放图像的宽高  import cv2 img = cv2.imread(\u0026#39;img_path\u0026#39;) img1 = cv2.resize(av,dsize=(100,100)) cv2.imshow(\u0026#39;img\u0026#39;,img) cv2.imshow(\u0026#39;img1\u0026#39;,img1) cv2.waitKey() cv2.destroyAllWindows() fx fy 参数，分别 修改横列 缩放系数  import cv2 img = cv2.imread(\u0026#39;img_path\u0026#39;) img1 = cv2.resize(img,None,fx=2,fy=2) cv2.imshow(\u0026#39;img\u0026#39;,img) cv2.imshow(\u0026#39;img1\u0026#39;,img1) cv2.waitKey() cv2.destroyAllWindows() 翻转变换 #  flipCode:\n \u0026gt;1 沿着y axis左右变换 =0 沿着x axis上下变换 \u0026lt;0 沿着x axis上下 翻转，再沿着y axis 左右反转  import cv2 img = cv2.imread(\u0026#39;img_path\u0026#39;) img1 = cv2.flip(img,flipCode=1) cv2.imshow(\u0026#39;img\u0026#39;,img) cv2.imshow(\u0026#39;img1\u0026#39;,img1) cv2.waitKey() cv2.destroyAllWindows() "});index.add({'id':101,'href':'/docs/docutment/python/opencv/%E7%94%BB%E7%9F%A9%E5%BD%A2/','title':"画矩形",'section':"Docs",'content':"import cv2 imgpath = \u0026#39;d:/img.png\u0026#39; x,y,x1,y1 = 641,165,752,278 img = cv2.imread(imgpath) img.shape linet = cv2.LINE_4 img = cv2.rectangle(img, (x, y), (x1, y1), (0, 0, 255), linet,2) cv2.imshow(\u0026#39;name\u0026#39;, img) cv2.waitKey() cv2.destroyAllWindows()  "});index.add({'id':102,'href':'/docs/docutment/python/pycharm/matplot%E5%9B%BE%E5%83%8F%E7%8B%AC%E7%AB%8B%E7%AA%97%E5%8F%A3%E6%98%BE%E7%A4%BA/','title':"Matplot图像独立窗口显示",'section':"Docs",'content':"pycharm默认会显示 图像窗口在pycharm 上， 单独显示需要去掉以下设置\n  "});index.add({'id':103,'href':'/docs/docutment/python/pycharm/pycharm%E6%BF%80%E6%B4%BB%E7%A0%81/','title':"Pycharm激活码",'section':"Docs",'content':"XCTXZDU09E-eyJsaWNlbnNlSWQiOiJYQ1RYWkRVMDlFIiwibGljZW5zZWVOYW1lIjoi5bGx5Lic55CG5bel5aSn5a2mIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU0YiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQREIiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBSQiIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiRFAiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiRFBBIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjAwMzI2TFBBQTAwNTAwOCIsImhhc2giOiIxNjc5MTc3Mi8wOi0xNDczMTA4OTgxIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-FNMSclTw4g1JqWPPguaWKx52Mcp2N7DZUMhnWlUOTsNsiK/QdB2pwxX+FvNjEhKdCkAsO111gLa1Q1XXvXRIkMA8BFgYrlxZli9WSyqfbx0CBm35jw8TozH089e4S9iB5c82z6EMPOc+wxdmm1TxSqKOqP+qVmZVbt76vVhQoISb4Fx7EHPi06Po4+r8e40s+chXVGkGZihVcbxwjjSKe0p3ARj4BsXw5v9bznyxw9AU/2vLoyr+xyS49FzSFERnn+EZirf/93bcbzdFGFdNs2secIoi+q2JflgSs+8O6vLFaYx03PCs6W+405J9UziaT8866tgtbRhn/0nLigRq/A==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==\n"});index.add({'id':104,'href':'/docs/docutment/python/pycharm/pyqt%E9%85%8D%E7%BD%AE/designer/','title':"Designer",'section':"Docs",'content':"windows 平台 环境配置 #   首先安装pyqt5  pip install sip //这个是pyqt开发商提供的支持包\rpip install pyqt5\rpip install pyqt5-tools\rpycharm 配置pyqt 可拖拽控件工具 #    打开pycharm 找到Tools/External_Tools 新增一个   找到desiginer.exe位置,我的是在anaconda3安装的，就在我的虚拟环境目录下面找到：\nD:\\Anaconda3\\envs\\python_basic\\Scripts\\designer.exe\n  Working directory 这个路径是工作路径，所以一般就填入$FileDir$\n 编辑完UI后，还需要转换成py文件才行，所以需要配置pyui转换  需要配置下参数：\nProgram: python.exe 路径\rArguments: -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py\rWorking directory: $FileDir$\r 第一次使用,先新建一个ui文件先    妥妥拽拽一些控件华丽界面就完成了\n 最后一步，转换成py文件   end\n  "});index.add({'id':105,'href':'/docs/docutment/python/pycharm/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E6%8A%A5%E9%94%99/','title':"相对路径报错",'section':"Docs",'content':"pycharm使用相对路径，要修改当前解释器的工作路径到当前项目路径\n 修改完之后重启解释器，就可以了\n"});index.add({'id':106,'href':'/docs/docutment/python/pycharm/%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/','title':"设置代理",'section':"Docs",'content':"pycharm 设置代理 #   "});index.add({'id':107,'href':'/docs/docutment/python/python%E6%89%93%E5%8C%85exe/pyinstaller/','title':"Pyinstaller",'section':"Docs",'content':"举个例子先 #  pyinstaller -F xxx.py 参数说明 #  -F 打包单个文件 -W 去掉控制台窗口，就那个黑框 cmdshell -i 图标\n"});index.add({'id':108,'href':'/docs/docutment/python/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/','title':"创建文件服务器",'section':"Docs",'content':"-b 绑定ip地址\rpython -m http.server -b 192.168.1.145 8888\r"});index.add({'id':109,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/call/','title':"Call",'section':"Docs",'content':"call函数使用方法 #  __call__ 函数一般用于实例对象的回调,至少看起来实例对象的调用方式和函数一样 call 函数一个普通的函数，一般实现父类的方法之后，会在父类的__call__函数中回调\nclass Base():\rdef call(self):\rprint('我是base')\rdef __call__(self, *args, **kwargs):\rself.call()\rclass A(Base):\rdef __init__(self, name):\rself.name = name\rdef call(self):\rprint(self.name)\r 实例化：\na = A('small')\ra()\r 输出：\nsmall  子类不实现call，则会输出：\n我是base\r "});index.add({'id':110,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/json%E8%BD%AC%E6%8D%A2/','title':"Json转换",'section':"Docs",'content':"pyton对象转字符串 #  import json json.dumps(object,default=lambda obj:obj.__dict__,sort_keys = False,indent = 4,ensure_ascii = False) json.dumps() # 对象转json # lambda 是python类对象的方法 dict 保存的是对象的字典转成的字符串 json字符串转对象 #  # class必须试先init方法 classStus: list:list def__init__(self,d): self.__dict__=d jsons = {\u0026#34;list\u0026#34;: [{\u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;cao\u0026#34;, \u0026#34;age\u0026#34;: 10, \u0026#34;profile\u0026#34;: \u0026#34;曹的自我介绍\u0026#34;},{\u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;wang\u0026#34;, \u0026#34;age\u0026#34;: 20, \u0026#34;profile\u0026#34;: \u0026#34;王的自我介绍\u0026#34;}]} jsons = json.dumps(jsons) 将python字典转成json串 json.loads(jsons,object_hooks = class) "});index.add({'id':111,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/map/','title':"Map",'section':"Docs",'content':"获取map第一个元素的方法\nmap = {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2} keys = map.keys() # keys 是 dict_list类型 转成list keys = list(keys) # 利用第一个key来获取value item1 = map[keys[0]] print(item1) 打印结果：\n1 "});index.add({'id':112,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/open/','title':"Open",'section':"Docs",'content':"open 函数 #  open ： 如果文件 不存在，则创建\nopen(filename,mode=\u0026#39;\u0026#39;) ## 常用mode w 以写方式打开， a 以追加模式打开 (从 EOF 开始, 必要时创建新文件) r+ 以读写模式打开 w+ 以读写模式打开 (参见 w ) a+ 以读写模式打开 (参见 a ) rb 以二进制读模式打开 wb 以二进制写模式打开 (参见 w ) ab 以二进制追加模式打开 (参见 a ) rb+ 以二进制读写模式打开 (参见 r+ ) wb+ 以二进制读写模式打开 (参见 w+ ) ab+ 以二进制读写模式打开 (参见 a+ ) "});index.add({'id':113,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/with/','title':"With",'section':"Docs",'content':"with用法和原理：\nclass Sample: def __enter__(self): print(\u0026#34;In __enter__()\u0026#34;) return \u0026#34;Foo\u0026#34; def __exit__(self, type, value, trace): print(\u0026#34;In __exit__()\u0026#34;) def get_sample(): return Sample() with get_sample() as sample: print (\u0026#34;sample:%s\u0026#34; % sample) 运行代码，输出如下\nIn __enter__() sample: Foo In __exit__() 先执行__enter__方法，最后执行__exit__方法退出\n"});index.add({'id':114,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/','title':"内存使用情况",'section':"Docs",'content':"getsizeof #  x: 对象 return : 对象的字节数 sys.getsizeof(x)\n"});index.add({'id':115,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80%E8%A7%A3%E9%87%8A/','title':"字符串前缀解释",'section':"Docs",'content':"u #  unicode编码\nr #  不转义字符\n"});index.add({'id':116,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/','title':"异常处理",'section':"Docs",'content':"a = 0 try: 2 / a except Exception as e: print(\u0026#39;a---\u0026#39;, e) "});index.add({'id':117,'href':'/docs/docutment/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E6%96%AD%E8%A8%80/','title':"断言",'section':"Docs",'content':"a = -1 # 断言 a\u0026gt;0才正常执行，否则抛 异常 assert a\u0026gt;0 [Out]:\nTraceback (most recent call last):\rFile \u0026quot;D:\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\IPython\\core\\interactiveshell.py\u0026quot;, line 3331, in run_code\rexec(code_obj, self.user_global_ns, self.user_ns)\rFile \u0026quot;\u0026lt;ipython-input-45-013be11a8622\u0026gt;\u0026quot;, line 3, in \u0026lt;module\u0026gt;\rassert a\u0026gt;0\rAssertionError\r"});index.add({'id':118,'href':'/docs/docutment/RaspberryPi/%E5%AE%89%E8%A3%85docker/','title':"安装docker",'section':"Docs",'content':"docker 脚本安装 #  sudo curl https://get.docker.com/ \u0026gt; ./docker_install.sh\rsudo sh docker_install.sh –mirror Aliyun\r"});index.add({'id':119,'href':'/docs/docutment/RaspberryPi/%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/','title':"配置安装",'section':"Docs",'content':"下载镜像 #  将镜像写入sd卡 ，下载写入程序\nhttps://www.raspberrypi.org/downloads/\r修改配置 #  写入sd卡后，不要拔出，直接在sdcard中修改配置：\n 开启ssh 在根目录下直接新建ssh文件夹，就成功了 开启HDMI显示输出 修改config.txt文件  hdmi_safe=1\rconfig_hdmi_boost=4\rhdmi_ignore_edid=0xa5000080\rhdmi_group=2\rhdmi_mode=82    参数 说明     hdmi_safe=1 安全启动HDMI   config_hdmi_boost=4 开启热插拔   hdmi_group=1 CEA电视显示器   hdmi_group=2 DMT电脑显示器   hdmi_ignore_edid=0xa5000080 忽略自动探测的分辨率   hdmi_mode=4 640x480 60Hz   hdmi_mode=9 800x600 60Hz   hdmi_mode=16 1024x768 60Hz   hdmi_mode=82 1080p 60Hz    连接树莓派 #  树莓派启动后，红灯亮表示 接通电源；绿灯表示正在读写sd卡 3. 设置无线wifi 新建wpa_supplicant.conf文件\n country=CN\rctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\rupdate_config=1\rnetwork={\rssid=\u0026quot;wifiname\u0026quot;\rpsk=\u0026quot;password\u0026quot;\rpriority=1\r}\r说明：\n ssid: wifi名字 psk: wifi 密码  "});index.add({'id':120,'href':'/docs/docutment/README/','title':"R E a D M E",'section':"Docs",'content':"学习笔记 #  "});index.add({'id':121,'href':'/docs/docutment/springboot/%E5%AD%97%E6%AE%B5%E6%B3%A8%E8%A7%A3/','title':"字段注解",'section':"Docs",'content':"@JsonProperty(\u0026quot;game_name\u0026quot;): 给字段起别名； @JsonInclude(JsonInclude.Include.NON_NULL): 字段如果空值，json中不返回\ndata class Game(val id:Int, @JsonProperty(\u0026#34;wowo\u0026#34;) @JsonInclude(JsonInclude.Include.NON_NULL) val name: String?){ [ { \u0026#34;id\u0026#34;: 1, \u0026#34;wowo\u0026#34;: \u0026#34;csgo\u0026#34; }, { \u0026#34;id\u0026#34;: 2 } ] "});index.add({'id':122,'href':'/docs/docutment/springboot/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/','title':"常用注解",'section':"Docs",'content':"常用注解：\n  @Controller\n标注控制器，如果要包装json数据，需要 配合@ResponseBody\n  @RestController\n标注控制器，返回 json 数据\n  @RequestMapping\n路由映射\n  @SpringBootApplication\n应用住程序入口标注\n  @ComponentScan\n扫描指定包，给定一个范围，不指定默认扫描全部包\n  "});index.add({'id':123,'href':'/docs/docutment/springboot/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/','title':"常见问题",'section':"Docs",'content':"  启动类位置： 一般放在根目录下\n  Failed to configure a DataSource: \u0026lsquo;url\u0026rsquo; attribute is not specified and no em\n缺少配置信息\n  "});index.add({'id':124,'href':'/docs/docutment/web/css3/float%E5%B1%9E%E6%80%A7/','title':"Float属性",'section':"Docs",'content':"float： 漂浮在页面上层，也就是Z轴 漂浮元素不占据原有位置； 漂浮起来后会先找依赖，根节点或一同漂浮的元素\n"});index.add({'id':125,'href':'/docs/docutment/web/vue.js/%E5%92%8Cjinjia2%E6%A8%A1%E6%9D%BF%E5%86%B2%E7%AA%81/','title':"和jinjia2模板冲突",'section':"Docs",'content':"vue 和jinjia2模板冲突：\n 修改vue模板：  delimiters: ['{[', ']}']\r修改jinjia2模板：  app.jinja_env.variable_start_string = '[['\rapp.jinja_env.variable_end_string = ']]'\r"});index.add({'id':126,'href':'/docs/docutment/windows/windows-terminal/','title':"Windows Terminal",'section':"Docs",'content':"windows新终端 #   可以自定义主题：\n 打开设置  选择主题 https://atomcorp.github.io/themes/   将选择好的主题配置信息，放在下图schemes集合里\n 修改上图list增加colorScheme 名字对应添加的schemes中的name\n不够炫酷？修改背景图片， #  \u0026#34;backgroundImage\u0026#34;: \u0026#34;E:\\\\bg.png\u0026#34;, \u0026#34;backgroundImageOpacity\u0026#34;: 0.3, # 有四个选项 uniformToFill | none | fill | uniform \u0026#34;backgroundImageStretchMode\u0026#34;:\u0026#34;none\u0026#34;,  注意图片路径的反斜杠-转义或者用正斜杠：'/' 否则会设置失败\n最终效果： #   重新打开终端，ok\n"});index.add({'id':127,'href':'/docs/docutment/windows/%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/','title':"系统问题记录",'section':"Docs",'content':"无法生成D:config.msi下的常规子目录的列表，拒绝访问。怎么解决 #  无法生成D:config.msi下常规子文件夹的列表拒绝访问错误。\n修改 打开注册表 ：win+R + regedit\n HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/User Shell Folders/下Personal\n "});index.add({'id':128,'href':'/docs/docutment/%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D%E8%AE%B0%E5%BD%95/','title':"常用单词记录",'section':"Docs",'content':"   英文 中文     trigger 触发   necessary 必要的   depending 依赖   logic 逻辑   acquire 获取   heavy 重；大；沉重   separate 单独的，分离的    "});index.add({'id':129,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/KL%E6%95%A3%E5%BA%A6/','title':"K L散度",'section':"Docs",'content':"KL散度 -\u0026gt; 相对熵\n"});index.add({'id':130,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/tensorboard/','title':"Tensorboard",'section':"Docs",'content':"import tensorflow as tf # 这一步在网络初始化后 mode.summary() tf.summary.create_file_writer(\u0026#39;logs\u0026#39;) 指定要监听的工作日志目录 #  tensorboard --logdir logs "});index.add({'id':131,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/%E5%AE%89%E8%A3%85/centos%E5%AE%89%E8%A3%85tensorflow/','title':"Centos安装tensorflow",'section':"Docs",'content':"官网地址\n https://developer.nvidia.com/cuda-downloads?target_os=Linux\u0026amp;target_arch=x86_64\u0026amp;target_distro=CentOS\u0026amp;target_version=8\u0026amp;target_type=runfilelocal\n wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run sudo sh cuda_10.2.89_440.33.01_linux.run "});index.add({'id':132,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/%E5%AE%B9%E5%99%A8/','title':"容器",'section':"Docs",'content':"docker run -itd \u0026ndash;name=tensorflow -p 8888:8888 -v D:\\docker\\tf:/tmp -w /tmp 90338865fe9\nCannot connect:Cannot connect to the Docker daemon at tcp://localhost:2375,Is the docker daemon running?\n"});index.add({'id':133,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/%E5%AF%B9%E6%95%B0log2/','title':"对数log2",'section':"Docs",'content':"tensorlfow math.log() 是以自然常数e为底 转化为以2为底：\n根据对数换底公式：\n∵\n ∴ loge(4)/loge(2) = log2(4) = 2\r 代码实例：\nimport tensorflow as tf x = tf.math.log(4.)/tf.math.log(2.) Out:\n\u0026lt;tf.Tensor: shape=(), dtype=float32, numpy=2.0\u0026gt;\r 效果等同于 numpy log2(4)\nimport numpy as np np.log2(4) Out:\n2.0\r"});index.add({'id':134,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/','title':"常用函数",'section':"Docs",'content':"常用函数 #  unstack #  作用：把向量按照维度拆分\n gather #  通过索引获取 标量或者向量\n gather_nd #  可以索引多维\nargmax 最大值的索引\ntf.argmax([1,2,3,4,5,6,7,8])\r\u0026lt;tf.Tensor: shape=(), dtype=int64, numpy=7\u0026gt;\rsoftmax 概率最大的索引\n"});index.add({'id':135,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0/fill/','title':"Fill",'section':"Docs",'content':"# %% import tensorflow as tf from matplotlib import pyplot as plt x = tf.zeros([2, 2], dtype=tf.int32) # 如果要画一个灰度图，那么如下 # 填充一个[2,2]的矩阵为128 也就是灰色值 # [[255,255], # [255,255]] z = tf.fill([2, 2], 128) # 在最后一个维度展开一次，变成[2,2,1] z = tf.expand_dims(z, axis=-1) # 在最后一个维度平铺3次 # [2,2,3] z = tf.tile(z, [1, 1, 3]) plt.imshow(z) plt.show()  # %% # 画一个红色的图，也很简单 # 三个通道不同颜色 比如洋红色的rgb色值[255,0,255] r = tf.fill([3, 3], 255) g = tf.zeros([3, 3],dtype=tf.int32) b = r img = tf.stack([r, g, b], axis=-1) img.shape # 一个3x3的图片就诞生了 plt.imshow(img) plt.show()  "});index.add({'id':136,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tensorflow/%E5%BC%A0%E9%87%8F%E5%90%91%E9%87%8F/','title':"张量向量",'section':"Docs",'content':"张量是一维 二维是矩阵 张量\n"});index.add({'id':137,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BC%A9%E6%94%BE/','title':"数据缩放",'section':"Docs",'content':"数据缩放到某个区间 #  归一化公式：\n 每一个样本减去最小值，除以 最大值-最小值 (x - min(x) )/ (max(x) - min(x))\n"});index.add({'id':138,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/','title':"数据预处理",'section':"Docs",'content':"数据预处理 #  无量纲化\n数据缩放： 标准化，归一化\n标准化\n处理缺失值\n处理编码哑变量\n二值化，分箱\n"});index.add({'id':139,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/','title':"反向传播",'section':"Docs",'content':"关于反向传播 #  前向传播\n"});index.add({'id':140,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%B8%B8%E7%94%A8%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/','title':"常用激活函数",'section':"Docs",'content':"sigmoid #  import tensorflow as tf from matplotlib import pyplot as plt x = tf.linspace(-5.,5,20) x = tf.nn.sigmoid(x) plt.figure(facecolor=\u0026#39;white\u0026#39;) plt.plot(x) plt.show() numpy实现的sigmoid函数\nfrom matplotlib import pyplot as plt import numpy as np x = np.linspace(-5,5,20) x = list(map(lambda x: 1/(1+np.exp(-x)),x)) plt.figure(facecolor=\u0026#39;white\u0026#39;) plt.plot(x) plt.show()  relu #  \u0026lt; 0 就化为0\nfrom tensorflow.keras import activations activations.relu([1,2,3,-1,0]) out: \u0026lt;tf.Tensor: shape=(5,), dtype=int32, numpy=array([1, 2, 3, 0, 0])\u0026gt; "});index.add({'id':141,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/yolov3/','title':"Yolov3",'section':"Docs",'content':"准备数据集 #  labelImg 数据标注工具 模型结构 如下图： #   网络输入 416x416 经过一系列卷积层之后分成了三个分支，最终得到三个输出：[13,13,c],[26,26,c],[52,52,c] c是通道数\nfeature map 越大，感受野越小，适合预测小目标，\n[13,13] feature map适合预测大目标\n数据 target转换 #  同等变换，[512,512,3] =\u0026gt; [13,13,5]\n因为网络输出是 [13,13,255] [26,26,255] [52,52,255] 这里的255是：3*(5+80) 每一个网格预测3个bbox,每个box有(x,y,w,h,iou,classes) 所以要将y_true也进行转换 [13,13,3,6] =\u0026gt;[13,13,3,(x,y,w,h,iou,class)] 意思是 512x512的图片上的真是框 映射到13x13的 feature map上，缩放32倍\n每个图片上 最多有 gtbox_max个框，每个box 有5个值[x,y,w,h,confidence]\n因为网络输出是中心点坐标，所以x,y得转换成中心点坐标 图片转换成网络输入大小 x = [h,w,3] =\u0026gt; [416,416,3] label转换成网络输出 yolov3有9个anchors 网络输出有三个分支： [boxes,(x,y,x1,y1,class)] =\u0026gt;[13,13,3,(x,y,w,h,confidence,class))] # x,y是中心点坐标 [boxes,5] =\u0026gt;[26,26,3,6] [boxes,5] =\u0026gt;[52,52,3,6] y\n"});index.add({'id':142,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E6%95%B0%E6%8D%AE%E9%9B%86/','title':"数据集",'section':"Docs",'content':"标注数据集 #  labelImg.exe 工具标注\n制作数据集 #  训练集\n python tools/voc2012.py \u0026ndash;data_dir \u0026lsquo;D:/DeepLearning/datasets\\VOCtrainval_11-May-2012\\VOCdevkit\\VOC2012\u0026rsquo; \u0026ndash;split train \u0026ndash;output_file ./data/voc2012_train.tfrecord\n 测试集\n python tools/voc2012.py \u0026ndash;data_dir \u0026lsquo;./data/voc2012_raw/VOCdevkit/VOC2012\u0026rsquo; \u0026ndash;split val \u0026ndash;output_file ./data/voc2012_val.tfrecord\n "});index.add({'id':143,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E8%BF%87%E6%8B%9F%E5%90%88/','title':"过拟合",'section':"Docs",'content':"over fitting #  过拟合：当模型在训练集上表现好，在验证集上表现变差的时候出现过拟合\n解决过拟合 问题的方向 #   降低模型复杂度，减少参数量， 正则化 早停法  early stopping #  早停法： 当模型在验证集上的表现开始下降的时候，停止训练\n"});index.add({'id':144,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/MSE_MAE/','title':"M S E M a E",'section':"Docs",'content':"均方误差 #   平均绝对误差 #   "});index.add({'id':145,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E4%BF%A1%E6%81%AF%E7%86%B5_%E4%BA%A4%E5%8F%89%E7%86%B5/','title':"信息熵 交叉熵",'section':"Docs",'content':"事件的信息量随着事件发生概率的变大而 递减，信息不为负\n两个不相关事件同时发生所产生的信息： h(x,y) = h(x) + h(y)\n两个事件的概率满足： p(x,y) = p(x) * p(y).\n对数形式的 真数相乘=\u0026gt;对数相加\n信息： 𝐡(𝐱) = −𝒍𝒐𝒈𝟐𝒑(𝒙)\n 熵： 𝐇(𝐱) = −𝒔𝒖𝒎(𝒑(𝒙)𝒍𝒐𝒈𝟐𝒑(𝒙))\n𝐟(𝐱) = −𝒍𝒐𝒈𝟐𝒙 函数图像 交叉熵 #  交叉熵： 两个事件的分布相似情况， H(p,q) = H(p) + KL(p,q)\nKL散度用来衡量真实分布和预测分布的差异情况\n假设 两个事件的概率分布相同则有：\n∵ p=q,则 KL(p,q)=0\n∴ H(p,q) = H(p)\n根据 以上推导可知：\n假设 p = [0,1,0]\nH(p) = -log2(p) = 0 # P事件的信息为0 惊喜度最低\nH(p,q) = 0 + KL(p,q) = KL(p,q)\n所以H(p,q) = -plog(q) = -1log(q) # 其实就是计算KL最小值 KL(p,q) = 0, p=q\n"});index.add({'id':146,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%B9%B3%E6%96%B9%E5%92%8C%E5%85%AC%E5%BC%8F/','title':"平方和公式",'section':"Docs",'content':"平方和公式 #  求连续的自然数的平方和\n "});index.add({'id':147,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%BE%AE%E7%A7%AF%E5%88%86/','title':"微积分",'section':"Docs",'content':"https://www.zhihu.com/question/336322284/answer/918067537?clicktime=1579274262\n我们假设0到1之间被平均分成了n份，那么每一份的宽度就是1/n。而矩形的高度就是函数的纵坐标的值，纵坐标可以通过y=x²很容易算出来。于是，我们就知道，第1个矩形的高度为（1/n）²，第2个为（2/n）²，第3个为（3/n）²……\n微分积分互逆 积分是求原函数 微分是对原函数求导\n反向微分 =\u0026gt; 原函数 =\u0026gt; 积分\n"});index.add({'id':148,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%BF%85%E9%9C%80%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/','title':"微积分必需数学概念",'section':"Docs",'content':"平方和公式\n三角函数：正切\n"});index.add({'id':149,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E5%A4%A7%E7%BA%B2/','title':"数学大纲",'section':"Docs",'content':"信息论 #  统计代数 #  微积分 #   方差 均方误差  MSE 3. 傅里叶变换 4. 逆矩阵 5. 贝叶斯 概率 6. 线性代数 7. 概率论 8. 信息论 9. 微积分 10. 方差，标准差 正态分布 熵，交叉熵 贝叶斯，朴素贝叶斯概率 极大似然估计 最小二乘法 拉格朗日乘子法 微积分 矩阵：逆矩阵，单位矩阵，矩阵乘法 =》 向量模，向量内积（点积） 对数定理\n傅里叶变换 #  "});index.add({'id':150,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/','title':"数学概念",'section':"Docs",'content':"机器学习\n 数据特征处理  数据无量纲化：数据缩放 数据标准化   概率论：条件概率，联合概率，贝叶斯，朴素贝叶斯 信息论：信息熵，交叉熵，条件熵 线性回归 矩阵  了解全连接神经网络要先了解一些基本数学概念\n数据无量纲化 数据缩放 数据标准化\n什么是线性函数 线性回归和线性回归解决什么问题\n函数求导\n 微积分，微分积分互逆性，导数运算法则， 定积分，不定积分  矩阵乘法和矩阵逆\n方差和标准差和偏差\n对数概念\n"});index.add({'id':151,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%96%B9%E5%B7%AE%E5%92%8C%E5%81%8F%E5%B7%AE/','title':"方差和偏差",'section':"Docs",'content':"方差：方差就是 衡量数据的离散程度\n每个样本和（所有样本的平均数 的差 的平方 的和除以 样本数\n 低方差：数据看起来比较密集，离散程度 比较低\n高方差：数据看起来比较离散\n低偏差：数据看起来距离靶心比较近\n高偏差：数据距离则偏离靶心 较远\n "});index.add({'id':152,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/','title':"极大似然估计",'section':"Docs",'content':"极大似然估计\n抛硬币，已知硬币是正方两面，抛出硬币为花的概率\n"});index.add({'id':153,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E8%87%AA%E7%84%B6%E5%B8%B8%E6%95%B0e/','title':"自然常数e",'section':"Docs",'content':"自然常数e #  (1+1/n)^n ≈ 2.718\n伯努利研究发现： "});index.add({'id':154,'href':'/docs/docutment/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E9%87%8F%E7%BA%B2_%E6%97%A0%E9%87%8F%E7%BA%B2%E5%8C%96/','title':"量纲 无量纲化",'section':"Docs",'content':"量纲 #  量纲就好像是 度量单位一样，不同的单位的数据是没办法比较的，所以要统一，这就叫 去量纲化 or 无量纲化\n百科解释 : 时间的长短（秒、分、时）、质量的大小（g、Kg）、速度的快慢（Km/h、m/s）等，都是量纲，它们反映特定物理量或物理现象的度量，在物理学或者计算上通常以物理量的单位来表示。\n量纲是物理量的度量，是物理量的测量数据的表示。用来表示量纲的单位必须反映特定物理现象或物理量，如温度、位移、速度、质量等。仅代表特定数目的单位，称为“无量纲单位”。例如“打”代表12；“罗”代表12打或144。\n"});index.add({'id':155,'href':'/posts/linux/linux/','title':"Linux",'section':"Posts",'content':" 修改环境变量  #  "});})();