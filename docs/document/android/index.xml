<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云海阁</title>
    <link>https://zouni.vip/docs/document/android/</link>
    <description>Recent content on 云海阁</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://zouni.vip/docs/document/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/FAQ/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/FAQ/</guid>
      <description>#经常遇到的问题：#读取本地存储文件权限受限 open failed: EACCES (Permission denied)  //manifest.xml application标签&amp;lt;application android:requestLegacyExternalStorage=&amp;#34;true&amp;#34;/&amp;gt; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/gradle%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/gradle%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>#新版本 build.graldeplugins {  id &amp;#34;org.springframework.boot&amp;#34; version &amp;#34;2.2.2.RELEASE&amp;#34; } 旧版本
//Using legacy plugin application buildscript {  repositories {  maven {  url &amp;#34;https://plugins.gradle.org/m2/&amp;#34;  }  }  dependencies {  classpath &amp;#34;org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE&amp;#34;  } }  apply plugin: &amp;#34;org.springframework.boot&amp;#34; #android studio 运行 main 方法 报错SourceSet with name ‘main‘ not found 解决：./idea/gradle.xml -&amp;gt; 节点下 加入下面这句
&amp;lt;option name=&amp;#34;delegatedBuild&amp;#34; value=&amp;#34;false&amp;#34; /&amp;gt; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/style%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/style%E6%A0%B7%E5%BC%8F/</guid>
      <description> colorPrimary 应用的主要色调，actionBar默认使用该颜色，Toolbar导航栏的底色 colorPrimaryDark 应用的主要暗色调，statusBarColor默认使用该颜色 statusBarColor 状态栏颜色，默认使用colorPrimaryDark windowBackground 窗口背景颜色 navigationBarColor 底部栏颜色 colorForeground 应用的前景色，ListView的分割线，switch滑动区默认使用该颜色 colorBackground 应用的背景色，popMenu的背景默认使用该颜色 colorAccent CheckBox，RadioButton，SwitchCompat等一般控件的选中效果默认采用该颜色 colorControlNormal CheckBox，RadioButton，SwitchCompat等默认状态的颜色。 colorControlHighlight 控件按压时的色调 colorControlActivated 控件选中时的颜色，默认使用colorAccent colorButtonNormal 默认按钮的背景颜色 editTextColor：默认EditView输入框字体的颜色。 textColor Button，textView的文字颜色 textColorPrimaryDisableOnly RadioButton checkbox等控件的文字 textColorPrimary 应用的主要文字颜色，actionBar的标题文字默认使用该颜色 colorSwitchThumbNormal: switch thumbs 默认状态的颜色. (switch off)  #全局标题栏 fitsSystemWindows 生效前提：当前页面没有标题栏，并且状态栏或者底部导航栏透明 fitsSystemWindows = true，表示内容区不延伸到状态栏或底部导航栏 fitsSystemWindows = false，表示内容区延伸到状态栏或底部导航栏  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E6%8F%92%E4%BB%B6%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E6%8F%92%E4%BB%B6%E5%8C%96/</guid>
      <description>Classloader 分为三种： 1: pathClassloader: Android 用来加载系统文件 和 应用的主文件 2: DexClassloader: Android 用来加载 jar/apk/dex 文件 3: URLClassloader: 可以加载java的jar包,但是Dalvik 虚拟机不支持这种加载方式
public class ProxyActivity extends AppCompatActivity {   private ProxyActivityInterface pluginObj;   @Override  protected void onCreate(Bundle savedInstanceState) {  super.onCreate(savedInstanceState);  //在这里拿到了真实跳转的activity 拿出来 再去启动真实的activity   String className = getIntent().getStringExtra(&amp;#34;ClassName&amp;#34;);   //通过反射在去启动一个真实的activity 拿到Class对象  try {  Class&amp;lt;?&amp;gt; plugClass = getClassLoader().loadClass(className);  Constructor&amp;lt;?&amp;gt; pluginConstructor = plugClass.getConstructor(new Class[]{});  //因为插件的activity实现了我们的标准  pluginObj = (ProxyActivityInterface) pluginConstructor.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E7%94%9F%E6%88%90%E5%90%AB%E6%9C%89dex%E7%9A%84jar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E7%94%9F%E6%88%90%E5%90%AB%E6%9C%89dex%E7%9A%84jar/</guid>
      <description>#1. android studio 生成jar包task makeJar(type: Copy) {  delete &amp;#39;build/libs/mylibrary.jar&amp;#39; //删除已经存在的jar包  from(&amp;#39;build/intermediates/compile_library_classes_jar/ debug/&amp;#39;) //从该目录下加载要打包的文件,这里实际上是编译后的classes.jar文件的目录  into(&amp;#39;build/libs/&amp;#39;)//jar包的保存目录  include(&amp;#39;classes.jar&amp;#39;)//设置过滤，只打包classes文件  rename(&amp;#39;classes.jar&amp;#39;, &amp;#39;dynamic_temp.jar&amp;#39;)//重命名，mylibrary.jar 根据自己的需求设置 } makeJar.dependsOn(build) #1. 找到android sdk ，以下路径配置到环境变量，目的是为了使用 dx 命令D:\WorkRome\android\Sdk\build-tools\30.0.3
#2. 一键生成 jar &amp;ndash;output 最终输出jar包 temp.jar 目标jar
dx --dex --output=object.jar temp.jar  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%BA%94%E7%94%A8/</guid>
      <description>RoleManager roleManager = getSystemService(RoleManager.class); Intent intent = roleManager.createRequestRoleIntent(RoleManager.ROLE_SMS); startActivityForResult(intent,666); </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E9%85%8D%E7%BD%AE%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E9%85%8D%E7%BD%AE%E5%BC%82%E5%B8%B8/</guid>
      <description>#Running Gradle task &amp;lsquo;assembleDebug&amp;rsquo;&amp;hellip;卡在 Running Gradle task &amp;lsquo;assembleDebug&amp;rsquo;&amp;hellip; 不动
解决方案：
 检查 ./gradle 是否下载成功 检查 gradle 默认代理是否正常
gradle 配置文件默认在 ~/.gradle/gradle.properties 注释掉下面几行代码即可：  # Sun Jul 05 10:38:23 CST 2020 # systemProp.http.proxyHost=127.0.0.1 # systemProp.http.proxyPort=50030 # systemProp.https.proxyHost=127.0.0.1 # systemProp.https.proxyPort=50030 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%A7%84%E8%8C%83/</guid>
      <description> 项目打包命名方式：   apk 命名： 项目名+打包日期+版本号 version_name 命名：version_name + es es:环境变量（alpha or release） 分别对应 测试环境和生产环境，后续根据项目变化进一步扩展 alpha beta release  发布测试版本，统一通过蒲公英平台发布 正式版本每一个版本统一交由测试管理并记录  </description>
    </item>
    
  </channel>
</rss>
