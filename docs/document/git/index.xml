<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云海阁</title>
    <link>https://zouni.vip/docs/document/git/</link>
    <description>Recent content on 云海阁</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://zouni.vip/docs/document/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/1.%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/1.%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/</guid>
      <description>#1. 生成公钥ssh-keygen -t rsa -C &amp;#34;xxxxx@xxxxx.com&amp;#34; 或 ssh-keygen -t ed25519 -C &amp;#34;xxxxx@xxxxx.com&amp;#34; 两种操作一样只是生成密钥的方式不同
#2. 查看公钥cat ~/.ssh/id_rsa.pub PS C:\Users\sss&amp;gt; cat ~/.ssh/id_ed25519.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL7iL5mVSeEYnMJvNhpTxZR/rv2WApe2+IkfL4iXlfCu xxxxx@xxx.com </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/2.%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/2.%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>#将本地项目提交到远程仓库需要以下操作：#1. 本地提交git init 初始化本地仓库 git add . git commit -m &amp;#34;###&amp;#34; #2. 添加目标仓库地址git remote add origin git@xx.xx.xx.xx:repos/xxx/xxx/xxx.git #3. 同步到远程仓库，先 pull 后 push//允许一些无关联的历史	git pull origin master --allow-unrelated-histories git push origin 本地分支:远程分支 #修改远程仓库地址3种方式#1. 直接修改git remote set-url origin [url] #2. 先删除后修改 删除
 git remote rm origin #查看 remote url git remote -v
 #3. 直接修改项目目录下.git 文件夹下config配置文件[core]repositoryformatversion = 0filemode = falsebare = falselogallrefupdates = truesymlinks = falseignorecase = true[remote &amp;#34;origin&amp;#34;]url = git@gitee.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/3.branch-tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/3.branch-tag/</guid>
      <description>#branch#创建分支 git branch dev
 #切换分支 git checkout dev
 #提交分支 git push origin dev
 #合并分支先切换到要合并的分支
 git checkout master 同步代码 git pull origin master 合并代码 git merge dev 这样dev分支就合并到了master
 #删除本地分支 git branch -d branchname
 #强制删除分支 -D git branch -D branchname
 #删除远程分支 git push origin &amp;ndash;delete branchname
 #tag#附注标签 ： git tag -a versionCode -m “1.2版本”</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/4.%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/4.%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/</guid>
      <description>#撤销撤销是在本地，回滚是操作远程
 在工作区的代码  git checkout -- a.txt # 丢弃某个文件，或者  git checkout -- . # 丢弃全部 注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。
代码git add到缓存区，并未commit提交  ## 将本地commit的内容撤回，修改的文件内容不会消失 git reset HEAD~ git reset HEAD . #或者 git reset HEAD a.txt 这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化
文件执行了git add操作，但想撤销对其的修改（index内回滚）  # 取消暂存 git reset HEAD fileName # 撤销修改 git checkout fileName 修改的文件已被git commit，但想再次修改不再产生新的Commit  # 修改最后一次提交 git add sample.txt git commit --amend -m&amp;#34;说明&amp;#34; 已在本地进行了多次git commit操作，现在想撤销到其中某次Commit  git reset [--hard|soft|mixed|merge|keep] [commit|HEAD] #已add，但是没commitgit reset HEAD~ #已commit，不改变代码，仅仅只是想取消这个操作git reset --soft HEAD^ # ^ 一次提交 ^^ 两次提交 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/5.%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/5.%E5%9B%9E%E6%BB%9A/</guid>
      <description>#回滚 （回滚是远程仓库操作，撤销是本地操作）已进行git push，即已推送到远程仓库中。我们将已被提交到“远程仓库”的代码还原操作叫做回滚！
 注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！
 #1. 撤销指定文件到指定版本# 查看指定文件的历史版本 git log &amp;lt;filename&amp;gt; # 回滚到指定commitID git checkout &amp;lt;commitID&amp;gt; &amp;lt;filename&amp;gt; #2. 删除最后一次远程提交  使用revert
git revert HEAD git push origin master   使用reset
git reset --hard HEAD^ git push origin master -f   二者区别：
 revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在； reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。  #回滚某次提交# 找到要回滚的commitID git log git revert commitID #删除某次提交git log --oneline -n5 git rebase -i &amp;#34;commit id&amp;#34;^ 注意：需要注意最后的^号，意思是commit id的前一次提交</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/6.%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/6.%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</guid>
      <description>#删除文件夹git rm --cached -r dir_name #删除文件git rm --cached filename #删除后不用git add 直接提交git commit -m &amp;quot;desc&amp;quot;  #提交git push </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/gitee%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/gitee%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>#第一次使用git，没有环境？#1. 先安装git#2. 生成公钥，用来添加到远程仓库 生成公钥  # 生成公钥，然后一路回车 ssh-keygen -t rsa -C &amp;#34;cao_cgq@163.com&amp;#34; 查看公钥   #3. 复制公钥，打开码云-&amp;gt; 个人头像点设置-&amp;gt;找到安全设置-&amp;gt;SSH公钥添加完公钥之后，就可以接下来的步骤了
#怎么样将代码提交到远程仓库#1. 在码云新建仓库，beego_first#2. 本地项目路径下初始化仓库git init #3. 本地项目添加远程仓库# git remote add origin 仓库地址 git remote add origin git@gitee.com:SmallMrCao/beego_first.git #4. 添加完之后先pull，然后再addgit pull git add * 出现这个问题，说明在add之前没有pull，需要执行以下命令，把无关的内容pull下来
git pull origin master --allow-unrelated-histories #5. 最后执行提交就完成了git push </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/gitlab/</guid>
      <description>#gitlab 删除默认main 分支 将默认分支修改为master
Settings -&amp;gt; Repository -&amp;gt; Default branch Repository -&amp;gt; Branches -&amp;gt; 删除  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/submodule/</guid>
      <description>#拉取主仓库同步主项目加上 --recurse-submodules 递归拉取子项目
git clone git@github.com:smallcgq/xbook.git --recurse-submodules #添加其他仓库到当前仓库git submodule add https://github.com/alex-shpak/hugo-book themes/bookgit clone https://github.com/alex-shpak/hugo-book --recursive  添加完成项目根目录下会多出一个 .gitmodules 文件  #同步其他仓库更新//一步到位，不用挨个查找，直接遍历一遍git submodule foreach git pull #删除submodulegit submodule deinit themes/book </description>
    </item>
    
  </channel>
</rss>
