<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记</title>
    <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</link>
    <description>Recent content on 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/1.%E4%BD%BF%E7%94%A8-GET-POST-PUT-PATCH-DELETE-OPTIONS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/1.%E4%BD%BF%E7%94%A8-GET-POST-PUT-PATCH-DELETE-OPTIONS/</guid>
      <description>func main() { // Disable Console Color // gin.DisableConsoleColor() // 使用默认中间件创建一个gin路由器 // logger and recovery (crash-free) 中间件 router := gin.Default() router.GET(&amp;#34;/someGet&amp;#34;, getting) router.POST(&amp;#34;/somePost&amp;#34;, posting) router.PUT(&amp;#34;/somePut&amp;#34;, putting) router.DELETE(&amp;#34;/someDelete&amp;#34;, deleting) router.PATCH(&amp;#34;/somePatch&amp;#34;, patching) router.HEAD(&amp;#34;/someHead&amp;#34;, head) router.OPTIONS(&amp;#34;/someOptions&amp;#34;, options) // 默认启动的是 8080端口，也可以自己定义启动端口 router.Run() // router.Run(&amp;#34;:3000&amp;#34;) for a hard coded port } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/10.%E5%86%99%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/10.%E5%86%99%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</guid>
      <description>func main() { // 禁用控制台颜色 gin.DisableConsoleColor() // 创建记录日志的文件 f, _ := os.Create(&amp;#34;gin.log&amp;#34;) gin.DefaultWriter = io.MultiWriter(f) // 如果需要将日志同时写入文件和控制台，请使用以下代码 // gin.DefaultWriter = io.MultiWriter(f, os.Stdout) router := gin.Default() router.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.String(200, &amp;#34;pong&amp;#34;) }) router.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/11.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/11.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F/</guid>
      <description>func main() { router := gin.New() // LoggerWithFormatter 中间件会将日志写入 gin.DefaultWriter // By default gin.DefaultWriter = os.Stdout router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string { // 你的自定义格式 return fmt.Sprintf(&amp;#34;%s - [%s] \&amp;#34;%s %s %s %d %s \&amp;#34;%s\&amp;#34; %s\&amp;#34;\n&amp;#34;, param.ClientIP, param.TimeStamp.Format(time.RFC1123), param.Method, param.Path, param.Request.Proto, param.StatusCode, param.Latency, param.Request.UserAgent(), param.ErrorMessage, ) })) router.Use(gin.Recovery()) router.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.String(200, &amp;#34;pong&amp;#34;) }) router.Run(&amp;#34;:8080&amp;#34;) } 输出示例：&#xA;::1 - [Fri, 07 Dec 2018 17:04:38 JST] &amp;#34;GET /ping HTTP/1.1 200 122.767µs &amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/12.%E6%A8%A1%E5%9E%8B%E7%BB%91%E5%AE%9A%E5%92%8C%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/12.%E6%A8%A1%E5%9E%8B%E7%BB%91%E5%AE%9A%E5%92%8C%E9%AA%8C%E8%AF%81/</guid>
      <description>若要将请求主体绑定到结构体中，请使用模型绑定，目前支持JSON、XML、YAML和标准表单值(foo=bar&amp;amp;boo=baz)的绑定。&#xA;Gin使用 go-playground/validator.v8 验证参数，查看完整文档。&#xA;需要在绑定的字段上设置tag，比如，绑定格式为json，需要这样设置 json:&amp;ldquo;fieldname&amp;rdquo; 。&#xA;此外，Gin还提供了两套绑定方法：&#xA;Must bind Methods - Bind, BindJSON, BindXML, BindQuery, BindYAML Behavior - 这些方法底层使用 MustBindWith，如果存在绑定错误，请求将被以下指令中止 c.AbortWithError(400, err).SetType(ErrorTypeBind)，响应状态代码会被设置为400，请求头Content-Type被设置为text/plain; charset=utf-8。注意，如果你试图在此之后设置响应代码，将会发出一个警告 [GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422，如果你希望更好地控制行为，请使用ShouldBind相关的方法 Should bind Methods - ShouldBind, ShouldBindJSON, ShouldBindXML, ShouldBindQuery, ShouldBindYAML Behavior - 这些方法底层使用 ShouldBindWith，如果存在绑定错误，则返回错误，开发人员可以正确处理请求和错误。 当我们使用绑定方法时，Gin会根据Content-Type推断出使用哪种绑定器，如果你确定你绑定的是什么，你可以使用MustBindWith或者BindingWith。&#xA;你还可以给字段指定特定规则的修饰符，如果一个字段用binding:&amp;quot;required&amp;quot;修饰，并且在绑定时该字段的值为空，那么将返回一个错误。&#xA;// 绑定为json type Login struct { User string `form:&amp;#34;user&amp;#34; json:&amp;#34;user&amp;#34; xml:&amp;#34;user&amp;#34; binding:&amp;#34;required&amp;#34;` Password string `form:&amp;#34;password&amp;#34; json:&amp;#34;password&amp;#34; xml:&amp;#34;password&amp;#34; binding:&amp;#34;required&amp;#34;` } func main() { router := gin.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/13.%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/13.%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E5%99%A8/</guid>
      <description>Gin允许我们自定义参数验证器，参考1，参考2，参考3&#xA;package main import ( &amp;#34;net/http&amp;#34; &amp;#34;reflect&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;github.com/gin-gonic/gin/binding&amp;#34; &amp;#34;gopkg.in/go-playground/validator.v8&amp;#34; ) // Booking contains binded and validated data. type Booking struct { CheckIn time.Time `form:&amp;#34;check_in&amp;#34; binding:&amp;#34;required,bookabledate&amp;#34; time_format:&amp;#34;2006-01-02&amp;#34;` CheckOut time.Time `form:&amp;#34;check_out&amp;#34; binding:&amp;#34;required,gtfield=CheckIn&amp;#34; time_format:&amp;#34;2006-01-02&amp;#34;` } func bookableDate( v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value, field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string, ) bool { if date, ok := field.Interface().(time.Time); ok { today := time.Now() if today.Year() &amp;gt; date.Year() || today.YearDay() &amp;gt; date.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/14.%E5%8F%AA%E7%BB%91%E5%AE%9AGet%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/14.%E5%8F%AA%E7%BB%91%E5%AE%9AGet%E5%8F%82%E6%95%B0/</guid>
      <description>ShouldBindQuery 函数只绑定Get参数，不绑定post数据，查看详细信息&#xA;package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) type Person struct { Name string `form:&amp;#34;name&amp;#34;` Address string `form:&amp;#34;address&amp;#34;` } func main() { route := gin.Default() route.Any(&amp;#34;/testing&amp;#34;, startPage) route.Run(&amp;#34;:8085&amp;#34;) } func startPage(c *gin.Context) { var person Person if c.ShouldBindQuery(&amp;amp;person) == nil { log.Println(&amp;#34;====== Only Bind By Query String ======&amp;#34;) log.Println(person.Name) log.Println(person.Address) } c.String(200, &amp;#34;Success&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/15.%E7%BB%91%E5%AE%9AGet%E5%8F%82%E6%95%B0%E6%88%96%E8%80%85Post%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/15.%E7%BB%91%E5%AE%9AGet%E5%8F%82%E6%95%B0%E6%88%96%E8%80%85Post%E5%8F%82%E6%95%B0/</guid>
      <description>查看详细信息，这个例子很有用，可以自己实践一下&#xA;package main import ( &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) type Person struct { Name string `form:&amp;#34;name&amp;#34;` Address string `form:&amp;#34;address&amp;#34;` Birthday time.Time `form:&amp;#34;birthday&amp;#34; time_format:&amp;#34;2006-01-02&amp;#34; time_utc:&amp;#34;1&amp;#34;` } func main() { route := gin.Default() route.GET(&amp;#34;/testing&amp;#34;, startPage) route.Run(&amp;#34;:8085&amp;#34;) } func startPage(c *gin.Context) { var person Person // If `GET`, only `Form` binding engine (`query`) used. // 如果是Get，那么接收不到请求中的Post的数据？？ // 如果是Post, 首先判断 `content-type` 的类型 `JSON` or `XML`, 然后使用对应的绑定器获取数据. // See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48 if c.ShouldBind(&amp;amp;person) == nil { log.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/16.%E7%BB%91%E5%AE%9Auri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/16.%E7%BB%91%E5%AE%9Auri/</guid>
      <description>package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; type Person struct { ID string `uri:&amp;#34;id&amp;#34; binding:&amp;#34;required,uuid&amp;#34;` Name string `uri:&amp;#34;name&amp;#34; binding:&amp;#34;required&amp;#34;` } func main() { route := gin.Default() route.GET(&amp;#34;/:name/:id&amp;#34;, func(c *gin.Context) { var person Person if err := c.ShouldBindUri(&amp;amp;person); err != nil { c.JSON(400, gin.H{&amp;#34;msg&amp;#34;: err}) return } c.JSON(200, gin.H{&amp;#34;name&amp;#34;: person.Name, &amp;#34;uuid&amp;#34;: person.ID}) }) route.Run(&amp;#34;:8088&amp;#34;) } 测试用例：&#xA;$ curl -v localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3 $ curl -v localhost:8088/thinkerou/not-uuid </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/17.%E7%BB%91%E5%AE%9AHTML%E5%A4%8D%E9%80%89%E6%A1%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/17.%E7%BB%91%E5%AE%9AHTML%E5%A4%8D%E9%80%89%E6%A1%86/</guid>
      <description>查看详细信息&#xA;main.go&#xA;... type myForm struct { Colors []string `form:&amp;#34;colors[]&amp;#34;` } ... func formHandler(c *gin.Context) { var fakeForm myForm c.ShouldBind(&amp;amp;fakeForm) c.JSON(200, gin.H{&amp;#34;color&amp;#34;: fakeForm.Colors}) } ... form.html&#xA;&amp;lt;form action=&amp;#34;/&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; &amp;lt;p&amp;gt;Check some colors&amp;lt;/p&amp;gt; &amp;lt;label for=&amp;#34;red&amp;#34;&amp;gt;Red&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;colors[]&amp;#34; value=&amp;#34;red&amp;#34; id=&amp;#34;red&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;green&amp;#34;&amp;gt;Green&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;colors[]&amp;#34; value=&amp;#34;green&amp;#34; id=&amp;#34;green&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;blue&amp;#34;&amp;gt;Blue&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;colors[]&amp;#34; value=&amp;#34;blue&amp;#34; id=&amp;#34;blue&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; result:&#xA;{&amp;#34;color&amp;#34;:[&amp;#34;red&amp;#34;,&amp;#34;green&amp;#34;,&amp;#34;blue&amp;#34;]} </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/18.%E7%BB%91%E5%AE%9APost%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/18.%E7%BB%91%E5%AE%9APost%E5%8F%82%E6%95%B0/</guid>
      <description>package main import ( &amp;#34;github.com/gin-gonic/gin&amp;#34; ) type LoginForm struct { User string `form:&amp;#34;user&amp;#34; binding:&amp;#34;required&amp;#34;` Password string `form:&amp;#34;password&amp;#34; binding:&amp;#34;required&amp;#34;` } func main() { router := gin.Default() router.POST(&amp;#34;/login&amp;#34;, func(c *gin.Context) { // you can bind multipart form with explicit binding declaration: // c.ShouldBindWith(&amp;amp;form, binding.Form) // or you can simply use autobinding with ShouldBind method: var form LoginForm // in this case proper binding will be automatically selected if c.ShouldBind(&amp;amp;form) == nil { if form.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/19.XMLJSONYAML%E5%92%8CProtoBuf-%E6%B8%B2%E6%9F%93%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/19.XMLJSONYAML%E5%92%8CProtoBuf-%E6%B8%B2%E6%9F%93%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/</guid>
      <description>即接口返回的数据格式&#xA;func main() { r := gin.Default() // gin.H is a shortcut for map[string]interface{} r.GET(&amp;#34;/someJSON&amp;#34;, func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{&amp;#34;message&amp;#34;: &amp;#34;hey&amp;#34;, &amp;#34;status&amp;#34;: http.StatusOK}) }) r.GET(&amp;#34;/moreJSON&amp;#34;, func(c *gin.Context) { // You also can use a struct var msg struct { Name string `json:&amp;#34;user&amp;#34;` Message string Number int } msg.Name = &amp;#34;Lena&amp;#34; msg.Message = &amp;#34;hey&amp;#34; msg.Number = 123 // Note that msg.Name becomes &amp;#34;user&amp;#34; in the JSON // Will output : {&amp;#34;user&amp;#34;: &amp;#34;Lena&amp;#34;, &amp;#34;Message&amp;#34;: &amp;#34;hey&amp;#34;, &amp;#34;Number&amp;#34;: 123} c.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/2.%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/2.%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</guid>
      <description>func main() { router := gin.Default() // 此规则能够匹配/user/john这种格式，但不能匹配/user/ 或 /user这种格式 router.GET(&amp;#34;/user/:name&amp;#34;, func(c *gin.Context) { name := c.Param(&amp;#34;name&amp;#34;) c.String(http.StatusOK, &amp;#34;Hello %s&amp;#34;, name) }) // 但是，这个规则既能匹配/user/john/格式也能匹配/user/john/send这种格式 // 如果没有其他路由器匹配/user/john，它将重定向到/user/john/ router.GET(&amp;#34;/user/:name/*action&amp;#34;, func(c *gin.Context) { name := c.Param(&amp;#34;name&amp;#34;) action := c.Param(&amp;#34;action&amp;#34;) message := name + &amp;#34; is &amp;#34; + action c.String(http.StatusOK, message) }) router.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/20.%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/20.%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</guid>
      <description>访问静态文件需要先设置路径&#xA;func main() { router := gin.Default() router.Static(&amp;#34;/assets&amp;#34;, &amp;#34;./assets&amp;#34;) router.StaticFS(&amp;#34;/more_static&amp;#34;, http.Dir(&amp;#34;my_file_system&amp;#34;)) router.StaticFile(&amp;#34;/favicon.ico&amp;#34;, &amp;#34;./resources/favicon.ico&amp;#34;) // Listen and serve on 0.0.0.0:8080 router.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/21.%E8%BF%94%E5%9B%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/21.%E8%BF%94%E5%9B%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>func main() { router := gin.Default() router.GET(&amp;#34;/someDataFromReader&amp;#34;, func(c *gin.Context) { response, err := http.Get(&amp;#34;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&amp;#34;) if err != nil || response.StatusCode != http.StatusOK { c.Status(http.StatusServiceUnavailable) return } reader := response.Body contentLength := response.ContentLength contentType := response.Header.Get(&amp;#34;Content-Type&amp;#34;) extraHeaders := map[string]string{ &amp;#34;Content-Disposition&amp;#34;: `attachment; filename=&amp;#34;gopher.png&amp;#34;`, } c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders) }) router.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/22.HTML%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/22.HTML%E6%B8%B2%E6%9F%93/</guid>
      <description>使用LoadHTMLGlob() 或者 LoadHTMLFiles()&#xA;func main() { router := gin.Default() router.LoadHTMLGlob(&amp;#34;templates/*&amp;#34;) //router.LoadHTMLFiles(&amp;#34;templates/template1.html&amp;#34;, &amp;#34;templates/template2.html&amp;#34;) router.GET(&amp;#34;/index&amp;#34;, func(c *gin.Context) { c.HTML(http.StatusOK, &amp;#34;index.tmpl&amp;#34;, gin.H{ &amp;#34;title&amp;#34;: &amp;#34;Main website&amp;#34;, }) }) router.Run(&amp;#34;:8080&amp;#34;) } templates/index.tmpl&#xA;&amp;lt;html&amp;gt; &amp;lt;h1&amp;gt; {{ .title }} &amp;lt;/h1&amp;gt; &amp;lt;/html&amp;gt; 在不同目录中使用具有相同名称的模板&#xA;func main() { router := gin.Default() router.LoadHTMLGlob(&amp;#34;templates/**/*&amp;#34;) router.GET(&amp;#34;/posts/index&amp;#34;, func(c *gin.Context) { c.HTML(http.StatusOK, &amp;#34;posts/index.tmpl&amp;#34;, gin.H{ &amp;#34;title&amp;#34;: &amp;#34;Posts&amp;#34;, }) }) router.GET(&amp;#34;/users/index&amp;#34;, func(c *gin.Context) { c.HTML(http.StatusOK, &amp;#34;users/index.tmpl&amp;#34;, gin.H{ &amp;#34;title&amp;#34;: &amp;#34;Users&amp;#34;, }) }) router.Run(&amp;#34;:8080&amp;#34;) } templates/posts/index.tmpl&#xA;{{ define &amp;#34;posts/index.tmpl&amp;#34; }} &amp;lt;html&amp;gt;&amp;lt;h1&amp;gt; {{ .</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/23.%E5%A4%9A%E4%B8%AA%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/23.%E5%A4%9A%E4%B8%AA%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6/</guid>
      <description>Gin默认情况下只允许使用一个html模板文件（即一次可以加载多个模板文件），点击这里查看实现案例</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/24.%E9%87%8D%E5%AE%9A%E5%90%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/24.%E9%87%8D%E5%AE%9A%E5%90%91/</guid>
      <description>发布HTTP重定向很容易，支持内部和外部链接&#xA;r.GET(&amp;#34;/test&amp;#34;, func(c *gin.Context) { c.Redirect(http.StatusMovedPermanently, &amp;#34;http://www.google.com/&amp;#34;) }) Gin路由重定向，使用如下的HandleContext&#xA;r.GET(&amp;#34;/test&amp;#34;, func(c *gin.Context) { c.Request.URL.Path = &amp;#34;/test2&amp;#34; r.HandleContext(c) }) r.GET(&amp;#34;/test2&amp;#34;, func(c *gin.Context) { c.JSON(200, gin.H{&amp;#34;hello&amp;#34;: &amp;#34;world&amp;#34;}) }) </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/25.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/25.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>func Logger() gin.HandlerFunc { return func(c *gin.Context) { t := time.Now() // Set example variable c.Set(&amp;#34;example&amp;#34;, &amp;#34;12345&amp;#34;) // before request c.Next() // after request latency := time.Since(t) log.Print(latency) // access the status we are sending status := c.Writer.Status() log.Println(status) } } func main() { r := gin.New() r.Use(Logger()) r.GET(&amp;#34;/test&amp;#34;, func(c *gin.Context) { example := c.MustGet(&amp;#34;example&amp;#34;).(string) // it would print: &amp;#34;12345&amp;#34; log.Println(example) }) // Listen and serve on 0.0.0.0:8080 r.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/26.%E4%BD%BF%E7%94%A8BasicAuth%E9%AA%8C%E8%AF%81%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/26.%E4%BD%BF%E7%94%A8BasicAuth%E9%AA%8C%E8%AF%81%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>// simulate some private data var secrets = gin.H{ &amp;#34;foo&amp;#34;: gin.H{&amp;#34;email&amp;#34;: &amp;#34;foo@bar.com&amp;#34;, &amp;#34;phone&amp;#34;: &amp;#34;123433&amp;#34;}, &amp;#34;austin&amp;#34;: gin.H{&amp;#34;email&amp;#34;: &amp;#34;austin@example.com&amp;#34;, &amp;#34;phone&amp;#34;: &amp;#34;666&amp;#34;}, &amp;#34;lena&amp;#34;: gin.H{&amp;#34;email&amp;#34;: &amp;#34;lena@guapa.com&amp;#34;, &amp;#34;phone&amp;#34;: &amp;#34;523443&amp;#34;}, } func main() { r := gin.Default() // Group using gin.BasicAuth() middleware // gin.Accounts is a shortcut for map[string]string authorized := r.Group(&amp;#34;/admin&amp;#34;, gin.BasicAuth(gin.Accounts{ &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;austin&amp;#34;: &amp;#34;1234&amp;#34;, &amp;#34;lena&amp;#34;: &amp;#34;hello2&amp;#34;, &amp;#34;manu&amp;#34;: &amp;#34;4321&amp;#34;, })) // /admin/secrets endpoint // hit &amp;#34;localhost:8080/admin/secrets authorized.GET(&amp;#34;/secrets&amp;#34;, func(c *gin.Context) { // get user, it was set by the BasicAuth middleware user := c.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/27.%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8Goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/27.%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8Goroutines/</guid>
      <description>在中间件或处理程序中启动新的Goroutines时，你不应该使用其中的原始上下文，你必须使用只读副本（c.Copy()）&#xA;func main() { r := gin.Default() r.GET(&amp;#34;/long_async&amp;#34;, func(c *gin.Context) { // 创建要在goroutine中使用的副本 cCp := c.Copy() go func() { // simulate a long task with time.Sleep(). 5 seconds time.Sleep(5 * time.Second) // 这里使用你创建的副本 log.Println(&amp;#34;Done! in path &amp;#34; + cCp.Request.URL.Path) }() }) r.GET(&amp;#34;/long_sync&amp;#34;, func(c *gin.Context) { // simulate a long task with time.Sleep(). 5 seconds time.Sleep(5 * time.Second) // 这里没有使用goroutine，所以不用使用副本 log.Println(&amp;#34;Done! in path &amp;#34; + c.Request.URL.Path) }) // Listen and serve on 0.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/28.%E8%87%AA%E5%AE%9A%E4%B9%89HTTP%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/28.%E8%87%AA%E5%AE%9A%E4%B9%89HTTP%E9%85%8D%E7%BD%AE/</guid>
      <description>直接像这样使用http.ListenAndServe()&#xA;func main() { router := gin.Default() http.ListenAndServe(&amp;#34;:8080&amp;#34;, router) } 或者&#xA;func main() { router := gin.Default() s := &amp;amp;http.Server{ Addr: &amp;#34;:8080&amp;#34;, Handler: router, ReadTimeout: 10 * time.Second, WriteTimeout: 10 * time.Second, MaxHeaderBytes: 1 &amp;lt;&amp;lt; 20, } s.ListenAndServe() } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/29.%E6%94%AF%E6%8C%81Lets-Encrypt%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/29.%E6%94%AF%E6%8C%81Lets-Encrypt%E8%AF%81%E4%B9%A6/</guid>
      <description>1行代码实现LetsEncrypt HTTPS服务器&#xA;package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/gin-gonic/autotls&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { r := gin.Default() // Ping handler r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.String(200, &amp;#34;pong&amp;#34;) }) log.Fatal(autotls.Run(r, &amp;#34;example1.com&amp;#34;, &amp;#34;example2.com&amp;#34;)) } 自定义autocert管理器的示例&#xA;package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/gin-gonic/autotls&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;golang.org/x/crypto/acme/autocert&amp;#34; ) func main() { r := gin.Default() // Ping handler r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.String(200, &amp;#34;pong&amp;#34;) }) m := autocert.Manager{ Prompt: autocert.AcceptTOS, HostPolicy: autocert.HostWhitelist(&amp;#34;example1.com&amp;#34;, &amp;#34;example2.com&amp;#34;), Cache: autocert.DirCache(&amp;#34;/var/www/.cache&amp;#34;), } log.Fatal(autotls.RunWithManager(r, &amp;amp;m)) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/3.%E8%8E%B7%E5%8F%96Get%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/3.%E8%8E%B7%E5%8F%96Get%E5%8F%82%E6%95%B0/</guid>
      <description>func main() { router := gin.Default() // 匹配的url格式: /welcome?firstname=Jane&amp;amp;lastname=Doe router.GET(&amp;#34;/welcome&amp;#34;, func(c *gin.Context) { firstname := c.DefaultQuery(&amp;#34;firstname&amp;#34;, &amp;#34;Guest&amp;#34;) lastname := c.Query(&amp;#34;lastname&amp;#34;) // 是 c.Request.URL.Query().Get(&amp;#34;lastname&amp;#34;) 的简写 c.String(http.StatusOK, &amp;#34;Hello %s %s&amp;#34;, firstname, lastname) }) router.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/30.Gin%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/30.Gin%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1/</guid>
      <description>请参阅问题并尝试以下示例&#xA;package main import ( &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;golang.org/x/sync/errgroup&amp;#34; ) var ( g errgroup.Group ) func router01() http.Handler { e := gin.New() e.Use(gin.Recovery()) e.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { c.JSON( http.StatusOK, gin.H{ &amp;#34;code&amp;#34;: http.StatusOK, &amp;#34;error&amp;#34;: &amp;#34;Welcome server 01&amp;#34;, }, ) }) return e } func router02() http.Handler { e := gin.New() e.Use(gin.Recovery()) e.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { c.JSON( http.StatusOK, gin.H{ &amp;#34;code&amp;#34;: http.StatusOK, &amp;#34;error&amp;#34;: &amp;#34;Welcome server 02&amp;#34;, }, ) }) return e } func main() { server01 := &amp;amp;http.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/31.%E4%BC%98%E9%9B%85%E9%87%8D%E5%90%AF%E6%88%96%E5%81%9C%E6%AD%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/31.%E4%BC%98%E9%9B%85%E9%87%8D%E5%90%AF%E6%88%96%E5%81%9C%E6%AD%A2/</guid>
      <description>想要优雅地重启或停止你的Web服务器，使用下面的方法&#xA;我们可以使用fvbock/endless来替换默认的ListenAndServe，有关详细信息，请参阅问题＃296&#xA;router := gin.Default() router.GET(&amp;#34;/&amp;#34;, handler) // [...] endless.ListenAndServe(&amp;#34;:4242&amp;#34;, router) 一个替换方案&#xA;manners：一个Go HTTP服务器，能优雅的关闭 graceful：Graceful是一个go的包，支持优雅地关闭http.Handler服务器 grace：对Go服务器进行优雅的重启和零停机部署 如果你的Go版本是1.8，你可能不需要使用这个库，考虑使用http.Server内置的&#xD;Shutdown()方法进行优雅关闭，查看&#xD;例子&#xA;// +build go1.8 package main import ( &amp;#34;context&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { router := gin.Default() router.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { time.Sleep(5 * time.Second) c.String(http.StatusOK, &amp;#34;Welcome Gin Server&amp;#34;) }) srv := &amp;amp;http.Server{ Addr: &amp;#34;:8080&amp;#34;, Handler: router, } go func() { // service connections if err := srv.ListenAndServe(); err !</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/32.%E6%9E%84%E5%BB%BA%E5%8C%85%E5%90%AB%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/32.%E6%9E%84%E5%BB%BA%E5%8C%85%E5%90%AB%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</guid>
      <description>你可以使用&#xD;go-assets将服务器构建成一个包含模板的二进制文件&#xA;func main() { r := gin.New() t, err := loadTemplate() if err != nil { panic(err) } r.SetHTMLTemplate(t) r.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { c.HTML(http.StatusOK, &amp;#34;/html/index.tmpl&amp;#34;,nil) }) r.Run(&amp;#34;:8080&amp;#34;) } // loadTemplate loads templates embedded by go-assets-builder func loadTemplate() (*template.Template, error) { t := template.New(&amp;#34;&amp;#34;) for name, file := range Assets.Files { if file.IsDir() || !strings.HasSuffix(name, &amp;#34;.tmpl&amp;#34;) { continue } h, err := ioutil.ReadAll(file) if err != nil { return nil, err } t, err = t.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/33.%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E7%BB%91%E5%AE%9A%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/33.%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E7%BB%91%E5%AE%9A%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</guid>
      <description>以下示例使用自定义结构&#xA;type StructA struct { FieldA string `form:&amp;#34;field_a&amp;#34;` } type StructB struct { NestedStruct StructA FieldB string `form:&amp;#34;field_b&amp;#34;` } type StructC struct { NestedStructPointer *StructA FieldC string `form:&amp;#34;field_c&amp;#34;` } type StructD struct { NestedAnonyStruct struct { FieldX string `form:&amp;#34;field_x&amp;#34;` } FieldD string `form:&amp;#34;field_d&amp;#34;` } func GetDataB(c *gin.Context) { var b StructB c.Bind(&amp;amp;b) c.JSON(200, gin.H{ &amp;#34;a&amp;#34;: b.NestedStruct, &amp;#34;b&amp;#34;: b.FieldB, }) } func GetDataC(c *gin.Context) { var b StructC c.Bind(&amp;amp;b) c.JSON(200, gin.H{ &amp;#34;a&amp;#34;: b.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/34.%E5%B0%86%E8%AF%B7%E6%B1%82%E4%BD%93%E7%BB%91%E5%AE%9A%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/34.%E5%B0%86%E8%AF%B7%E6%B1%82%E4%BD%93%E7%BB%91%E5%AE%9A%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD/</guid>
      <description>绑定请求体的常规方法使用c.Request.Body，并且不能多次调用&#xA;type formA struct { Foo string `json:&amp;#34;foo&amp;#34; xml:&amp;#34;foo&amp;#34; binding:&amp;#34;required&amp;#34;` } type formB struct { Bar string `json:&amp;#34;bar&amp;#34; xml:&amp;#34;bar&amp;#34; binding:&amp;#34;required&amp;#34;` } func SomeHandler(c *gin.Context) { objA := formA{} objB := formB{} // This c.ShouldBind consumes c.Request.Body and it cannot be reused. if errA := c.ShouldBind(&amp;amp;objA); errA == nil { c.String(http.StatusOK, `the body should be formA`) // Always an error is occurred by this because c.Request.Body is EOF now. } else if errB := c.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/35.HTTP-2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/35.HTTP-2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81/</guid>
      <description>http.Pusher只支持Go 1.8或更高版本，有关详细信息，请参阅&#xD;golang博客&#xA;package main import ( &amp;#34;html/template&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) var html = template.Must(template.New(&amp;#34;https&amp;#34;).Parse(` &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Https Test&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#34;/assets/app.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1 style=&amp;#34;color:red;&amp;#34;&amp;gt;Welcome, Ginner!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; `)) func main() { r := gin.Default() r.Static(&amp;#34;/assets&amp;#34;, &amp;#34;./assets&amp;#34;) r.SetHTMLTemplate(html) r.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { if pusher := c.Writer.Pusher(); pusher != nil { // use pusher.Push() to do server push if err := pusher.Push(&amp;#34;/assets/app.js&amp;#34;, nil); err != nil { log.Printf(&amp;#34;Failed to push: %v&amp;#34;, err) } } c.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/36.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E6%97%A5%E5%BF%97%E7%9A%84%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/36.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E6%97%A5%E5%BF%97%E7%9A%84%E6%A0%BC%E5%BC%8F/</guid>
      <description>默认的路由日志是这样的：&#xA;[GIN-debug] POST /foo --&amp;gt; main.main.func1 (3 handlers) [GIN-debug] GET /bar --&amp;gt; main.main.func2 (3 handlers) [GIN-debug] GET /status --&amp;gt; main.main.func3 (3 handlers) 如果你想以给定的格式记录这些信息（例如 JSON，键值对或其他格式），你可以使用gin.DebugPrintRouteFunc来定义格式，在下面的示例中，我们使用标准日志包记录路由日志，你可以使用其他适合你需求的日志工具&#xA;import ( &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { r := gin.Default() gin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) { log.Printf(&amp;#34;endpoint %v %v %v %v\n&amp;#34;, httpMethod, absolutePath, handlerName, nuHandlers) } r.POST(&amp;#34;/foo&amp;#34;, func(c *gin.Context) { c.JSON(http.StatusOK, &amp;#34;foo&amp;#34;) }) r.GET(&amp;#34;/bar&amp;#34;, func(c *gin.Context) { c.JSON(http.StatusOK, &amp;#34;bar&amp;#34;) }) r.GET(&amp;#34;/status&amp;#34;, func(c *gin.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/37.%E8%AE%BE%E7%BD%AE%E5%B9%B6%E8%8E%B7%E5%8F%96cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/37.%E8%AE%BE%E7%BD%AE%E5%B9%B6%E8%8E%B7%E5%8F%96cookie/</guid>
      <description>import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { router := gin.Default() router.GET(&amp;#34;/cookie&amp;#34;, func(c *gin.Context) { cookie, err := c.Cookie(&amp;#34;gin_cookie&amp;#34;) if err != nil { cookie = &amp;#34;NotSet&amp;#34; c.SetCookie(&amp;#34;gin_cookie&amp;#34;, &amp;#34;test&amp;#34;, 3600, &amp;#34;/&amp;#34;, &amp;#34;localhost&amp;#34;, false, true) } fmt.Printf(&amp;#34;Cookie value: %s \n&amp;#34;, cookie) }) router.Run() } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/38.%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/38.%E6%B5%8B%E8%AF%95/</guid>
      <description>net/http/httptest包是http测试的首选方式&#xA;package main func setupRouter() *gin.Engine { r := gin.Default() r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.String(200, &amp;#34;pong&amp;#34;) }) return r } func main() { r := setupRouter() r.Run(&amp;#34;:8080&amp;#34;) } 测试上面的示例代码&#xA;package main import ( &amp;#34;net/http&amp;#34; &amp;#34;net/http/httptest&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;github.com/stretchr/testify/assert&amp;#34; ) func TestPingRoute(t *testing.T) { router := setupRouter() w := httptest.NewRecorder() req, _ := http.NewRequest(&amp;#34;GET&amp;#34;, &amp;#34;/ping&amp;#34;, nil) router.ServeHTTP(w, req) assert.Equal(t, 200, w.Code) assert.Equal(t, &amp;#34;pong&amp;#34;, w.Body.String()) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/4.%E8%8E%B7%E5%8F%96Post%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/4.%E8%8E%B7%E5%8F%96Post%E5%8F%82%E6%95%B0/</guid>
      <description>func main() { router := gin.Default() router.POST(&amp;#34;/form_post&amp;#34;, func(c *gin.Context) { message := c.PostForm(&amp;#34;message&amp;#34;) nick := c.DefaultPostForm(&amp;#34;nick&amp;#34;, &amp;#34;anonymous&amp;#34;) // 此方法可以设置默认值 c.JSON(200, gin.H{ &amp;#34;status&amp;#34;: &amp;#34;posted&amp;#34;, &amp;#34;message&amp;#34;: message, &amp;#34;nick&amp;#34;: nick, }) }) router.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/5.Get-&#43;-Post-%E6%B7%B7%E5%90%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/5.Get-&#43;-Post-%E6%B7%B7%E5%90%88/</guid>
      <description>示例： POST /post?id=1234&amp;amp;page=1 HTTP/1.1 Content-Type: application/x-www-form-urlencoded name=manu&amp;amp;message=this_is_great&#xA;func main() { router := gin.Default() router.POST(&amp;#34;/post&amp;#34;, func(c *gin.Context) { id := c.Query(&amp;#34;id&amp;#34;) page := c.DefaultQuery(&amp;#34;page&amp;#34;, &amp;#34;0&amp;#34;) name := c.PostForm(&amp;#34;name&amp;#34;) message := c.PostForm(&amp;#34;message&amp;#34;) fmt.Printf(&amp;#34;id: %s; page: %s; name: %s; message: %s&amp;#34;, id, page, name, message) }) router.Run(&amp;#34;:8080&amp;#34;) } 结果：id: 1234; page: 1; name: manu; message: this_is_great </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/6.%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/6.%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</guid>
      <description>单文件上传&#xD;#&#xD;参考问题 #774，细节 example code&#xA;慎用 file.Filename ，参考 Content-Disposition on MDN 和 #1693&#xA;上传文件的文件名可以由用户自定义，所以可能包含非法字符串，为了安全起见，应该由服务端统一文件名规则&#xA;func main() { router := gin.Default() // 给表单限制上传大小 (默认 32 MiB) // router.MaxMultipartMemory = 8 &amp;lt;&amp;lt; 20 // 8 MiB router.POST(&amp;#34;/upload&amp;#34;, func(c *gin.Context) { // 单文件 file, _ := c.FormFile(&amp;#34;file&amp;#34;) log.Println(file.Filename) // 上传文件到指定的路径 // c.SaveUploadedFile(file, dst) c.String(http.StatusOK, fmt.Sprintf(&amp;#34;&amp;#39;%s&amp;#39; uploaded!&amp;#34;, file.Filename)) }) router.Run(&amp;#34;:8080&amp;#34;) } curl 测试：&#xA;curl -X POST http://localhost:8080/upload \ -F &amp;#34;file=@/Users/appleboy/test.zip&amp;#34; \ -H &amp;#34;Content-Type: multipart/form-data&amp;#34; 多文件上传&#xD;#&#xD;详细示例：example code</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/7.%E8%B7%AF%E7%94%B1%E5%88%86%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/7.%E8%B7%AF%E7%94%B1%E5%88%86%E7%BB%84/</guid>
      <description>func main() { router := gin.Default() // Simple group: v1 v1 := router.Group(&amp;#34;/v1&amp;#34;) { v1.POST(&amp;#34;/login&amp;#34;, loginEndpoint) v1.POST(&amp;#34;/submit&amp;#34;, submitEndpoint) v1.POST(&amp;#34;/read&amp;#34;, readEndpoint) } // Simple group: v2 v2 := router.Group(&amp;#34;/v2&amp;#34;) { v2.POST(&amp;#34;/login&amp;#34;, loginEndpoint) v2.POST(&amp;#34;/submit&amp;#34;, submitEndpoint) v2.POST(&amp;#34;/read&amp;#34;, readEndpoint) } router.Run(&amp;#34;:8080&amp;#34;) } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/8.%E6%97%A0%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/8.%E6%97%A0%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%90%AF%E5%8A%A8/</guid>
      <description>使用&#xA;r := gin.New() 代替&#xA;// 默认启动方式，包含 Logger、Recovery 中间件 r := gin.Default() </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/9.%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/3.gin/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/9.%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>func main() { // 创建一个不包含中间件的路由器 r := gin.New() // 全局中间件 // 使用 Logger 中间件 r.Use(gin.Logger()) // 使用 Recovery 中间件 r.Use(gin.Recovery()) // 路由添加中间件，可以添加任意多个 r.GET(&amp;#34;/benchmark&amp;#34;, MyBenchLogger(), benchEndpoint) // 路由组中添加中间件 // authorized := r.Group(&amp;#34;/&amp;#34;, AuthRequired()) // exactly the same as: authorized := r.Group(&amp;#34;/&amp;#34;) // per group middleware! in this case we use the custom created // AuthRequired() middleware just in the &amp;#34;authorized&amp;#34; group. authorized.Use(AuthRequired()) { authorized.POST(&amp;#34;/login&amp;#34;, loginEndpoint) authorized.POST(&amp;#34;/submit&amp;#34;, submitEndpoint) authorized.POST(&amp;#34;/read&amp;#34;, readEndpoint) // nested group testing := authorized.</description>
    </item>
  </channel>
</rss>
