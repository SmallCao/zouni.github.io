<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记</title>
    <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content on 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&#xD;安装环境，配置环境变量&#xD;#&#xD;GOROOT:go安装路径 GOPATH: 项目目录 PATH ：%GOROOT%\bin;%GOPATH%\bin GOland 配置环境&#xD;#&#xD;https://github.com/goproxyio/goproxy go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.io,direct&#xA;# 设置不走 proxy 的私有仓库，多个用逗号相隔（可选）&#xD;go env -w GOPRIVATE=*.corp.example.com&#xD;# 设置不走 proxy 的私有组织（可选）&#xD;go env -w GOPRIVATE=example.com/org_name&#xD;go moudle 初始化&#xD;#&#xD;go mod project_name&#xD;go build&#xD;go mod 引用本地项目&#xD;#&#xD;go mod edit -replace 项目名称=项目路径 go mod edit -replace testttt=/home/small/gopath/src/testttt </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/10.%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/10.%E6%B3%9B%E5%9E%8B/</guid>
      <description>golang 1.18 正式版本，支持泛型&#xA;func TestGeneric(t *testing.T) { x := map[string]int{&amp;#34;tom&amp;#34;: 12, &amp;#34;jelly&amp;#34;: 7} res := Sums[string, int](x) log.Println(res) stuC := StuCross[string]{ score: &amp;#34;成绩&amp;#34;, } log.Println(stuC) } //指定函数参数类型约束 func Sums[K string, V int | float32](m map[K]V) V { var x V for _, v := range m { x += v } return x } type StuCross[K string] struct { score K } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>&#xD;map&#xD;#&#xD;map中元素为结构体，不能直接修改，因为map元素无法取地址；&#xA;type Student struct { name string } 修改map中struct元素的值，错误示例：&#xA;func TestMap(t *testing.T) { m := map[string]Student11{&amp;#34;people&amp;#34;: {&amp;#34;zhoujielun&amp;#34;}} //编译错误 Cannot assign to m[&amp;#34;people&amp;#34;].name m[&amp;#34;people&amp;#34;].name = &amp;#34;wuyanzu&amp;#34; } 解决办法：&#xA;func TestMap(t *testing.T) { //Student =&amp;gt; *Student m := map[string]*Student{&amp;#34;people&amp;#34;: {&amp;#34;zhoujielun&amp;#34;}} //编译错误 Cannot assign to m[&amp;#34;people&amp;#34;].name m[&amp;#34;people&amp;#34;].name = &amp;#34;wuyanzu&amp;#34; } </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%E9%97%AD%E5%8C%85/</guid>
      <description>闭包&#xD;#&#xD;func TestCloser(t *testing.T) { x := func() func() { var i = 1 return func() { i++ log.Println(&amp;#34;i = &amp;#34;, i) } }() x() x() } 输出结果：&#xA;=== RUN TestCloser 2022/04/10 21:42:09 2 2022/04/10 21:42:09 3 --- PASS: TestCloser (0.01s) 闭包持有外部变量i，</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/13.rsa%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/13.rsa%E5%8A%A0%E5%AF%86/</guid>
      <description>//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥 //Reader是一个全局、共享的密码用强随机数生成器 var bits = 2048 priKey, err := rsa.GenerateKey(rand.Reader, bits) if err != nil { panic(err) } x509Key := x509.MarshalPKCS1PrivateKey(priKey) priKeyFile, err := os.Create(&amp;#34;pk.pem&amp;#34;) if err != nil { panic(err) } defer priKeyFile.Close() priKeyBlock := pem.Block{Type: &amp;#34;RSA Private Key&amp;#34;, Bytes: x509Key} pem.Encode(priKeyFile, &amp;amp;priKeyBlock) x509PubKey := x509.MarshalPKCS1PublicKey(&amp;amp;priKey.PublicKey) pubKeyFile, err := os.Create(&amp;#34;pubKey.pem&amp;#34;) if err != nil { panic(err) } defer pubKeyFile.Close() pubKeyBlock := pem.Block{Type: &amp;#34;RSA Public Key&amp;#34;, Bytes: x509PubKey} // block 输出到文件 pem.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/14.context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/14.context/</guid>
      <description>context 基本使用&#xD;#&#xD;func TestTimeout(t *testing.T) { ctx, cancel := context.WithCancel(context.Background()) //1. 传递上下文 go RequestA(ctx) time.Sleep(time.Second * 4) //#cancel 1.取消 cancel() time.Sleep(time.Second * 10) } func RequestA(ctx context.Context) { // Do Something ... ctx = context.WithValue(ctx, &amp;#34;A&amp;#34;, &amp;#34;RequestA&amp;#34;) tic := time.NewTicker(time.Second * 2) // 2. 传递上下文 go RequestB(ctx) for { select { case &amp;lt;-tic.C: //3. 开始转圈圈 log.Println(&amp;#34;A转圈圈&amp;#34;) case &amp;lt;-ctx.Done(): //#cancel. A结束 log.Println(&amp;#34;请求A ctx.Done&amp;#34;) return } } } func RequestB(ctx context.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>&#xD;1. int&#xD;#&#xD;2. string&#xD;#&#xD;3. float&#xD;#&#xD;4. map&#xD;#&#xD;5.array,slice&#xD;#&#xD;</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <description>进制转换：&#xA;//十进制转二进制 八进制 十六进制 func TestBase2(t *testing.T) { a := strconv.FormatInt(15, 2) b := strconv.FormatInt(15, 8) c := strconv.FormatInt(15, 10) d := strconv.FormatInt(15, 16) log.Printf(&amp;#34;base2 = %s,base8 = %s,base10 = %s,base16 = %s&amp;#34;, a, b, c, d) } output:&#xA;2022/03/23 15:05:26 base2 = 1111,base8 = 17,base10 = 15,base16 = f --- PASS: TestBase2 (0.01s) </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5.%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5.%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%A6%E8%A7%A3/</guid>
      <description>&#xD;fmt.printf&#xD;#&#xD;常规格式化&#xD;#&#xD;%v : 打印变量值 %T : 类型 整型&#xD;#&#xD;%+d 带符号的整型，fmt.Printf(&amp;quot;%+d&amp;quot;, 255)输出+255 %q 打印单引号 %o 不带零的八进制 %#o 带零的八进制 %x 小写的十六进制 %X 大写的十六进制 %#x 带0x的十六进制 %U 打印Unicode字符 %#U 打印带字符的Unicode %b 打印整型的二进制 float 浮点型&#xD;#&#xD;string 字符串&#xD;#&#xD;</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>go中的异常处理机制&#xD;#&#xD;为了保证程序不会因为一个异常而导致停摆，同时又不像其它语言那么啰嗦，对go语言的异常机制的简单理解实践一下吧&#xA;package main import &amp;#34;fmt&amp;#34; func divide(a int,b int,isPanic bool) int { //,类似于 java try catch ，，通过panic抛出异常 recover 捕获， if isPanic{ defer func() { if err := recover(); err != nil{ fmt.Println(err) } }() } //可以自行捕获异常,自定义异常信息 /*if b==0{ panic(&amp;#34;除数不能等于0&amp;#34;) }*/ c := a/b return c } func main() { divide(3,0,true) fmt.Println(&amp;#34;我的天，一切运转正常&amp;#34;) } Out1:&#xA;runtime error: integer divide by zero 我的天，一切运转正常 Out2:&#xA;自定义异常信息 除数不能等于0 我的天，一切运转正常 如果没有recover,程序不能正常往下执行，就此打住了；</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8.json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8.json/</guid>
      <description>json编码&#xD;#&#xD;type Person struct { Name string `json:&amp;#34;name&amp;#34;` Age int `json:&amp;#34;age,omitempty&amp;#34;` } type Toys struct { Person Toys []string `json:&amp;#34;toys&amp;#34;` } func main(){ p := Person{Name:&amp;#34;cao&amp;#34;,Age:12} toys := []string{&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;} toy := Toys{Person:p,Toys: toys} resbyte,err := json.Marshal(toy) if err != nil{ log.Fatal(err) } // 返回byte切片，转成string类型 resstring := string(resbyte) fmt.Println(resstring) } Out:&#xA;{&amp;#34;name&amp;#34;:&amp;#34;cao&amp;#34;,&amp;#34;toys&amp;#34;:[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;]} json:&amp;quot;age&amp;quot; : 可以理解成别名，&#xA;oemiempty ： 值为空，就忽略此字段&#xA;解码json Unmarshal()&#xD;#&#xD;将json字符串转成结构体变量，json.Unmarshal()必须传入byte切片</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9.unsafe.pointer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9.unsafe.pointer/</guid>
      <description>&#xD;unsafe.pointer&#xD;#&#xD;可支持操作内存； 可以转换到任意类型指针 非安全的，不建议使用 unsafe.Pointer() 任意转换指针类型，并可进行指针运算 其他类型的指针只能转化为unsafe.Pointer，也只有unsafe.Pointer才能转化成任意类型的指针 只有uintptr才支持加减操作，而uintptr是一个非负整数，表示地址值，没有类型信息，以字节为单位 实际操作：获取一个字符串第二个字符的地址和值&#xA;var s = &amp;#34;abc&amp;#34; var strHeader = (*reflect.StringHeader)(unsafe.Pointer(&amp;amp;s)) var res = (*byte)(unsafe.Pointer(strHeader.Data)) //获取字符串第一个字符的地址 log.Printf(&amp;#34;strHeader.Data = %c&amp;#34;, *res) var ress = (*byte)(unsafe.Pointer(strHeader.Data + uintptr(1))) //获取字符串第一个字符的地址 log.Printf(&amp;#34;strHeader.Data = %c&amp;#34;, *ress) //var ssss uintptr = 0xc000088fc0 //log.Println(*(*byte)(unsafe.Pointer(ssss))) </description>
    </item>
  </channel>
</rss>
