<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记</title>
    <link>https://r.xboox.cn/document/ffmpeg/</link>
    <description>Recent content on 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://r.xboox.cn/document/ffmpeg/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/osx%E9%87%87%E9%9B%86%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/osx%E9%87%87%E9%9B%86%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81/</guid>
      <description>&#xD;视频推流&#xD;#&#xD;ffmpeg -f avfoundation -framerate 30 -i &amp;#34;0:0&amp;#34; -rtsp_transport tcp -f rtsp rtsp://192.168.3.44:8554/stream rtsp 推流参数说明&#xA;-i &amp;ldquo;0:0&amp;rdquo; 指明采集设备 第1个视频设备和音频设备 -i &amp;ldquo;FaceTime HD Camera&amp;rdquo; 指定 摄像头设备 设备列表枚举 ffmpeg -f avfoundation -list_devices true -i &amp;quot;&amp;quot; framerate 30 采集视频30帧 </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/rtmp%E7%9B%B4%E6%92%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/rtmp%E7%9B%B4%E6%92%AD/</guid>
      <description>配置nginx&#xD;#&#xD;nginx.conf配置文件中增加 rtmp块&#xA;rtmp{&#xD;server{&#xD;listen 1935;&#xD;# 开启直播&#xD;application mylive {&#xD;live on;&#xD;}&#xD;#这里是hls推流&#xD;application hls {&#xD;live on;&#xD;hls on;&#xD;# m3u8分片保存地址&#xD;hls_path /home/small/m3u8File;&#xD;hls_fragment 6s;&#xD;}&#xD;}&#xD;}&#xD;# http -&amp;gt; server 下面增加&#xD;http{&#xD;server{&#xD;location /hls {&#xD;types{&#xD;application/vnd.apple.mpegurl m3u8;&#xD;video/mp2t ts;&#xD;}&#xD;alias /home/small/m3u8File;&#xD;expires -1;&#xD;add_header Cache-Control no-cache;&#xD;}&#xD;}&#xD;}&#xD;推流&#xD;#&#xD;ffmpeg -re -i /home/small/test.mp4 -codec copy -f flv -r 60 -s 320*480 -start_number 100 -y rtmp:172.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>1. 交叉编译 ffmpeg -&amp;gt; aarch64&#xD;#&#xD;1.1参数说明：&#xD;#&#xD;--cross-prefix 指定交叉编译工具链路径&#xD;--arch 指定cpu指令集架构&#xD;--target-os 目标系统 linux&#xD;--cc c 编译器 默认：cc 这里指定clang google官方已经在ndk去掉了gcc&#xD;--enable-cross-compile 开启交叉编译&#xD;--disable-static 关闭静态编译&#xD;--enable-shared 开启shared表示编译动态链接库&#xD;--disable-ffmpeg 不开启ffmpeg 模块&#xD;--disable-ffplay 不开启ffplay 播放器模块&#xD;--disable-ffprobe 不开启ffprobe 音视频分析模块 1.2设置环境变量&#xD;#&#xD;NDK版本：android-ndk-r22b&#xA;export NDK_ROOT=/mnt/e/WorkRoom/ubuntu/android-ndk-r22b/toolchains/llvm/prebuilt/linux-x86_64 export SYSROOT=$NDK_ROOT/sysroot 1.3 执行 ./configure&#xD;#&#xD;需要注意：新版本ndk工具链取消了gcc编译器，默认编译器是clang,配置项目里面需要指定c/c++ 编译器&#xA;&amp;ndash;cc=$NDK_ROOT/bin/armv7a-linux-androideabi21-clang &amp;ndash;cxx=$NDK_ROOT/bin/armv7a-linux-androideabi21-clang++&#xA;完整的编译参数如下：&#xA;small@small:~$ ./configure \ --prefix=/mnt/e/WorkRoom/ffmpeg/ffarm \ --arch=aarch64 \ --cpu=armv8 \ --target-os=android \ --sysroot=$SYSROOT \ --cross-prefix=$NDK_ROOT/bin/aarch64-linux-android- \ --extra-cflags=&amp;#34;-I$SYSROOT/usr/include -fPIC -DANDROID -mfpu=neon -mfloat-abi=softfp &amp;#34; \ --extra-ldflags=&amp;#34;-L$SYSROOT/usr/lib&amp;#34; \ --cc=$NDK_ROOT/bin/aarch64-linux-android21-clang \ --nm=$NDK_ROOT/bin/aarch64-linux-android-nm \ --cxx=$NDK_ROOT/bin/aarch64-linux-android21-clang++ \ --enable-runtime-cpudetect \ --enable-neon \ --enable-shared \ --enable-asm \ --disable-static \ --enable-cross-compile \ --enable-small \ --enable-jni \ --enable-mediacodec \ --enable-gpl \ --enable-decoder=h264_mediacodec \ --disable-doc \ --disable-debug \ --disable-ffmpeg \ --disable-ffplay \ --disable-ffprobe \ --disable-postproc \ --disable-avdevice \ --disable-symver \ --disable-stripping # --enable-hwaccel=h264_mediacodec \&#xD;# --enable-asm \&#xD;设置环境变量 export NDK_ROOT=/mnt/e/WorkRoom/android/ndk/android-ndk-r26b/toolchains/llvm/prebuilt/linux-x86_64</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>YUV 一种编码格式，中间格式，通常摄像头采集的原始码流都会先转为中间格式，再转为其他格式进行封装传输；&#xD;#&#xD;Y分量： 亮度 UV分量：色度&#xA;YUV格式的两大类：平面(plannr)和紧凑(packed)。对于planar的YUV格式，先连续存储所有像素点的Y，紧接着存储所有像素点的U，随是存储所有像素点的V，或者是先v后u对于packed的YUV格式，每个像素点的Y，U，V是连续交替存储的。比如YUV420P 其中P表示紧凑，YUV420SP其中的SP表示“半紧凑”&#xA;RGB 比YUV面世晚，主要流行于 LED时代&#xD;#&#xD;编码器的由来&#xD;#&#xD;为什么会有这么多种编码器？看看他们的发展史的。&#xA;ITU-T这个组织是专门做音视频的组织，还有一个组织ISO，这个组织是专门做各种标准规范的。&#xA;ITU-T是最先研发了音视频通话的，最先研究出了H261，后来发布H262,H263，指导后来的H视频编解码器，这是ITU-T的H26x系列。&#xA;两个组织互相竞争，&#xA;ISO也研发了MPEG-1、MPEG-2、MPEG-3、MPEG-4,对应H26x系列。&#xA;两个组织竞争了相近20年，两个组织两个标准，最后再1998年双方合作，在第一版H264的基础上双方进行共同研发，发布了后来的更成熟的H264，作为后来的结晶，这一结晶在ITU-T组织中依然称为H264，但是在ISO组织中称为MPEG4-avc，这只是在不同组织中的称呼名字。&#xA;但是在实际代码中创建的时候，都是传入，首先是video表示一个视频标签，然后传入ISO组织的名称“avc”表示H264编解码器，H265就是“video/hevc”。&#xA;随着社会的进步，技术的发展，生活中使用的显示器，越来越大，视频画面也变大，广泛的出现了4K、8K视频，这对于H264来说已经存在明显不足了，所以两个组织又一起合作研发了H265.&#xA;H265编解码技术在ITU-T组织中称为H265，在ISO组织中称为HEVC。&#xA;H265在H264的基础上研发的，可以达到更高压缩的同时实现画面更清晰。&#xA;H264可以实现把4M的数组压缩到80k-90k，&#xA;同样的画质和同样的码率，H.265比H2.64 占用的存储空间要少理论50%；&#xA;封装格式&#xA;mp4、flv、rmvb、avi等称为封装格式。&#xA;封装格式内部包含视频轨（H264、H265编码器编码之后的后缀是h264、h265的视频编码文件）、音频轨（后缀是.aac .mp3的音频编码文件）、字幕轨以及视频宽高等编解码信息。&#xA;编解码格式&#xA;H264、H265、VP8、VP9等称为编码格式。&#xA;其他参与者，其他编解码器&#xA;Google后来推出了VP8、VP9的编解码器，VP8,VP9分别和H264、H265做对应竞争。&#xA;Microsoft推出了VC-1。&#xA;国产自主标准：AVS/AVS+/AVS2，只是仅仅用于机顶盒，广播电视，其他领域并没有用到。但是现在的广播电视也已经废弃了AVS标准了用了其他更优良的标准。&#xA;视频的组成&#xA;可以通过FFmpeg命令把视频文件进行拆分，把一个mp4封装格式的视频文件可以抽取其中的h264视频流文件，也可以抽取其中的aac音频流文件。&#xA;视频编码文件、音频编码文件、编解码信息包括视频宽高等共同组成了封装视频文件。&#xA;原文链接</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E5%8F%82%E6%95%B0%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E5%8F%82%E6%95%B0%E6%B3%A8%E9%87%8A/</guid>
      <description>a) 通用选项&#xA;-L license&#xD;-h 帮助&#xD;-fromats 显示可用的格式，编解码的，协议的...&#xD;-f fmt 强迫采用格式fmt&#xD;-I filename 输入文件&#xD;-y 覆盖输出文件&#xD;-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持&#xD;-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持&#xD;-title string 设置标题&#xD;-author string 设置作者&#xD;-copyright string 设置版权&#xD;-comment string 设置评论&#xD;-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置，只需要输入如下的就可以了：ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg&#xD;-hq 激活高质量设置&#xD;-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持&#xD;b) 视频选项&#xA;-b bitrate 设置比特率，缺省200kb/s&#xD;-r fps 设置帧频 缺省25&#xD;-s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：&#xD;Sqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576&#xD;-aspect aspect 设置横纵比 4:3 16:9 或 1.</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>输入视频，输出转码后的视频&#xA;ffmpeg -i intput.mp4 output.mp4</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E6%8E%A8%E6%B5%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E6%8E%A8%E6%B5%81/</guid>
      <description>rtsp推流&#xD;#&#xD;ffmpeg -i /dev/video0 -c copy -rtsp_transport tcp -f rtsp rtsp://192.168.3.44:8554/stream&#xD;参考文章：https://zhuanlan.zhihu.com/p/73984438</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E6%97%B6%E9%97%B4%E6%88%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E6%97%B6%E9%97%B4%E6%88%B3/</guid>
      <description>time_base&#xD;#&#xD;在 FFmpeg 中，时间基(time_base)是时间戳(timestamp)的单位，时间戳值乘以时间基，可以得到实际的时刻值(以秒等为单位)。例如，如果一个视频帧的 dts 是 40，pts 是 160，其 time_base 是 1/1000 秒，那么可以计算出此视频帧的解码时刻是 40 毫秒(40/1000)，显示时刻是 160 毫秒(160/1000)。FFmpeg 中时间戳(pts/dts)的类型是 int64_t 类型，把一个 time_base 看作一个时钟脉冲，则可把 dts/pts 看作时钟脉冲的计数。&#xD;参考：https://zhuanlan.zhihu.com/p/545055099</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E6%9F%A5%E7%9C%8B%E5%8A%A8%E6%80%81%E5%BA%93%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E6%9F%A5%E7%9C%8B%E5%8A%A8%E6%80%81%E5%BA%93%E4%BF%A1%E6%81%AF/</guid>
      <description>&#xD;查看动态库信息&#xD;#&#xD;readelf -h libavformat.so </description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E7%BC%96%E8%AF%91/</guid>
      <description>linux 编译 ffmpeg&#xD;#&#xD;下载源码&#xA;下载ffmpeg源码 或者通过git clone源码：&#xA;git clone git@github.com:FFmpeg/FFmpeg.git 进入源码根目录，执行./configure 出现如下错误：&#xA;nasm/yasm not found 需要下载yasm汇编器&#xA;下载yasm汇编器&#xA;wget https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz 解压安装 :&#xA;tar -zxvf yasm-1.3.0.tar.gz 进入解压后目录&#xA;cd yasm-1.3.0&#xD;./configure&#xD;# 接着 make sudo make install 接着返回 ffmpeg目录，执行命令&#xA;small@small:~/FFmpeg$&#xD;./configure --prefix=&amp;#34;/usr/local/ffmpeg/&amp;#34; --enable-libx264 --enable-gpl --enable-nonfree --enable-libfdk-aac 出现如下显示就代表成功了：&#xA;small@small:~/FFmpeg$ ./configure install prefix /usr/local source path . C compiler gcc C library glibc ARCH x86 (generic) big-endian no runtime cpu detection yes standalone assembly yes x86 assembler yasm MMX enabled yes MMXEXT enabled yes 3DNow!</description>
    </item>
    <item>
      <title></title>
      <link>https://r.xboox.cn/document/ffmpeg/%E8%BD%ACm3u8-hls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/document/ffmpeg/%E8%BD%ACm3u8-hls/</guid>
      <description>&#xD;将视频转为m3u8存储&#xD;#&#xD;参数使用说明记录笔记：&#xA;re : 将视频按照时间顺序进行切割，否则没有这个参数，如果去播放推送的视频流，顺序就会错乱，或者说，ffmpeg会按照最快速度去切割&#xA;start_number m3u8列表中的第一片序列数，可以从指定序号开始&#xA;ffmpeg -re -i input.mp4 -c copy -f hls -bsf:v h264_mp4toannexb -start_number 27 output.m3u8&#xD;#EXTM3U&#xD;#EXT-X-VERSION:3&#xD;#EXT-X-TARGETDURATION:10&#xD;#EXT-X-MEDIA-SEQUENCE:27&#xD;#EXTINF:10.427778,&#xD;output27.ts&#xD;#EXTINF:10.427778,&#xD;output28.ts&#xD;#EXTINF:10.427778,&#xD;output29.ts hls_time : 设置m3u8 切片时长； 可以设置每一片时长 10s ;切片规则：从关键帧开始，时间不是很均匀，先转码再切片，时间会比较规律。 hls_list_size: 设置m3u8 列表中TS切片的个数。 ffmpeg -re -i input.mp4 -c copy -f hls -bsf:v h264_mp4toannexb -hls_time 10 -hls_list_size 3 output.m3u8 </description>
    </item>
  </channel>
</rss>
