<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on 云海阁</title>
    <link>https://zouni.vip/</link>
    <description>Recent content in Introduction on 云海阁</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://zouni.vip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/FAQ/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/FAQ/</guid>
      <description>#经常遇到的问题：#读取本地存储文件权限受限 open failed: EACCES (Permission denied)  //manifest.xml application标签&amp;lt;application android:requestLegacyExternalStorage=&amp;#34;true&amp;#34;/&amp;gt; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/gradle%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/gradle%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>#新版本 build.graldeplugins {  id &amp;#34;org.springframework.boot&amp;#34; version &amp;#34;2.2.2.RELEASE&amp;#34; } 旧版本
//Using legacy plugin application buildscript {  repositories {  maven {  url &amp;#34;https://plugins.gradle.org/m2/&amp;#34;  }  }  dependencies {  classpath &amp;#34;org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE&amp;#34;  } }  apply plugin: &amp;#34;org.springframework.boot&amp;#34; #android studio 运行 main 方法 报错SourceSet with name ‘main‘ not found 解决：./idea/gradle.xml -&amp;gt; 节点下 加入下面这句
&amp;lt;option name=&amp;#34;delegatedBuild&amp;#34; value=&amp;#34;false&amp;#34; /&amp;gt; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/jetpack%E5%AD%A6%E4%B9%A0/hilt-dagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/jetpack%E5%AD%A6%E4%B9%A0/hilt-dagger/</guid>
      <description>#注解说明#@Module ：告知hilt如何提供被注解类的实例#@InstallIn(Component::class) : 告知hilt模块用在哪个类中#@Binds : 注入函数（接口无法通过构造函数实例化）,接口添加这个注解告知hilt 根据函数返回类型提供哪个接口实例， 根据函数参数提供对应实例  #@Provides: 注入函数，类不能被构造函数实例化（来自第三方库或必须通过构造函数创建实例），只能通过提供函数的方 式来获取一个实例化结果hilt会从带注解的函数得到信息：
 根据函数返回类型提供对应实例 根据函数参数提供对应实例 函数主体得到需要的依赖项实例  #@EntryPoint：注入接口,为hilt不支持的类型注解</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/jetpack%E5%AD%A6%E4%B9%A0/workmanager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/jetpack%E5%AD%A6%E4%B9%A0/workmanager/</guid>
      <description>#workmanager 轻量级后台任务管理
#worker 任务体class DatabaseWork(context: Context, workerParams: WorkerParameters) : Worker(context,workerParams) {  companion object{   }   override fun doWork(): Result {  Log.e(&amp;#34;cgq&amp;#34;,&amp;#34;start&amp;#34;)  val data = Data.Builder().putString(&amp;#34;cgq&amp;#34;,&amp;#34;woker-data&amp;#34;).build()  setProgressAsync(data)  return Result.success()  }  } #workerRequest 执行任务#WorkerManager enqueue 添加任务 val workRequest: WorkRequest = OneTimeWorkRequestBuilder&amp;lt;DatabaseWork&amp;gt;().build()  //状态回调，添加一个任务观察者  WorkManager.getInstance(requireActivity()).getWorkInfoByIdLiveData(workRequest.id).observe(requireActivity()){  when (it.state) {  WorkInfo.State.RUNNING -&amp;gt; Log.e(&amp;#34;cgq&amp;#34;, &amp;#34;running======&amp;#34;)  WorkInfo.State.CANCELLED -&amp;gt; Log.e(&amp;#34;cgq&amp;#34;, &amp;#34;cancelled======&amp;#34;)  WorkInfo.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/kotlin/jetpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/kotlin/jetpack/</guid>
      <description>android jetpack框架组件
databinding; 数据绑定库
livedata: 数据观察类，
Room: 数据库
Viewmodel: 绑定activity或者fragment生命周期，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/kotlin/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/kotlin/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8C%BA%E9%97%B4/</guid>
      <description>#区间使用1..10: 1-10 区间内的数字打印（ 包含10）
fun main() {  for(i in 1 .. 10){  print(i)  } } //until 不包含10 step:指定步长，每隔 两个输出一个 for(i in 1 until 10 step 2){  print(i) } 10 downTo 1:倒着输出区间 10-1
for(i in 10 downTo 1 step 1){  print(i) } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/kotlin/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8F%8C%E5%86%92%E5%8F%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/kotlin/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8F%8C%E5%86%92%E5%8F%B7/</guid>
      <description>双冒号 :: 返回函数体
class Apply(){  var name = &amp;#34;cao&amp;#34;  var age = 12   fun print(){  println(&amp;#34;name is $name,age is $age&amp;#34;)  }  }  fun main() {  var app = Apply()  app.apply {  name = &amp;#34;zhang&amp;#34;  age = 1  }   val print = app::print  print() } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/kotlin/%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/kotlin/%E6%B3%A8%E8%A7%A3/</guid>
      <description>#注解注解就是一种特殊的注释/解释，分两种情况:
1.在代码编写阶段，编译器会看到的，并且明白是什么意思；
2. 在运行阶段，反射机制，动态代理等应用。
#元注解给注解加一个注释/ 注解上的注解；比如某个注解的作用域通过元注解告诉编译器，还有注解的生命周期等。
@Target
ElementType.TYPE：允许被修饰的注解作用在类、接口和枚举上
ElementType.FIELD：允许作用在属性字段上
ElementType.METHOD：允许作用在方法上
ElementType.PARAMETER：允许作用在方法参数上
ElementType.CONSTRUCTOR：允许作用在构造器上
ElementType.LOCAL_VARIABLE：允许作用在本地局部变量上
ElementType.ANNOTATION_TYPE：允许作用在注解上
ElementType.PACKAGE：允许作用在包上</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/kotlin/%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/kotlin/%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80TextView%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E9%97%AE%E9%A2%98/</guid>
      <description>1.修改textview的约束条件
app:layout_constraintStart_toEndOf=&amp;#34;@+id/textView3&amp;#34;改为app:layout_constraintLeft_toRightOf=&amp;#34;@+id/textView3&amp;#34; 注意 其他的start end也都改为left right 2.其他属性搭配：
android:layout_height=&amp;#34;wrap_content&amp;#34;搭配：app:layout_constrainedWidth=&amp;#34;true&amp;#34;android:layout_height=&amp;#34;wrap_content&amp;#34;搭配：app:layout_constrainedHeight=&amp;#34;false&amp;#34;（不写默认即false） </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/style%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/style%E6%A0%B7%E5%BC%8F/</guid>
      <description> colorPrimary 应用的主要色调，actionBar默认使用该颜色，Toolbar导航栏的底色 colorPrimaryDark 应用的主要暗色调，statusBarColor默认使用该颜色 statusBarColor 状态栏颜色，默认使用colorPrimaryDark windowBackground 窗口背景颜色 navigationBarColor 底部栏颜色 colorForeground 应用的前景色，ListView的分割线，switch滑动区默认使用该颜色 colorBackground 应用的背景色，popMenu的背景默认使用该颜色 colorAccent CheckBox，RadioButton，SwitchCompat等一般控件的选中效果默认采用该颜色 colorControlNormal CheckBox，RadioButton，SwitchCompat等默认状态的颜色。 colorControlHighlight 控件按压时的色调 colorControlActivated 控件选中时的颜色，默认使用colorAccent colorButtonNormal 默认按钮的背景颜色 editTextColor：默认EditView输入框字体的颜色。 textColor Button，textView的文字颜色 textColorPrimaryDisableOnly RadioButton checkbox等控件的文字 textColorPrimary 应用的主要文字颜色，actionBar的标题文字默认使用该颜色 colorSwitchThumbNormal: switch thumbs 默认状态的颜色. (switch off)  #全局标题栏 fitsSystemWindows 生效前提：当前页面没有标题栏，并且状态栏或者底部导航栏透明 fitsSystemWindows = true，表示内容区不延伸到状态栏或底部导航栏 fitsSystemWindows = false，表示内容区延伸到状态栏或底部导航栏  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/webview%E6%8E%A5%E5%8F%97cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/webview%E6%8E%A5%E5%8F%97cookie/</guid>
      <description>#打开第三方站点需要保留登录状态，webview需要接受cookie，按照官方提供的API CookieManager可以实现// 1. 在loadurl之前调用接受cookie方法 android.webkit.CookieManager cookieManager = android.webkit.CookieManager.getInstance(); cookieManager.setAcceptThi~rdPartyCookies(this,true); // 2. onPageFinished CookieManager.getInstance().flush(); </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E6%8F%92%E4%BB%B6%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E6%8F%92%E4%BB%B6%E5%8C%96/</guid>
      <description>Classloader 分为三种： 1: pathClassloader: Android 用来加载系统文件 和 应用的主文件 2: DexClassloader: Android 用来加载 jar/apk/dex 文件 3: URLClassloader: 可以加载java的jar包,但是Dalvik 虚拟机不支持这种加载方式
public class ProxyActivity extends AppCompatActivity {   private ProxyActivityInterface pluginObj;   @Override  protected void onCreate(Bundle savedInstanceState) {  super.onCreate(savedInstanceState);  //在这里拿到了真实跳转的activity 拿出来 再去启动真实的activity   String className = getIntent().getStringExtra(&amp;#34;ClassName&amp;#34;);   //通过反射在去启动一个真实的activity 拿到Class对象  try {  Class&amp;lt;?&amp;gt; plugClass = getClassLoader().loadClass(className);  Constructor&amp;lt;?&amp;gt; pluginConstructor = plugClass.getConstructor(new Class[]{});  //因为插件的activity实现了我们的标准  pluginObj = (ProxyActivityInterface) pluginConstructor.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E7%94%9F%E6%88%90%E5%90%AB%E6%9C%89dex%E7%9A%84jar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E7%94%9F%E6%88%90%E5%90%AB%E6%9C%89dex%E7%9A%84jar/</guid>
      <description>#1. android studio 生成jar包task makeJar(type: Copy) {  delete &amp;#39;build/libs/mylibrary.jar&amp;#39; //删除已经存在的jar包  from(&amp;#39;build/intermediates/compile_library_classes_jar/ debug/&amp;#39;) //从该目录下加载要打包的文件,这里实际上是编译后的classes.jar文件的目录  into(&amp;#39;build/libs/&amp;#39;)//jar包的保存目录  include(&amp;#39;classes.jar&amp;#39;)//设置过滤，只打包classes文件  rename(&amp;#39;classes.jar&amp;#39;, &amp;#39;dynamic_temp.jar&amp;#39;)//重命名，mylibrary.jar 根据自己的需求设置 } makeJar.dependsOn(build) #1. 找到android sdk ，以下路径配置到环境变量，目的是为了使用 dx 命令D:\WorkRome\android\Sdk\build-tools\30.0.3
#2. 一键生成 jar &amp;ndash;output 最终输出jar包 temp.jar 目标jar
dx --dex --output=object.jar temp.jar  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E7%AD%BE%E5%90%8D/</guid>
      <description>#获取APP签名信息public static String getSingInfo(Context context) {  try {  PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_SIGNATURES);  Signature[] signs = packageInfo.signatures;  Signature sign = signs[0];  byte[] signByteArray = sign.toByteArray();   return md5(signByteArray);  } catch (Exception e) {  e.printStackTrace();  }  return null; }  public static String md5(byte[] data){  if(data == null || data.length == 0){  return null;  }  StringBuffer hexString = new StringBuffer();  try {  MessageDigest md = MessageDigest.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%BA%94%E7%94%A8/</guid>
      <description>RoleManager roleManager = getSystemService(RoleManager.class); Intent intent = roleManager.createRequestRoleIntent(RoleManager.ROLE_SMS); startActivityForResult(intent,666); </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E9%85%8D%E7%BD%AE%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E9%85%8D%E7%BD%AE%E5%BC%82%E5%B8%B8/</guid>
      <description>#Running Gradle task &amp;lsquo;assembleDebug&amp;rsquo;&amp;hellip;卡在 Running Gradle task &amp;lsquo;assembleDebug&amp;rsquo;&amp;hellip; 不动
解决方案：
 检查 ./gradle 是否下载成功 检查 gradle 默认代理是否正常
gradle 配置文件默认在 ~/.gradle/gradle.properties 注释掉下面几行代码即可：  # Sun Jul 05 10:38:23 CST 2020 # systemProp.http.proxyHost=127.0.0.1 # systemProp.http.proxyPort=50030 # systemProp.https.proxyHost=127.0.0.1 # systemProp.https.proxyPort=50030 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/android/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/android/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%A7%84%E8%8C%83/</guid>
      <description> 项目打包命名方式：   apk 命名： 项目名+打包日期+版本号 version_name 命名：version_name + es es:环境变量（alpha or release） 分别对应 测试环境和生产环境，后续根据项目变化进一步扩展 alpha beta release  发布测试版本，统一通过蒲公英平台发布 正式版本每一个版本统一交由测试管理并记录  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/atom/markdown-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/atom/markdown-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/atom/%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/atom/%E5%BC%82%E5%B8%B8/</guid>
      <description>The package spell-check cannot load the system dictionary for zh-CN. See the settings for ways of changing the languages used, resolving missing dictionaries, or hiding this warning.
 Use Locales 前面的勾选去掉 下面添加 en-US  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/1.solidity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/1.solidity/</guid>
      <description>#语法学习//没有这一句会有警告 // SPDX-License-Identifier: GPL-3.0  //指明版本 pragma solidity &amp;gt;=0.8.7 &amp;lt;0.9.0;  //声明合约 contract trans{  uint8 tt;   function setTT(uint8 i) public {  tt = i;  }   //view : 当前函数不会修改账本数据  //int uint : 默认是uint256  function getTT() public view returns (uint8){  return tt;  } } #关键字 contract constructor public private external internal view pure payable  #数据类型 uint8 -&amp;gt; uint256: 地址长度 8位递增 string -&amp;gt; 字符串，不可变，可强转 mapping(uint =&amp;gt; uint) scoreList; 字典  #数据存储位置 memory 内存变量，调用结束就消失 storage 状态变量，随着合约进入分布式账本 calldata 永久存储  #修饰符 变量修饰符: public or private 函数修饰符  view 函数不会改变任何东西，被view修饰的函数可以读取外部变量，不能修改 pure 函数只能处理参数，不能读写函数以外的任何东西    合约调用者地址 address owner = msg.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/2.remix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/2.remix/</guid>
      <description>#智能合约 编辑器 remix-ide  在线编辑，对网络有要求，在线地址
 https://remix.ethereum.org/
   离线编辑,docker down镜像
docker pull remixproject/remix-ide:latest docker run -p 8080:80 remixproject/remix-ide:latest  or docker pull remixproject/remix-ide:remix_live docker run -p 8080:80 remixproject/remix-ide:remix_live 浏览器运行 localhost:8080，就可以用 solidity 编写智能合约了
  remix-project 连接本地文件夹：
   安装remixd  npm install -g @remix-project/remixd
  连接  remixd -s d:/workspace -u http://localhost:8080
   #没有编译插件,点击下图中 打叉的地方</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/2.solidity%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/2.solidity%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description>#智能合约 编辑器 remix-ide  在线编辑，对网络有要求，在线地址
 https://remix.ethereum.org/
   离线编辑,docker down镜像
docker pull remixproject/remix-ide:latest docker run -p 8080:80 remixproject/remix-ide:latest 浏览器运行 localhost:8080，就可以用 solidity 编写智能合约了
  remix-project 连接本地文件夹：
    安装remixd
 npm install -g @remix-project/remixd
   连接
 remixd -s d:/workspace -u http://localhost:8080 address public owner;
 function getOwner() public { owner = msg.sender; }
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/3.geth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/3.geth/</guid>
      <description>#启动geth客户端，geth 创建账户，转账示例：
 geth &amp;ndash;ropsten &amp;ndash;syncmode snap &amp;ndash;identity &amp;ldquo;smallc&amp;rdquo; &amp;ndash;http &amp;ndash;http.port 7545 &amp;ndash;http.api &amp;ldquo;db,eth,net,web3,personal&amp;rdquo; &amp;ndash;datadir &amp;ldquo;ropsten&amp;rdquo;
 #常用命令   命令 说明     removedb asdf   account Manage accounts   console 控制台命令行    #启动参数说明   参数 说明     &amp;ndash;identity 节点身份标识   –networkid 我们创建的私有链的网络id   –datadir 节点的数据文件夹   –http 表示允许远程调用。这个参数以前叫rpc，后来在新版的Geth中改成http了，当然用rpc也可以，只不过这个参数很快就被丢弃了，还是早点改的好，这个可以在Geth的帮助中看到。   –http.port 表示允许远程调用的端口。默认是8545。这个参数以前是rpcport。   –http.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/3.geth%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/3.geth%E5%85%A5%E9%97%A8/</guid>
      <description>#clef 以太坊账户管理#创建账户 clef newaccount &amp;ndash;keystore geth-tutorial/keystore
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/4.geth%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/4.geth%E9%85%8D%E7%BD%AE/</guid>
      <description>#创建私链 创建账户   geth
  初始化   geth &amp;ndash;datadir smallc init genesis.json
 启动   geth &amp;ndash;identity smallchain &amp;ndash;http &amp;ndash;http.api net,web3,eth,personal &amp;ndash;datadir smallchain &amp;ndash;mine &amp;ndash;miner.threads 0 &amp;ndash;http.corsdomain &amp;ldquo;*&amp;rdquo; &amp;ndash;http.addr 0.0.0.0 console &amp;ndash;networkid 666
  miner.threads 线程数量,默认是0  参数说明
 identity //唯一标识，在众多节点中快速找到当前节点 networkid // 当前节点网络id
 #genesis.json{  //64位随机数，用于挖矿，注意他和mixhash 的设置需要满足以太坊黄皮书的要求  //直接用这个也可以  &amp;#34;nonce&amp;#34;:&amp;#34;0x0000000000000042&amp;#34;,  //与nonce 共同用于挖矿，注意他和mixhash 的设置需要满足以太坊黄皮书的要求  &amp;#34;mixhash&amp;#34;:&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;,  //挖矿难度，你可以随意控制，这里设置的难度比较小  &amp;#34;difficulty&amp;#34;: &amp;#34;0x4000&amp;#34;,  //用来提前设置帐号的以太币数量，例：  //&amp;#34;alloc&amp;#34;: {  //“0x0000000000000000000000000000000000000001”:{&amp;#34;balance&amp;#34;:&amp;#34;10000000&amp;#34;},  //&amp;#34;0x0000000000000000000000000000000000000002&amp;#34;:{&amp;#34;balance&amp;#34;:&amp;#34;20000000&amp;#34;}  //},  &amp;#34;alloc&amp;#34;: {},  //挖矿的账户，默认钱包地址，这里因为没有地址，所有全是0  //后面运行geth 后创建新账户时，如果geth 发现没有地址，会默认将第一个账户地址设置为矿工帐号  &amp;#34;coinbase&amp;#34;:&amp;#34;0x0000000000000000000000000000000000000000&amp;#34;,  //创世块的时间戳  &amp;#34;timestamp&amp;#34;: &amp;#34;0x00&amp;#34;,  //上一个区块的Hash值，因为是创世块，前面没有，所以是0  &amp;#34;parentHash&amp;#34;:&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;,  //附加信息，随便填文本或不填也行  &amp;#34;extraData&amp;#34;: &amp;#34;0x00000000&amp;#34;,  //gas 最高限制，以太坊运行交易，合约等消耗的gas最高限制，这里设置为最高  &amp;#34;gaslimit&amp;#34;:&amp;#34;0xffffffff&amp;#34;,  &amp;#34;config&amp;#34;: {  &amp;#34;chainId&amp;#34;: 666, //链ID 随便起 和主链、测试连不同就OK，公链ID为1  &amp;#34;homesteadBlock&amp;#34;: 0,  &amp;#34;eip150Block&amp;#34;: 0,  &amp;#34;eip155Block&amp;#34;: 0,  &amp;#34;eip158Block&amp;#34;: 0,  &amp;#34;byzantiumBlock&amp;#34;: 0,  &amp;#34;constantinopleBlock&amp;#34;: 0,  &amp;#34;petersburgBlock&amp;#34;: 0,  &amp;#34;istanbulBlock&amp;#34;: 0  }, } #完整例子{  &amp;#34;config&amp;#34;: {  &amp;#34;chainId&amp;#34;: 666,  &amp;#34;homesteadBlock&amp;#34;: 0,  &amp;#34;eip150Block&amp;#34;: 0,  &amp;#34;eip155Block&amp;#34;: 0,  &amp;#34;eip158Block&amp;#34;: 0,  &amp;#34;byzantiumBlock&amp;#34;: 0,  &amp;#34;constantinopleBlock&amp;#34;: 0,  &amp;#34;petersburgBlock&amp;#34;: 0,  &amp;#34;istanbulBlock&amp;#34;: 0  },  &amp;#34;alloc&amp;#34;: {  &amp;#34;aee29ddd94a36f6d3415310046863929a59e30be&amp;#34;: { &amp;#34;balance&amp;#34;: &amp;#34;100&amp;#34; }  },  &amp;#34;coinbase&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000&amp;#34;,  &amp;#34;difficulty&amp;#34;: &amp;#34;0x2000&amp;#34;,  &amp;#34;extraData&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;gasLimit&amp;#34;: &amp;#34;0x2fefd8&amp;#34;,  &amp;#34;nonce&amp;#34;: &amp;#34;0x0000000000000042&amp;#34;,  &amp;#34;mixhash&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;,  &amp;#34;parentHash&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;,  &amp;#34;timestamp&amp;#34;: &amp;#34;0x00&amp;#34; } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/4.%E5%88%9B%E4%B8%96%E5%9D%97%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/4.%E5%88%9B%E4%B8%96%E5%9D%97%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</guid>
      <description>#创建私链 定位到数据目录   cd D:\workproject\blockchain\geth_data
 初始化   geth &amp;ndash;datadir smallchain init genesis.json
   //genesis.json {  &amp;#34;config&amp;#34;: {  &amp;#34;chainId&amp;#34;: 77 //链ID 随便起 和主链、测试连不同就OK  },  &amp;#34;alloc&amp;#34;: {  &amp;#34;0xc7c4f9a0Cd0a3e45348c5ed8c3909C69aA9FA8fC&amp;#34;: { &amp;#34;balance&amp;#34;: &amp;#34;10000000000000000000000&amp;#34; } //创世块分配的账户及余额  },  &amp;#34;difficulty&amp;#34;: &amp;#34;9000&amp;#34;, //挖矿难度  &amp;#34;gasLimit&amp;#34;: &amp;#34;2100000&amp;#34; //汽油费 }   {  &amp;#34;config&amp;#34;: {  &amp;#34;chainId&amp;#34;: 123,  &amp;#34;homesteadBlock&amp;#34;: 0,  &amp;#34;eip150Block&amp;#34;: 0,  &amp;#34;eip155Block&amp;#34;: 0,  &amp;#34;eip158Block&amp;#34;: 0,  &amp;#34;byzantiumBlock&amp;#34;: 0,  &amp;#34;constantinopleBlock&amp;#34;: 0,  &amp;#34;petersburgBlock&amp;#34;: 0,  &amp;#34;istanbulBlock&amp;#34;: 0  },  &amp;#34;alloc&amp;#34;: {},  &amp;#34;coinbase&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000&amp;#34;,  &amp;#34;difficulty&amp;#34;: &amp;#34;0x2000&amp;#34;,  &amp;#34;extraData&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;gasLimit&amp;#34;: &amp;#34;0x2fefd8&amp;#34;,  &amp;#34;nonce&amp;#34;: &amp;#34;0x0000000000000042&amp;#34;,  &amp;#34;mixhash&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;,  &amp;#34;parentHash&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;,  &amp;#34;timestamp&amp;#34;: &amp;#34;0x00&amp;#34; } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/5.geth%E8%BD%AC%E8%B4%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/5.geth%E8%BD%AC%E8%B4%A6/</guid>
      <description>#以太坊转账， 账户 &amp;ndash;&amp;gt; 账户 x 账户 &amp;ndash;&amp;gt; 合约 √ 合约 &amp;ndash;&amp;gt; 账户 √
 1、打开控制台
F:\Geth&amp;gt;geth &amp;ndash;datadir &amp;ldquo;data&amp;rdquo; console
2、查看目前所拥有的账户列表
 eth.accounts
 [&amp;ldquo;0xf4fb90bd8713491d62778d0a46f8f6b83b98ed91&amp;rdquo;]
3、新建账户
 personal.newAccount(&amp;lsquo;123456&amp;rsquo;)
 &amp;ldquo;0x1dfa2d1d645e45f5d77025f63b73c8efed9a8240&amp;rdquo;
4、查看目前所拥有的账户列表
 eth.accounts
 [&amp;ldquo;0xf4fb90bd8713491d62778d0a46f8f6b83b98ed91&amp;rdquo;, &amp;ldquo;0x1dfa2d1d645e45f5d77025f63b73c8
efed9a8240&amp;rdquo;]
5、查看账户余额
 eth.getBalance(eth.accounts[0])
 665000000000000000000
 eth.getBalance(eth.accounts[1])
 0
6、定义变量
 var acc1=eth.accounts[0]
 undefined
 acc1
 &amp;ldquo;0xf4fb90bd8713491d62778d0a46f8f6b83b98ed91&amp;rdquo;
 var acc2=eth.accounts[1]
 undefined
 acc2
 &amp;ldquo;0x1dfa2d1d645e45f5d77025f63b73c8efed9a8240&amp;rdquo;
7、转账
 eth.sendTransaction({from: acc1 , to: acc2, value: web3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/6.abigen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/6.abigen/</guid>
      <description>#智能合约转go代码abigen &amp;ndash;abi xx.abi &amp;ndash;pkg packageName &amp;ndash;type structName &amp;ndash;out xx.go
 .abi 文件在remix 部署后就能拿到 .pkg 指定文件输出包名 type 指定合约结构体名称 out 指定输出go文件名称  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>#智能合约的运行流程 编写智能合约代码，并编译成字节码。 部署智能合约。过程是向“0”地址发送一笔带有智能合约字节码数据的交易，这个交易会生成该智能合约的地址，并将字节码存储在该地址下的状态树中。 执行智能合约（调用智能合约函数）。向智能合约地址发送一个交易，该交易携带被调用的智能合约函数信息及调用参数，携带的信息遵循ABI编码协议。 智能合约地址收到这样的调用合约函数的交易，首先会解码数据，根据结果查找到对应函数的入口，再传入参数执行该函数。 执行函数的过程是状态转换的过程，执行完成后会扣除调用者相应的Gas花费。 状态转换的过程会全网同步并被再次执行验证，确保执行结果一致，这样通过验证后的交易会记录到区块中，同时更新状态数据。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8/</guid>
      <description> 运行geth 容器 运行remix容器 运行remixd，npm install remixd 连接本地solidity workspace  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/blockchain/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/blockchain/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>#官网下载geth 客户端geth 是由以太坊官方提供的 go 语言版本的客户端程序
#安装gcc windows下安装 mingw-w64#安装golang开发环境</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/C_CXX/clion%E7%BC%96%E8%AF%91arm64%E7%9A%84%E5%8A%A8%E6%80%81%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/C_CXX/clion%E7%BC%96%E8%AF%91arm64%E7%9A%84%E5%8A%A8%E6%80%81%E5%BA%93/</guid>
      <description>#配置环境第一次打开Clion,首先配置Toolchains,这里使用了Mingw
配置Cmake options,增加以下参数：
-DCMAKE_SYSTEM_NAME=Android-DANDROID_NDK=&amp;#34;E:\WorkRoom\android\sdk_root\ndk\22.1.7171670&amp;#34;-DANDROID_TOOLCHAIN_NAME=aarch64-linux-android-clang3.5-DCMAKE_TOOLCHAIN_FILE=&amp;#34;E:\WorkRoom\android\sdk_root\ndk\22.1.7171670\build\cmake\android.toolchain.cmake&amp;#34;-DANDROID_PLATFORM=&amp;#34;android-21&amp;#34;-DANDROID_TOOLCHAIN=&amp;#34;clang&amp;#34;-DCMAKE_C_FLAGS=&amp;#34;-fpic -fexceptions -frtti&amp;#34;-DCMAKE_CXX_FLAGS=&amp;#34;-fpic -fexceptions -frtti&amp;#34;-DANDROID_STL=&amp;#34;c++_static&amp;#34; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/C_CXX/CXX%E7%89%B9%E8%89%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/C_CXX/CXX%E7%89%B9%E8%89%B2/</guid>
      <description>#extern &amp;ldquo;C&amp;rdquo; 学习记录// A.cpp //告诉编译器这里修饰的是C语言的代码， extern &amp;#34;C&amp;#34; {  //在编译阶段，不会被编译成C++这样的fun_int_int符号，即使找不到函数也不会报错  void fun(int a,int b){   } } //B.cpp #include &amp;#34;A.h&amp;#34;int main(){  //对于C++来说，因为有函数重载的机制，编译后的函数会以 函数名 + 形参 来命名，  //对于C来说，没有函数重载，不会被转成fun_int_int这样的符号  fun(1,2); } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/C_CXX/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/C_CXX/main/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt;int main(int argc, char const *argv[]){printf(&#39;123&#39;);return 0;} </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/C_CXX/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/C_CXX/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81/</guid>
      <description>#原码反码补码的概念和理解#1. 原码原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:
 [+1]原 = 0000 0001
[-1]原 = 1000 0001
 第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:
 [1111 1111 , 0111 1111]
即
[-127 , 127]
 原码是人脑最容易理解和计算的表示方式.
#2. 反码反码的表示方法是:
正数的反码是其本身
负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.
 [+1] = [00000001]原 = [00000001]反
[-1] = [10000001]原 = [11111110]反
 可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.
#3. 补码补码的表示方法是:
正数的补码就是其本身
负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)
 [+1] = [00000001]原 = [00000001]反 = [00000001]补</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/C_CXX/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/C_CXX/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</guid>
      <description>#编译过程描述//生成预处理文件 g++ -o HelloWorld.ii -E HelloWorld.cpp //生成汇编文件
g++ -o HelloWorld.s -S HelloWorld.ii
//生成二进制也就是目标文件
g++ -o HelloWorld.o -c HelloWorld.s
//生成可执行文件 g++ -o HelloWorld.exe HelloWorld.o</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/mysql/mysqlconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/mysql/mysqlconfig/</guid>
      <description>#mysql 配置#首先查看centos是否已经安装了mysql源yum list installed mysql*如果有就删除yum remove mysql-community-* #安装mysql源https://dev.mysql.com/downloads/repo/yum/ wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm #安装mysqlyum -y install mysql57-community-release-el7-10.noarch.rpm #查看是否已经安装了数据库源yum repolist all | grep mysql #查看数据库源/etc/yum.repos.d/mysql-community.repo修改源可用 mysql80 enable = 1 #安装数据库服务yum install mysql-server #启动mysqlsystemctl start mysqld.service #查看状态systemctl status mysqld.service #查看初始密码grep &amp;#34;password&amp;#34; /var/log/mysqld.log #修改密码mysql&amp;gt; ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;new password&amp;#39;;mysql&amp;gt; ALTER USER &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;123456&amp;#39; 注意:密码设置必须要大小写字母数字和特殊符号（,/&amp;rsquo;;:等）,不然不能配置成功</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/mysql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/mysql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</guid>
      <description>修改配置文件，无密码登录 编辑文件：
/etc/mysql/mysq.conf.d/mysqld.cnf 加入skip-grant-tables 跳过密码登录；
重启mysql服务
systemctl restart mysql.service 进入mysql
# mysql;# use mysql;# 更新密码为空# UPDATE user SET authentication_string=&amp;#39;&amp;#39; WHERE User=&amp;#39;root&amp;#39; AND Host =&amp;#39;localhost&amp;#39;;# flush privileges;退出 注释掉skip-grant-tables
#重启mysql，无密码登录</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/mysql/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%BC%80%E5%90%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/mysql/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%BC%80%E5%90%AF/</guid>
      <description>#开启mysql的远程访问 两种方式 方式1  grant all privileges on *.* to &amp;#39;root&amp;#39;@&amp;#39;192.168.1.145&amp;#39; identified by &amp;#39;123456&amp;#39; with grant option; flush privileges;  方式2  use mysql;update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root&amp;#39;; 更细权限之后，一定要刷新一下，否则不会生效
flush privileges;  方式3   此处为设置root用户远程mysql -uroot -p #输入密码use mysql;update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root&amp;#39;;select host, user from user;flush privileges; #去掉配置文件中bind-addressbind-address = 127.0.0.1 # bind-address = 127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/postgresql/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/postgresql/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/</guid>
      <description>容器运行 postgres
docker run -itd --name=pg -p 5678:5432 -v /home/zouni/postgres:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -e ALLOW_IP_RANGE=0.0.0.0/0 --restart always POSTGRES_USER=&amp;#39;postgres&amp;#39; postgres  docker run -itd --name pg --restart always -e POSTGRES_USER=&amp;#39;postgres&amp;#39; -e POSTGRES_PASSWORD=123456 -e ALLOW_IP_RANGE=0.0.0.0/0 -v /home/zouni/postgres:/var/lib/postgresql -p 5432:5432 postgres  docker run -itd --name mpg --restart always -e TZ=PRC -e POSTGRES_USER=&amp;#39;root&amp;#39; -e POSTGRES_PASSWORD=&amp;#39;123456&amp;#39; -e POSTGRES_DB=&amp;#39;mytest&amp;#39; -e ALLOW_IP_RANGE=0.0.0.0/0 -v /home/zouni/postgres/data:/var/lib/postgresql/data -p 5432:5432 postgres docker run -itd &amp;ndash;name mpg &amp;ndash;restart always -e TZ=PRC -e POSTGRES_USER=&amp;lsquo;root&amp;rsquo; -e POSTGRES_PASSWORD=&amp;lsquo;123456&amp;rsquo; -e POSTGRES_DB=&amp;lsquo;mytest&amp;rsquo; -e ALLOW_IP_RANGE=0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/postgresql/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/postgresql/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>#表字段使用geography报错因为要使用地理坐标来表示附近用户，需要空间坐标转换
 type &amp;ldquo;geography&amp;rdquo; does not exist 解决方法： CREATE EXTENSION Postgis;
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/postgresql/%E6%97%B6%E5%8C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/postgresql/%E6%97%B6%E5%8C%BA/</guid>
      <description>#时区设置  第一种方法   如果不好使，再换第二种方法：
  serverTimezone Asia/Shanghai </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/postgresql/%E8%A6%81%E7%82%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/postgresql/%E8%A6%81%E7%82%B9/</guid>
      <description>相当与mysql的show databases;  select datname from pg_database; 相当于mysql的show tables;  SELECT table_name FROM information_schema.tables WHERE table_schema = &amp;#39;public&amp;#39;; public 是默认的schema的名字
相当与mysql的describe table_name;  SELECT column_name FROM information_schema.columns WHERE table_name =&amp;#39;table_name&amp;#39;; &amp;rsquo;table_name&amp;rsquo;是要查询的表的名字</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/database/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/database/sql/</guid>
      <description>#常用sql删除字段
 alter table users drop column col_name;
 修改字段数据类型
 alter table users alter column col_name new_type;
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/1.docker%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/1.docker%E5%AE%89%E8%A3%85/</guid>
      <description>#1. Windows 安装步骤  安装： 官网下载 https://hub.docker.com/对应版本
  设置：
 修改 registry-mirrors 镜像地址  https://reg-mirror.qiniu.com http://hub-mirror.c.163.com/ https://registry.docker-cn.com      {&amp;#34;registry-mirrors&amp;#34;:[&amp;#34;https://reg-mirror.qiniu.com&amp;#34;,&amp;#34;http://hub-mirror.c.163.com/&amp;#34;,&amp;#34;https://registry.docker-cn.com&amp;#34;],&amp;#34;builder&amp;#34;: {&amp;#34;gc&amp;#34;: {&amp;#34;defaultKeepStorage&amp;#34;: &amp;#34;20GB&amp;#34;,&amp;#34;enabled&amp;#34;: true}},&amp;#34;experimental&amp;#34;: false,&amp;#34;features&amp;#34;: {&amp;#34;buildkit&amp;#34;: true}} #2. CentOS 安装步骤#官网https://docs.docker.com/engine/install/centos/#prerequisites 先卸载旧版本
sudo yum remove docker \docker-client \docker-client-latest \docker-common \docker-latest \docker-latest-logrotate \docker-logrotate \docker-engine 安装yum-utils软件包（提供yum-config-manager 实用程序）并设置稳定的存储库。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/2.docker%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/2.docker%E6%93%8D%E4%BD%9C/</guid>
      <description>#镜像操作： 从仓库搜索镜像：docker search image-name
搜索结果过滤:  	#是否是官方提供：  	docker search --filter &amp;#34;is-official=true&amp;#34; image_name 	# 是否是自动化构建：  	docker search --filter &amp;#34;is-automated=true&amp;#34; image_name 	# 大于多少个`star`  	docker search --filter stars=3 image_name 下载镜像： docker pull image_name 本地镜像的查看：  docker images 删除：  docker rmi image_name 修改镜像名字：  docker tag images_id 要推送的主机地址/镜像名：版本号 push到docker仓库  # 前提是已经在docker服务注册并创建了仓库 docker push 刚刚修改的镜像名字（要推送的主机地址/镜像名：版本号）这一长串 #容器基本操作： 查看容器：  docker ps 创建容器:  docker run -itd --name=container_name images_name  -i: 以交互模式运行容器;	-d: 后台运行;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/3.%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/3.%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8/</guid>
      <description>创建容器：
docker run -itd --name=container_name images_name 常用参数说明：
-p 88:80 端口映射：
88:宿主机端口 80:容器端口docker run -itd --name=ct_name -p 88:80 img_name -v : 文件挂载(宿主机文件目录：容器文件目录)
-itd
 -i: 以交互模式运行容器;	-d: 后台运行;
-t: 为容器重新分配一个伪输入终端;
 --name
 &amp;ndash;name: 容器名字;
 ``</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>#启动失败查看日志
docker logs -f -t --tail 20 nginx #操作无权限 aa-remove-unknown
 #修改容器端口映射 编辑容器配置文件 /var/lib/docker/containers/{containersid}/hostconfig.json  root@zouni:/var/lib/docker/containers/572a9b8574dcc5077c7c4ec139e4e044e80696f78d1e658d0e735e183944cd28# ls 572a9b8574dcc5077c7c4ec139e4e044e80696f78d1e658d0e735e183944cd28-json.log hostconfig.json mounts checkpoints hostname resolv.conf config.v2.json hosts resolv.conf.hash ！！先关掉docker,然后修改其中绑定的端口,重启docker就可以了
 ,&amp;ldquo;PortBindings&amp;rdquo;:{&amp;ldquo;5432/tcp&amp;rdquo;:[{&amp;ldquo;HostIp&amp;rdquo;:&amp;quot;&amp;quot;,&amp;ldquo;HostPort&amp;rdquo;:&amp;ldquo;8099&amp;rdquo;}]}
 #端口映射，本地可以访问，远程不能访问！！！ 检查防火墙  #查看防火墙状态，运行中 root@zouni:/# firewall-cmd --state running #查看放开的端口，开放这几个端口，8088为放开 root@zouni:/# firewall-cmd --list-all You&amp;#39;re performing an operation over default zone (&amp;#39;public&amp;#39;), but your connections/interfaces are in zone &amp;#39;docker&amp;#39; (see --get-active-zones) You most likely need to use --zone=docker option.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/DockerFile/alpine-%E5%9D%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/DockerFile/alpine-%E5%9D%91/</guid>
      <description>#安装uwsgi 报各种 致命错误 缺少c编译器  File &amp;#34;uwsgiconfig.py&amp;#34;, line 742, in __init__  raise Exception(&amp;#34;you need a C compiler to build uWSGI&amp;#34;) Exception: you need a C compiler to build uWSGI 首次安装软件，需要先更新源。
apk update apk add gcc 执行pip3 install uWSGI  In file included from core/socket.c:1:0: ./uwsgi.h:165:19: fatal error: stdio.h: No such file or directory compilation terminated. In file included from core/logging.c:2:0: ./uwsgi.h:165:19: fatal error: stdio.h: No such file or directory compilation terminated.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/DockerFile/alpine%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/DockerFile/alpine%E9%95%9C%E5%83%8F/</guid>
      <description>alpine 启动没有/bin/bash docker
alpine软件安装
apk add python3 修改成aliyun源
  vi /etc/apk/repositories https://mirrors.aliyun.com/alpine/   or
sed 命令修改 仓库文件
 sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories  阿里云镜像源地址：https://developer.aliyun.com/mirror/ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/DockerFile/command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/DockerFile/command/</guid>
      <description>DockerFile 分为四部分：基础镜像、维护者、镜像操作指令、容器启动时执行指令
WORKDIR 指定工作目录，类似于 cd,定位到某一个目录
WORKDIR /usr/local/nginx RUN 构建镜像时运行指令
RUN apk add nginx &amp;amp;&amp;amp; mkdir /run/nginx/ 构建指令：
docker build -f dockerfile-path . </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/DockerFile/%E8%BF%90%E8%A1%8Cdockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/DockerFile/%E8%BF%90%E8%A1%8Cdockerfile/</guid>
      <description>#运行构建dockerfile -f 指定dockerfile 文件构建镜像  docker build -f D:\docker\dockerfile\Dockerfile -t  docker build -t image_name:tag . </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/docker%E6%96%87%E4%BB%B6%E6%8C%82%E8%BD%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/docker%E6%96%87%E4%BB%B6%E6%8C%82%E8%BD%BD/</guid>
      <description>#文件挂载 docker run -itd &amp;ndash;name=small_nginx -p 8888:80 -v d:/index.html:/usr/share/nginx/html/index.html small/nginx
  -v 表示： 宿主机文件路径：容器文件路径 -p 表示: 宿主机ip:容器ip  这里修改了nginx默认启动页面关联到本地
#文件目录挂载 docker run -itd &amp;ndash;name=small_mysql -p 33066:3306 -v d:/docker/mysql/:/var/lib/mysql/ -e MYSQL_ROOT_PASSWORD=123456 mysql
  -e 表示：向容器内传参，ex:设定数据库密码：MYSQL_ROOT_PASSWORD=123456  docker run -itd &amp;ndash;name=flask_mysql -p 33066:3306 -v /var/lib/mysql:/var/lib/mysql/ -e MYSQL_ROOT_PASSWORD=123456 mysql</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/nginx/%E6%9E%84%E5%BB%BAnginx%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/nginx/%E6%9E%84%E5%BB%BAnginx%E5%AE%B9%E5%99%A8/</guid>
      <description>docker run -itd --name=nginx -p 80:80 -p 443:443 -v /usr/local/small/nginx/conf.d:/etc/nginx/conf.d -v /usr/local/small/web/facepark/static:/root/web/facepark/static nginx:2.0 docker run -itd --name=nginx -p 8088:80 -p 443:443 -v /home/zouni/nginx/conf.d:/etc/nginx/conf.d -v /home/zouni/web/static:/root/web/static nginx:2.0 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/pycharm%E4%BD%BF%E7%94%A8docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/pycharm%E4%BD%BF%E7%94%A8docker/</guid>
      <description>docker打开设置
Expose daemon on tcp://localhost:2375 without TLS
设置连接docker 显示Connection successfull 表示连接成功了
接下来配置python 解释器 如果已经创建了容器，就会自动加载</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/redis/redis%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/redis/redis%E9%85%8D%E7%BD%AE/</guid>
      <description>docker run -p 6379:6379 &amp;ndash;name redis -v /root/redis/redis.conf:/etc/redis/redis.conf -v /root/redis/data:/data -d redis redis-server /etc/redis/redis.conf &amp;ndash;appendonly yes</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/%E5%88%9B%E5%BB%BAmysql%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/%E5%88%9B%E5%BB%BAmysql%E5%AE%B9%E5%99%A8/</guid>
      <description>#下载镜像# 官方提供的mysql镜像docker pull mysql #创建容器docker run -itd --name=mysql_wxc -p 3306:3306 -v E:\mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql  -p 指定3306端口映射宿主机 -v 数据库文件映射到宿主机 -e 指定参数 ‘MYSQL_ROOT_PASSWORD’ 设置数据库密码  #进入容器docker exec -it mysql_wxc bash </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94/</guid>
      <description>#容器互联docker run -itd --name=small_nginx --link container_name:alias -v path:local_path image_name  &amp;ndash;link 表示：被挂载容器名：别名  docker run -itd --name=flask_t -p 81:80 --link flask_mysql:flask_mysql -v /root/small/mysql/:/var/lib/mysql flask:1.2 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/docker/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/docker/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
      <description>#搭建本地仓库#搜索 官方仓库docker search registry #下载仓库docker pull registry #创建容器docker run -d -p 5000:5000 --restart=always --privileged=true --name=registry-small -v d:/docker/registry:/var/lib/registry registry #修改镜像，准备推送 到仓库容器docker tag image_id registry_name:port/images_name #修改hosts 增加 域名127.0.0.1 registry_name #推送镜像到私有仓库docker push registry_name:port/images_name #查看镜像是否推送成功windows 浏览器 可以直接打开
 http://127.0.0.1:5000/v2/_catalog
 查看版本号
 http://127.0.0.1:5000/v2/alpine/tags/list
 linux 查看同样的方法 用命令查看
curl -X GET http://127.0.0.1:5000/v2/_catalog </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/embedded/51/%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/embedded/51/%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9B%E5%BB%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/embedded/stm32/clion%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/embedded/stm32/clion%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>#clion+ stm32 开发环境搭建参考jetbrains官方指导
#准备#1. clion#2. gcc-arm-none-eabi下载 gcc-arm-none-eabi-10.3-2021.10-win32.exe 一键安装：最后一步勾选（path添加到环境变量，否则编译程序找不到编译器）
#3. mingw-get-setup.exe安装之后，配置clion Toolchains 环境就可以了
#4. stm32cubemx-win.zip这一步没什么特殊 一键安装
#5. OpenOCD#5.1 openOCD 配置配置ST-link烧写器配置文件 stm32f103_stlink.cfg
source [find interface/stlink.cfg]transport select hla_swdsource [find target/stm32f1x.cfg]adapter speed 2000 // adapter_khz 2000 保存到openOCD脚本目录下： D:\WorkRoom\embedded\stm32\OpenOCD-20210729-0.11.0\share\openocd\scripts\board</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/embedded/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/embedded/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</guid>
      <description>#串口引脚定义 DTR : 数据终端准备好 RTS: 请求发送 RXD: 接收 TXD: 发送 CTS: 清除发送  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/embedded/%E5%90%84%E7%A7%8D%E7%94%B5%E5%B9%B3%E6%A0%87%E5%87%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/embedded/%E5%90%84%E7%A7%8D%E7%94%B5%E5%B9%B3%E6%A0%87%E5%87%86/</guid>
      <description>#TTL  输出 1 :=&amp;gt; 电压大于等于 2.4v 0 :=&amp;gt; 电压小于等于 0.4v
  输入 1 :=&amp;gt; 电压大于等于2.0v 0 :=&amp;gt; 电压小于等于0.8v
  TTL器件输出低电平要小于0.8V，高电平要大于2.4V。输入，低于1.2V就认为是0，高于2.0就认为是1。于是TTL电平的输入低电平的噪声容限（噪声容限是指在前一极输出为最坏的情况下，为保证后一极正常工作，所允许的最大噪声幅度 。噪声容限越大说明容许的噪声越大，电路的抗干扰性越好 。）就只有（0.8-0）/2=0.4V，高电平的噪声容限为（5-2.4）/2=1.3V。
#CMOS  输出 L：0 &amp;lt;0.1Vcc ； 1 H：&amp;gt;0.9Vcc。
  输入 L：0 &amp;lt;0.3Vcc ； 1 H：&amp;gt;0.7Vcc.
  由于CMOS电源采用12V，则输入低于3.6V为低电平，噪声容限为1.8V，高于3.5V为高电平，噪声容限高为1.8V。比TTL有更高的噪声容限。
CMOS电平能够驱动TTL电平；
TTL电平不能驱动CMOS电平，需要加上拉电阻
#RS232 逻辑1的电平为-3～-15V，逻辑0的电平为+3～+15V，注意电平的定义反相了一次。  RS232的电平标准为+12V为逻辑负，-12为逻辑正，TTL电平为5V为逻辑正，0为逻辑负
#RS485 RS485采用差分信号负逻辑，逻辑&amp;quot;1”以两线间的电压差为-(2~6)V表示;逻辑&amp;quot;0&amp;quot;以两线间的电压差为+(2~6)V表示。  TTL接口电平常见的有3.3V和5V的。通过在0和TTL电平之间摆动，来传输数据。需要通讯双方“约定”好速率。也就是说，通过TTL电平传输的UART接口是一种不传输时钟的&amp;quot;异步通讯&amp;quot;方式。
而RS485接口，简单说就是把TTL的“0-3.3V/5V之间摆动”的信号，转换为“5V压差颠倒反转的AB线信号”，并且扩流驱动电缆电容。简单说就是这样。
所以可以理解为，RS485是以TTL数据源的总线驱动芯片。
RS485采用差分信号逻辑，更适合长距离、高速传输。
接口信号电平比RS-232-C降低了，就不易损坏接口电路的芯片， 且该电平与TTL电平兼容，可方便与TTL电路连接。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ffmpeg/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ffmpeg/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>#1. 交叉编译 ffmpeg -&amp;gt; aarch64#1.1参数说明：--cross-prefix 指定交叉编译工具链路径--arch 指定cpu指令集架构--target-os 目标系统 linux--cc c 编译器 默认：cc 这里指定clang google官方已经在ndk去掉了gcc--enable-cross-compile 开启交叉编译--disable-static 关闭静态编译--enable-shared 开启shared表示编译动态链接库--disable-ffmpeg 不开启ffmpeg 模块--disable-ffplay 不开启ffplay 播放器模块--disable-ffprobe 不开启ffprobe 音视频分析模块 #1.2设置环境变量NDK版本：android-ndk-r22b
export NDK_ROOT=/mnt/e/WorkRoom/ubuntu/android-ndk-r22b/toolchains/llvm/prebuilt/linux-x86_64 export SYSROOT=$NDK_ROOT/sysroot #1.3 执行 ./configure需要注意：新版本ndk工具链取消了gcc编译器，默认编译器是clang,配置项目里面需要指定c/c++ 编译器
 &amp;ndash;cc=$NDK_ROOT/bin/armv7a-linux-androideabi21-clang &amp;ndash;cxx=$NDK_ROOT/bin/armv7a-linux-androideabi21-clang++
 完整的编译参数如下：
small@small:~$ ./configure \ --prefix=/mnt/e/WorkRoom/ffmpeg/ffarm \ --arch=aarch64 \ --cpu=armv8 \ --target-os=android \ --sysroot=$SYSROOT \ --cross-prefix=$NDK_ROOT/bin/aarch64-linux-android- \ --extra-cflags=&amp;#34;-I$SYSROOT/usr/include -fPIC -DANDROID -mfpu=neon -mfloat-abi=softfp &amp;#34; \ --extra-ldflags=&amp;#34;-L$SYSROOT/usr/lib&amp;#34; \ --cc=$NDK_ROOT/bin/aarch64-linux-android21-clang \ --nm=$NDK_ROOT/bin/aarch64-linux-android-nm \ --cxx=$NDK_ROOT/bin/aarch64-linux-android21-clang++ \ --enable-runtime-cpudetect \ --enable-neon \ --enable-shared \ --enable-asm \ --disable-static \ --enable-cross-compile \ --enable-small \ --enable-jni \ --enable-mediacodec \ --enable-gpl \ --enable-decoder=h264_mediacodec \ --disable-doc \ --disable-debug \ --disable-ffmpeg \ --disable-ffplay \ --disable-ffprobe \ --disable-postproc \ --disable-avdevice \ --disable-symver \ --disable-stripping # --enable-hwaccel=h264_mediacodec \# --enable-asm \ armv7-a</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ffmpeg/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ffmpeg/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>输入视频，输出转码后的视频
 ffmpeg -i intput.mp4 output.mp4
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ffmpeg/%E6%8E%A8%E6%B5%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ffmpeg/%E6%8E%A8%E6%B5%81/</guid>
      <description>参考文章：https://zhuanlan.zhihu.com/p/73984438</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ffmpeg/%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ffmpeg/%E7%BC%96%E8%AF%91/</guid>
      <description>#linux 编译 ffmpeg  下载源码
下载ffmpeg源码 或者通过git clone源码：
git clone git@github.com:FFmpeg/FFmpeg.git   进入源码根目录，执行./configure 出现如下错误：
nasm/yasm not found 需要下载yasm汇编器
  下载yasm汇编器
wget https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz 解压安装 :
tar -zxvf yasm-1.3.0.tar.gz 进入解压后目录
cd yasm-1.3.0./configure# 接着 make sudo make install 接着返回 ffmpeg目录，执行命令
small@small:~/FFmpeg$./configure --prefix=&amp;#34;/usr/local/ffmpeg/&amp;#34; --enable-libx264 --enable-gpl --enable-nonfree --enable-libfdk-aac 出现如下显示就代表成功了：
small@small:~/FFmpeg$ ./configure install prefix /usr/local source path . C compiler gcc C library glibc ARCH x86 (generic) big-endian no runtime cpu detection yes standalone assembly yes x86 assembler yasm MMX enabled yes MMXEXT enabled yes 3DNow!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/1.setup/3.vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/1.setup/3.vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>#常用快捷键 创建项目：ctrl+shift+P 代码提示：ctrl+I  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/1.setup/Android%E6%B7%B7%E5%90%88fluttermodule%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/1.setup/Android%E6%B7%B7%E5%90%88fluttermodule%E5%BC%80%E5%8F%91/</guid>
      <description>#新建flutter module#1. module 的 settings.gradle ：// Generated file. Do not edit.include &amp;#39;:app&amp;#39;//复制下面内容到主项目的 settings.gradle 中rootProject.name = &amp;#39;android_generated&amp;#39;setBinding(new Binding([gradle: this]))//这里模块名称修改成自己的，参考下图evaluate(new File(settingsDir, &amp;#39;include_flutter.groovy&amp;#39;)) 效果： #2. 引入依赖 在工程app/build.gradle 中：dependencies {implementation project(&amp;#39;:flutter&amp;#39;)} #3. 编译运行：失败#Caused by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin class &amp;lsquo;FlutterPlugin&amp;rsquo;.这是一个非常不明所以的问题：android 集成flutter module时，按照官网说明完毕必会出现
病根：参照下面settings.gradle文件
pluginManagement {  repositories {  gradlePluginPortal()  google()  mavenCentral()  } } dependencyResolutionManagement {  // 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/1.setup/web%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/1.setup/web%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid>
      <description>#flutter 2.0 已经正式支持了web，不需要用下面方式单独启用web开发支持#flutter web 开发  开启web支持 (正式版默认启用)
 flutter config &amp;ndash;enable-web
   再次 执行环境检查
 flutter doctor
   一切正常之后,正常创建项目，会多出一个web文件夹
以前旧的项目可以执行以下命令：
 flutter create .
   运行在浏览器看下效果：
 flutter run -d edge
 我这里用的 microsoft edge 浏览器
  打包
 flutter build web
  flutter build web &amp;ndash;release //生产环境打包
 可以看到 build 目录下多出一个web 文件夹
  #flutter web 常见问题Finished with error: Failed to bind web development server:SocketException: Failed to create server socket (OS Error: Failed to start accept), address = localhost, port = 53041</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/1.setup/windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/1.setup/windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>#flutter for windows 环境配置 开启 flutter for windows  flutter config --enable-windows-desktop 下载 visual studio 社区版本 安装过程如下所示：  3. 运行flutter doctor，没有问题的话，就完成了环境配置 4. 运行，打完收工
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/1.setup/%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/1.setup/%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>#flutter 初体验#1. 下载flutter sdk#2. 配置环境变量E:\WorkRoom\android\flutter\flutter\bin添加到path中 运行命令：
flutter doctor #这一步有可能卡在 Running pub upgrade... 解决办法：# 配置环境变量，国内镜像 PUB_HOSTED_URL=https://pub.flutter-io.cn FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn 许可证的问题，not accepted,那就让他ok，根据提示输入命令：
flutter doctor --android-licenses 一路yes到底，最后再检查一次就 ok 了 #3. 配置IDEvscode 配置 ：搜索 安装flutter插件
android studio : 安装flutter插件
 接着运行 flutter doctor
 手动更新依赖包：
 flutter packages get  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/1.setup/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/1.setup/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>#1. Running Gradle task &amp;lsquo;assembleDebug&amp;rsquo;&amp;hellip;===============================================
卡在 Running Gradle task &amp;lsquo;assembleDebug&amp;rsquo;&amp;hellip; 不动
解决方案：
 检查 ./gradle 是否下载成功 检查 gradle 默认代理是否正常
gradle 配置文件默认在 ~/.gradle/gradle.properties 注释掉下面几行代码即可：  # Sun Jul 05 10:38:23 CST 2020 # systemProp.http.proxyHost=127.0.0.1 # systemProp.http.proxyPort=50030 # systemProp.https.proxyHost=127.0.0.1 # systemProp.https.proxyPort=50030 #2. flutter doctor 异常==================================== android sdk platforms 下载失败 检查网络代理，是否能正常访问 https://dl.google.com
#3. Caused by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin class &amp;lsquo;FlutterPlugin&amp;rsquo;.这是一个非常不明所以的问题：android 集成flutter module时，按照官网说明完毕必会出现
#4. 非空检查相关异常：Error: Cannot run with sound null safety, because the following dependencies flutter run &amp;ndash;no-sound-null-safety</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/2.0web%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/2.0web%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>#最近在做一个 Flutter 2.0 for Web 的项目，在项目打开第一次运行的时候，总是要等很久才能看到效果.#经过一番研究发现是 Flutter 使用的一个渲染引擎 Canvaskit 下载太慢导致的.#解决方法#Canvaskit 是一个 js 框架，Flutter 定义默认是从 https://unpkg.com 去加载的，在国内最好是改变这个地址，让它通过镜像地址去加载.#编译发布修改在 {SDK_PATH}/bin/cache/flutter_web_sdk/lib/_engine/engine/canvaskit/initialization.dart 文件中有定义:
/// The URL to use when downloading the CanvasKit script and associated wasm. /// /// The expected directory structure nested under this URL is as follows: /// /// /canvaskit.js - the release build of CanvasKit JS API bindings /// /canvaskit.wasm - the release build of CanvasKit WASM module /// /profiling/canvaskit.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/2.dart/async%E5%92%8Cawait/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/2.dart/async%E5%92%8Cawait/</guid>
      <description>dart异步： dart是单线程模型，任何耗时操作都会阻塞；通过返回一个Future来接收耗时任务返回结果：future.then();
import &amp;#39;dart:io&amp;#39;;  void main(List&amp;lt;String&amp;gt; args) {  print(&amp;#34;main方法开始执行&amp;#34;);  Future fu = testAsync(&amp;#34;&amp;#34;);  fu.then(  (value) =&amp;gt; print(&amp;#34;执行结果：${value}&amp;#34;),  );  //sleep(Duration(seconds: 2));  print(&amp;#39;main方法结束&amp;#39;); }  Future testAsync(args) async {  print(&amp;#34;开始执行异步方法&amp;#34;);  return Future(requestHttp);  // print(&amp;#34;异步任务结束&amp;#34;); }  String requestHttp() {  sleep(Duration(seconds: 2));  print(&amp;#34;请求http结束&amp;#34;);  return &amp;#34;success&amp;#34;; } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/2.dart/final%E5%92%8Cconst%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/2.dart/final%E5%92%8Cconst%E5%8C%BA%E5%88%AB/</guid>
      <description>#final和const区别final：修饰变量，初始化之后不可改变值
 final name = &amp;lsquo;zhangsan&amp;rsquo;;
 const：修饰常量
 const name = &amp;lsquo;zhangsan&amp;rsquo;;
 const常量值必须在编译期确定
 var zhangsan = 12;  var lisi = 13;  const sum = zhangsan + lisi; //error  final sum = zhangsan + lisi; //ok </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/drawimage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/drawimage/</guid>
      <description>自定义画板,canvas
 drawImageRect函数使用
drawImageRect(Image image, Rect src, Rect dst, Paint paint)
 image: 传入图片
src: 这里相当于画布的前景，这里是将给定大小的src，绘制到指定的dst矩形上面去
dst: 这里相当于画布，用来绘制src
 @override  void paint(Canvas canvas, Size size) {  if (image != null) {  canvas.clipPath(Path()  ..moveTo(0 + dx, 0 + dy)  ..lineTo(scan + dx, 0 + dy)  ..lineTo(scan + dx, scan + dy)  ..lineTo(0 + dx, scan + dy));  var imgh = size.width / (image.width / image.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/%E5%B8%B8%E7%94%A8%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/%E5%B8%B8%E7%94%A8%E5%BA%93/</guid>
      <description>#常用库展示 http   _get() async {  var url = &amp;#39;www.zouni.vip&amp;#39;;  // Await the http get response, then decode the json-formatted response.  var response = await get(url);  if (response.statusCode == 200) {  var res = response.body.toString();  print(&amp;#39;Number of books about http: $res&amp;#39;);  } else {  print(&amp;#39;Request failed with status: $ {response.statusCode}.&amp;#39;);  }  } url_launcher;   _launchURL() async {  const url = &amp;#39;https://flutter.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/flutter/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/flutter/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/</guid>
      <description>参考文章： https://blog.csdn.net/tianhai110/article/details/2203572 https://www.jianshu.com/p/8f82db9556d2</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/1.%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/1.%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/</guid>
      <description>#1. 生成公钥ssh-keygen -t rsa -C &amp;#34;xxxxx@xxxxx.com&amp;#34; 或 ssh-keygen -t ed25519 -C &amp;#34;xxxxx@xxxxx.com&amp;#34; 两种操作一样只是生成密钥的方式不同
#2. 查看公钥cat ~/.ssh/id_rsa.pub PS C:\Users\sss&amp;gt; cat ~/.ssh/id_ed25519.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL7iL5mVSeEYnMJvNhpTxZR/rv2WApe2+IkfL4iXlfCu xxxxx@xxx.com </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/2.%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/2.%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>#将本地项目提交到远程仓库需要以下操作：#1. 本地提交git init 初始化本地仓库 git add . git commit -m &amp;#34;###&amp;#34; #2. 添加目标仓库地址git remote add origin git@xx.xx.xx.xx:repos/xxx/xxx/xxx.git #3. 同步到远程仓库，先 pull 后 push//允许一些无关联的历史	git pull origin master --allow-unrelated-histories git push origin 本地分支:远程分支 #修改远程仓库地址3种方式#1. 直接修改git remote set-url origin [url] git remote set-url --add origin [url] #2. 先删除后修改 删除
 git remote rm origin #查看 remote url git remote -v
 #3. 直接修改项目目录下.git 文件夹下config配置文件[core]repositoryformatversion = 0filemode = falsebare = falselogallrefupdates = truesymlinks = falseignorecase = true[remote &amp;#34;origin&amp;#34;]url = git@gitee.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/3.branch-tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/3.branch-tag/</guid>
      <description>#branch#创建分支 git branch dev
 #切换分支 git checkout dev
 #提交分支 git push origin dev
 #合并分支先切换到要合并的分支
 git checkout master 同步代码 git pull origin master 合并代码 git merge dev 这样dev分支就合并到了master
 #删除本地分支 git branch -d branchname
 #强制删除分支 -D git branch -D branchname
 #删除远程分支 git push origin &amp;ndash;delete branchname
 #tag#附注标签 ： git tag -a versionCode -m “1.2版本”</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/4.%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/4.%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/</guid>
      <description>#撤销撤销是在本地，回滚是操作远程
 在工作区的代码  git checkout -- a.txt # 丢弃某个文件，或者  git checkout -- . # 丢弃全部 注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。
代码git add到缓存区，并未commit提交  ## 将本地commit的内容撤回，修改的文件内容不会消失 git reset HEAD~ git reset HEAD . #或者 git reset HEAD a.txt 这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化
文件执行了git add操作，但想撤销对其的修改（index内回滚）  # 取消暂存 git reset HEAD fileName # 撤销修改 git checkout fileName 修改的文件已被git commit，但想再次修改不再产生新的Commit  # 修改最后一次提交 git add sample.txt git commit --amend -m&amp;#34;说明&amp;#34; 已在本地进行了多次git commit操作，现在想撤销到其中某次Commit  git reset [--hard|soft|mixed|merge|keep] [commit|HEAD] #已add，但是没commitgit reset HEAD~ #已commit，不改变代码，仅仅只是想取消这个操作git reset --soft HEAD^ # ^ 一次提交 ^^ 两次提交 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/5.%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/5.%E5%9B%9E%E6%BB%9A/</guid>
      <description>#回滚 （回滚是远程仓库操作，撤销是本地操作）已进行git push，即已推送到远程仓库中。我们将已被提交到“远程仓库”的代码还原操作叫做回滚！
 注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！
 #1. 撤销指定文件到指定版本# 查看指定文件的历史版本 git log &amp;lt;filename&amp;gt; # 回滚到指定commitID git checkout &amp;lt;commitID&amp;gt; &amp;lt;filename&amp;gt; #2. 删除最后一次远程提交  使用revert
git revert HEAD git push origin master   使用reset
git reset --hard HEAD^ git push origin master -f   二者区别：
 revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在； reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。  #回滚某次提交# 找到要回滚的commitID git log git revert commitID #删除某次提交git log --oneline -n5 git rebase -i &amp;#34;commit id&amp;#34;^ 注意：需要注意最后的^号，意思是commit id的前一次提交</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/6.%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/6.%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</guid>
      <description>#删除文件夹git rm --cached -r dir_name #删除文件git rm --cached filename #删除后不用git add 直接提交git commit -m &amp;quot;desc&amp;quot;  #提交git push </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/gitee%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/gitee%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>#第一次使用git，没有环境？#1. 先安装git#2. 生成公钥，用来添加到远程仓库 生成公钥  # 生成公钥，然后一路回车 ssh-keygen -t rsa -C &amp;#34;cao_cgq@163.com&amp;#34; 查看公钥   #3. 复制公钥，打开码云-&amp;gt; 个人头像点设置-&amp;gt;找到安全设置-&amp;gt;SSH公钥添加完公钥之后，就可以接下来的步骤了
#怎么样将代码提交到远程仓库#1. 在码云新建仓库，beego_first#2. 本地项目路径下初始化仓库git init #3. 本地项目添加远程仓库# git remote add origin 仓库地址 git remote add origin git@gitee.com:SmallMrCao/beego_first.git #4. 添加完之后先pull，然后再addgit pull git add * 出现这个问题，说明在add之前没有pull，需要执行以下命令，把无关的内容pull下来
git pull origin master --allow-unrelated-histories #5. 最后执行提交就完成了git push </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/gitlab/</guid>
      <description>#gitlab 删除默认main 分支 将默认分支修改为master
Settings -&amp;gt; Repository -&amp;gt; Default branch Repository -&amp;gt; Branches -&amp;gt; 删除  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/submodule/</guid>
      <description>#拉取主仓库同步主项目加上 --recurse-submodules 递归拉取子项目
git clone git@github.com:smallcgq/xbook.git --recurse-submodules #添加其他仓库到当前仓库git submodule add https://github.com/alex-shpak/hugo-book themes/bookgit clone https://github.com/alex-shpak/hugo-book --recursive  添加完成项目根目录下会多出一个 .gitmodules 文件  #同步其他仓库更新//一步到位，不用挨个查找，直接遍历一遍git submodule foreach git pull #删除submodulegit submodule deinit themes/book </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/git/%E4%B8%BB%E8%A6%81%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/git/%E4%B8%BB%E8%A6%81%E7%9B%AE%E5%BD%95/</guid>
      <description>#主要目录介绍 / ：根目录，所有的目录、文件、设备都在/之下，/就是Linux文件系统的组织者，也是最上级的领导者。 /bin ：bin 就是二进制（binary）英文缩写。在一般的系统当中，都可以在这个目录下找到linux常用的命令。系统所需要的那些命令位于此目录。 /boot ：Linux的内核及引导系统程序所需要的文件目录，比如 vmlinuz initrd.img 文件都位于这个目录中。在一般情况下，GRUB或LILO系统引导管理器也位于这个目录。 /cdrom ：这个目录在刚刚安装系统的时候是空的。可以将光驱文件系统挂在这个目录下。例如：mount /dev/cdrom /cdrom /dev ：dev 是设备（device)的英文缩写。这个目录对所有的用户都十分重要。因为在这个目录中包含了所有linux系统中使用的外部设备。但是这里并不是放的外部设备的驱动程序。这一点和常用的windows,dos操作系统不一样。它实际上是一个访问这些外部设备的端口。可以非常方便地去访问这些外部设备，和访问一个文件，一个目录没有任何区别。 /etc ：etc这个目录是linux系统中最重要的目录之一。在这个目录下存放了系统管理时要用到的各种配置文件和子目录。要用到的网络配置文件，文件系统，x系统配置文件，设备配置信息，设置用户信息等都在这个目录下。 /home：如果建立一个用户，用户名是&amp;quot;xx&amp;quot;,那么在/home目录下就有一个对应的/home/xx路径，用来存放用户的主目录。 /lib：lib是库（library）英文缩写。这个目录是用来存放系统动态连接共享库的。几乎所有的应用程序都会用到这个目录下的共享库。因此，千万不要轻易对这个目录进行什么操作，一旦发生问题，系统就不能工作了。 /lost+found ：在ext2或ext3文件系统中，当系统意外崩溃或机器意外关机，而产生一些文件碎片放在这里。当系统启动的过程中fsck工具会检查这里，并修复已经损坏的文件系统。正在上传、重新上传、取消Linux系统有时系统发生问题，有很多的文件被移到这个目录中，可能会用手工的方式来修复，或移到文件到原来的位置上。 /mnt ：这个目录一般是用于存放挂载储存设备的挂载目录的，比如有cdrom等目录。可以参看/etc/fstab的定义。 /media ：有些linux的发行版使用这个目录来挂载那些usb接口的移动硬盘（包括U盘）、CD/DVD驱动器等等。 /opt ：这里主要存放那些可选的程序。 /proc ：可以在这个目录下获取系统信息。这些信息是在内存中，由系统自己产生的。 /root ：Linux超级权限用户root的家目录。 /sbin ：这个目录是用来存放系统管理员的系统管理程序。大多是涉及系统管理的命令的存放，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令，这个目录和/usr/sbin ：/usr/X11R6/sbin或/usr/local/sbin目录是相似的，凡是目录sbin中包含的都是root权限才能执行的。 /selinux ：对SElinux的一些配置文件目录，SElinux可以让linux更加安全。 /srv ： 服务启动后，所需访问的数据目录，举个例子来说，www服务启动读取的网页数据就可以放在/srv/www中 /sys ：Linux 内核中设计较新的一种虚拟的基于内存的文件系统，它的作用与 proc 有些类似，但除了与 proc 相同的具有查看和设定内核参数功能之外，还有为 Linux 统一设备模型作为管理之用。 /tmp ：临时文件目录，用来存放不同程序执行时产生的临时文件。有时用户运行程序的时候，会产生临时文件。/tmp就用来存放临时文件的。/var/tmp目录和这个目录相似。 /usr：这是linux系统中占用硬盘空间最大的目录。用户的很多应用程序和文件都存放在这个目录下。在这个目录下，可以找到那些不适合放在/bin或/etc目录下的额外的工具 /usr/local ：这里主要存放那些手动安装的软件，即不是通过“新立得”或apt-get安装的软件。它和/usr目录具有相类似的目录结构。让软件包管理器来管理/usr目录，而把自定义的脚本（scripts)放到/usr/local目录下面。 /usr/share ：系统共用的东西存放地，比如 /usr/share/fonts 是字体目录，/usr/share/doc和/usr/share/man帮助文件。 /var ：这个目录的内容是经常变动的，看名字就知道，可以理解为vary的缩写，/var下有/var/log 这是用来存放系统日志的目录。/var/ www目录是定义Apache服务器站点存放目录；/var/lib 用来存放一些库文件，比如MySQL的，以及MySQL数据库的的存放地。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>#安装环境，配置环境变量GOROOT:go安装路径GOPATH: 项目目录PATH ：%GOROOT%\bin;%GOPATH%\bin #GOland 配置环境https://github.com/goproxyio/goproxy go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.io,direct
# 设置不走 proxy 的私有仓库，多个用逗号相隔（可选）go env -w GOPRIVATE=*.corp.example.com# 设置不走 proxy 的私有组织（可选）go env -w GOPRIVATE=example.com/org_name #go moudle 初始化go mod project_namego build </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/10.%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/10.%E6%B3%9B%E5%9E%8B/</guid>
      <description>golang 1.18 正式版本，支持泛型
 func TestGeneric(t *testing.T) { 	x := map[string]int{&amp;#34;tom&amp;#34;: 12, &amp;#34;jelly&amp;#34;: 7} 	res := Sums[string, int](x) 	log.Println(res)   stuC := StuCross[string]{ 	score: &amp;#34;成绩&amp;#34;, 	} 	log.Println(stuC) }  //指定函数参数类型约束 func Sums[K string, V int | float32](m map[K]V) V { 	var x V 	for _, v := range m { 	x += v 	} 	return x }  type StuCross[K string] struct { 	score K } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>#mapmap中元素为结构体，不能直接修改，因为map元素无法取地址；
type Student struct { 	name string } 修改map中struct元素的值，错误示例：
func TestMap(t *testing.T) { 	m := map[string]Student11{&amp;#34;people&amp;#34;: {&amp;#34;zhoujielun&amp;#34;}}  //编译错误 Cannot assign to m[&amp;#34;people&amp;#34;].name 	m[&amp;#34;people&amp;#34;].name = &amp;#34;wuyanzu&amp;#34; } 解决办法：
func TestMap(t *testing.T) {  //Student =&amp;gt; *Student 	m := map[string]*Student{&amp;#34;people&amp;#34;: {&amp;#34;zhoujielun&amp;#34;}}  //编译错误 Cannot assign to m[&amp;#34;people&amp;#34;].name 	m[&amp;#34;people&amp;#34;].name = &amp;#34;wuyanzu&amp;#34; } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%E9%97%AD%E5%8C%85/</guid>
      <description>#闭包func TestCloser(t *testing.T) { 	x := func() func() { 	var i = 1 	return func() { 	i++ 	log.Println(&amp;#34;i = &amp;#34;, i) 	} 	}() 	x() 	x() } 输出结果：
=== RUN TestCloser2022/04/10 21:42:09 22022/04/10 21:42:09 3--- PASS: TestCloser (0.01s) 闭包持有外部变量i，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/13.RSA%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/13.RSA%E5%8A%A0%E5%AF%86/</guid>
      <description>//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥 	//Reader是一个全局、共享的密码用强随机数生成器 	var bits = 2048 	priKey, err := rsa.GenerateKey(rand.Reader, bits) 	if err != nil { 	panic(err) 	} 	x509Key := x509.MarshalPKCS1PrivateKey(priKey) 	priKeyFile, err := os.Create(&amp;#34;pk.pem&amp;#34;) 	if err != nil { 	panic(err) 	} 	defer priKeyFile.Close() 	priKeyBlock := pem.Block{Type: &amp;#34;RSA Private Key&amp;#34;, Bytes: x509Key}  	pem.Encode(priKeyFile, &amp;amp;priKeyBlock)  	x509PubKey := x509.MarshalPKCS1PublicKey(&amp;amp;priKey.PublicKey)  	pubKeyFile, err := os.Create(&amp;#34;pubKey.pem&amp;#34;) 	if err !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/14.context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/14.context/</guid>
      <description>#context 基本使用func TestTimeout(t *testing.T) { 	ctx, cancel := context.WithCancel(context.Background()) 	//1. 传递上下文 	go RequestA(ctx)  	time.Sleep(time.Second * 4) 	//#cancel 1.取消 	cancel() 	time.Sleep(time.Second * 10) }  func RequestA(ctx context.Context) { 	// Do Something ... 	ctx = context.WithValue(ctx, &amp;#34;A&amp;#34;, &amp;#34;RequestA&amp;#34;) 	tic := time.NewTicker(time.Second * 2) 	// 2. 传递上下文 	go RequestB(ctx) 	for { 	select { 	case &amp;lt;-tic.C: 	//3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>#1. int#2. string#3. float#4. map#5.array,slice</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <description>进制转换：
//十进制转二进制 八进制 十六进制 func TestBase2(t *testing.T) { 	a := strconv.FormatInt(15, 2) 	b := strconv.FormatInt(15, 8) 	c := strconv.FormatInt(15, 10) 	d := strconv.FormatInt(15, 16) 	log.Printf(&amp;#34;base2 = %s,base8 = %s,base10 = %s,base16 = %s&amp;#34;, a, b, c, d) } output:
2022/03/23 15:05:26 base2 = 1111,base8 = 17,base10 = 15,base16 = f --- PASS: TestBase2 (0.01s) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5.%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5.%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%A6%E8%A7%A3/</guid>
      <description>#fmt.printf#常规格式化 %v : 打印变量值 %T : 类型  #整型 %+d 带符号的整型，fmt.Printf(&amp;quot;%+d&amp;quot;, 255)输出+255 %q 打印单引号 %o 不带零的八进制 %#o 带零的八进制 %x 小写的十六进制 %X 大写的十六进制 %#x 带0x的十六进制 %U 打印Unicode字符 %#U 打印带字符的Unicode %b 打印整型的二进制  #float 浮点型#string 字符串</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>#go中的异常处理机制为了保证程序不会因为一个异常而导致停摆，同时又不像其它语言那么啰嗦，对go语言的异常机制的简单理解实践一下吧
package main  import &amp;#34;fmt&amp;#34;  func divide(a int,b int,isPanic bool) int { 	//,类似于 java try catch ，，通过panic抛出异常 recover 捕获， 	if isPanic{ 	defer func() { 	if err := recover(); err != nil{ 	fmt.Println(err) 	} 	}() 	}  //可以自行捕获异常,自定义异常信息 	/*if b==0{ panic(&amp;#34;除数不能等于0&amp;#34;) }*/ 	c := a/b 	return c }  func main() { 	divide(3,0,true) 	fmt.Println(&amp;#34;我的天，一切运转正常&amp;#34;) } Out1:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8.json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8.json/</guid>
      <description>#json编码type Person struct { 	Name string `json:&amp;#34;name&amp;#34;` 	Age int `json:&amp;#34;age,omitempty&amp;#34;` }  type Toys struct { 	Person 	Toys []string `json:&amp;#34;toys&amp;#34;` }  func main(){  p := Person{Name:&amp;#34;cao&amp;#34;,Age:12}  toys := []string{&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;}  toy := Toys{Person:p,Toys: toys}  resbyte,err := json.Marshal(toy)  if err != nil{  log.Fatal(err)  }  // 返回byte切片，转成string类型  resstring := string(resbyte)  fmt.Println(resstring) } Out:
{&amp;#34;name&amp;#34;:&amp;#34;cao&amp;#34;,&amp;#34;toys&amp;#34;:[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;]} json:&amp;quot;age&amp;quot; : 可以理解成别名，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9.unsafe.pointer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9.unsafe.pointer/</guid>
      <description>#unsafe.pointer 可支持操作内存； 可以转换到任意类型指针 非安全的，不建议使用 unsafe.Pointer() 任意转换指针类型，并可进行指针运算 其他类型的指针只能转化为unsafe.Pointer，也只有unsafe.Pointer才能转化成任意类型的指针 只有uintptr才支持加减操作，而uintptr是一个非负整数，表示地址值，没有类型信息，以字节为单位  实际操作：获取一个字符串第二个字符的地址和值
 var s = &amp;#34;abc&amp;#34; 	var strHeader = (*reflect.StringHeader)(unsafe.Pointer(&amp;amp;s)) 	var res = (*byte)(unsafe.Pointer(strHeader.Data)) //获取字符串第一个字符的地址 	log.Printf(&amp;#34;strHeader.Data = %c&amp;#34;, *res) 	var ress = (*byte)(unsafe.Pointer(strHeader.Data + uintptr(1))) //获取字符串第一个字符的地址 	log.Printf(&amp;#34;strHeader.Data = %c&amp;#34;, *ress) 	//var ssss uintptr = 0xc000088fc0 	//log.Println(*(*byte)(unsafe.Pointer(ssss))) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/10.%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95/6.%E8%B0%83%E8%AF%95dlv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/10.%E8%B0%83%E8%AF%95%E6%B5%8B%E8%AF%95/6.%E8%B0%83%E8%AF%95dlv/</guid>
      <description>dlv debug main.go </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/2.beego/beego%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/2.beego/beego%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</guid>
      <description>app.conf runmode = dev //有4中 // dev 开发 //test 测试 //sprod 准生产环境 //prod 生产环境 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/2.beego/orm%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/2.beego/orm%E5%AE%89%E8%A3%85/</guid>
      <description>go get github.com/astaxie/beego/orm
go get github.com/go-sql-driver/mysql</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/2.beego/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/2.beego/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</guid>
      <description>#安装beego管理工具beego get github.com/beego/bee go get github.com/astaxie/beego #装好了bee管理工具之后，运用bee创建项目#创建项目bee new会自动在GOPATH路径src目录下创建项目
bee new project_name #运行项目定位到项目目录 GOPATH/src/project_name
go build project_namego run或者bee run </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/2.beego/%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/2.beego/%E9%83%A8%E7%BD%B2/</guid>
      <description>#部署#编译打包windows平台打包linux可执行文件
package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;os&amp;#34; 	&amp;#34;os/exec&amp;#34; )  //filepath: 要编译的文件的路径 func build(filepath string){ 	_ = os.Setenv(&amp;#34;CGO_ENABLED&amp;#34;, &amp;#34;0&amp;#34;) 	_ = os.Setenv(&amp;#34;GOARCH&amp;#34;, &amp;#34;amd64&amp;#34;) 	_ = os.Setenv(&amp;#34;GOOS&amp;#34;, &amp;#34;linux&amp;#34;)  	arg := []string{&amp;#34;build&amp;#34;, filepath} 	if err := exec.Command(&amp;#34;go&amp;#34;, arg...).Run(); err!=nil { 	fmt.Println(&amp;#34;编译失败:&amp;#34;, err) 	} else{ 	fmt.Println(&amp;#34;编译成功&amp;#34;) 	} }  func main() { 	build(`D:\WorkProject\go\src\beego_first\main.go`) } go 编译之后是二进制文件，beego:打包需要自行copy &amp;gt; (views,static,conf) 几个文件夹到部署应用目录下</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/3.gin/gorm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/3.gin/gorm/</guid>
      <description>#gorm使用</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/3.gin/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/3.gin/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
      <description>跨域请求在网上找了很多文章都是下面这种做法：
func cors() gin.HandlerFunc { 	return func(c *gin.Context) { 	method := c.Request.Method 	fmt.Println(&amp;#34;啥玩意儿的&amp;#34;) 	c.Header(&amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;*&amp;#34;) 	c.Header(&amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;Content-Type,AccessToken,X-CSRF-Token, Authorization, Token&amp;#34;) 	c.Header(&amp;#34;Access-Control-Allow-Methods&amp;#34;, &amp;#34;POST, GET, OPTIONS&amp;#34;) 	c.Header(&amp;#34;Access-Control-Expose-Headers&amp;#34;, &amp;#34;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type&amp;#34;) 	c.Header(&amp;#34;Access-Control-Allow-Credentials&amp;#34;, &amp;#34;true&amp;#34;) 	if method == &amp;#34;OPTIONS&amp;#34; { 	c.AbortWithStatus(http.StatusNoContent) 	} 	c.Next() 	} } 但是并不好使用，所以又找到下面这种方法，总算是搞明白了啥意思了！
func cors() gin.HandlerFunc { 	return func(c *gin.Context) { 	origin := c.Request.Header.Get(&amp;#34;origin&amp;#34;) 	if len(origin) == 0 { 	origin = c.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/3.gin/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/3.gin/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</guid>
      <description>#main程序入口
#routers路由配置
#controllers控制器
#dao数据库操作
#static静态文件
#models数据模型
#services逻辑业务操作
#config</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/4.go-kit/%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/4.go-kit/%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</guid>
      <description>go-kit 代码生成工具 https://github.com/metaverse/truss</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/4.go-kit/%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/4.go-kit/%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/</guid>
      <description> transport : 协议传输层 service : 业务层 endpoint : 中间结点
newServer 调用流程：transport dec &amp;ndash;&amp;gt; endpoint &amp;ndash;&amp;gt; service &amp;ndash;&amp;gt; transport enc  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/6.grpc/proto3%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/6.grpc/proto3%E5%9F%BA%E7%A1%80/</guid>
      <description>#1. 定义proto文件//声明protobuf版本syntax = &amp;#34;proto3&amp;#34;; 自动生成pb的时候，会提示要有go_package
option go_package=&amp;#39;.;grpc&amp;#39;;  .: 表示生成pb文件在哪个位置 ;grpc: 表示生成的pb文件所属包名  package grpc;service Greeter{rpc SayHello (HelloRequest) returns(HelloReply){}}message HelloRequest{string name = 1;}message HelloReply{string message = 1;} #2. 生成pb文件//go:generate protoc -I . --go_out=plugins=grpc:./ ./helloworld.proto </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/6.grpc/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/6.grpc/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</guid>
      <description>#配置基本信息 获取grpc  go get -u google.golang.org/grpcgo get -u github.com/golang/protobuf/{proto,protoc-gen-go} </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/6.grpc/%E7%94%9F%E6%88%90pb%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/6.grpc/%E7%94%9F%E6%88%90pb%E6%96%87%E4%BB%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/7.rabbitmq/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/7.rabbitmq/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/</guid>
      <description>#创建运行容器docker run -itd --name small-mq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 5672:5672 -p 15672:15672 rabbitmq #我是分割线docker run -dit &amp;ndash;name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:managemen</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/8.consul/%E5%88%9B%E5%BB%BAdocker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/8.consul/%E5%88%9B%E5%BB%BAdocker/</guid>
      <description>#consul 实例1docker run -itd --name=consule1 -p 8500:8500 --restart=always -e consul_bind_interface=&#39;eth0&#39; --privileged=true --name=consul1 consul agent -server -bootstrap-expect=2 -ui -node=consul1 -client=&#39;0.0.0.0&#39; -data-dir /consul/data -config-dir /consul/config -datacenter=consul_dc 参数说明：
docker run -itd --name=consul -p 8500:8500 consul agent -server -bootstrap -ui -client 0.0.0.0 -server : 以服务端方式启动 -bootstrap : 指定自己为leader ,而不需要选举 -ui : 启动一个内置管理web界面 -client : 指定客户端可以访问的IP. 设置为0.0.0.0 则任意访问，否则默认本机可以访问
实例1 ip : 172.17.0.2
#consul 实例2docker run -itd --name=consule1 -p 8200:8500 --restart=always -e consul_bind_interface=&#39;eth0&#39; --privileged=true --name=consul2 consul agent -server -bootstrap-expect=2 -ui -node=consul2 -client=&#39;0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/9.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/9.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</guid>
      <description>go 关键字 就定义了一个协程</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/alpine%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/alpine%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C/</guid>
      <description>mkdir /lib64ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/CGO%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/CGO%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>CGO需要安装gcc
windows安装mingw-w64
下载
https://sourceforge.net/projects/mingw-w64/files/mingw-w64/
两种方式：
 下载exe可执行文件，交给程序下载安装，网络不好很大概率会一直失败 直接下载压缩包解压，然后配置环境变量即可。(推荐)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/goland%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/goland%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</guid>
      <description>Help-&amp;gt;Edit Custom VM Options&amp;hellip;在开打文件中添加参数-Dfile.encoding=UTF-8
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/socket.io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/socket.io/</guid>
      <description>socket.io 配置到外网 服务器后，就会出现如下问题
Error during WebSocket handshake: Unexpected response code: 400 ，根据github的讨论，得到如下答案
proxy_http_version 1.1;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection &amp;#34;upgrade&amp;#34;;proxy_set_header Host $host; 其中第一行是告诉nginx使用HTTP/1.1通信协议，这是websoket必须要使用的协议。 第二行和第三行告诉nginx，当它想要使用WebSocket时，响应http升级请求。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/golang/vscode%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/golang/vscode%E9%85%8D%E7%BD%AE/</guid>
      <description>#安装#1. 配置好环境变量：GOPATH GOROOTGOROOT: GO安装目录
GOPATH: 项目目录 src pkg bin目录
#2. 安装go 开发工具集ctrl + shift + P 打开命令面板，选择 GO:Install/Update Tools
#调试#go run test 不打印 详情 go test -v # 正常命令应该是这样的，vscode 默认运行 不带-v 修改工作空间设置
 {  &amp;#34;go.inferGopath&amp;#34;: false,  &amp;#34;go.testFlags&amp;#34;: [&amp;#34;-v&amp;#34;], //增加这一行 } 再运行就正常了。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/hugo/1.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/hugo/1.%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>#初始化  下载hugo已发布版本
  配置环境变量：
2.1. 创建 bin 文件夹，将hugo.exe 放在bin文件夹下；
2.2. 配置换进变量：将hugo/bin/目录添加到 path 中；
  创建站点：
 hugo new site path/project_name
   运行站点：
 cd path/project_name //定位到当前站点目录
  hugo server //运行服务
   部署：
 hugo //hugo 命令构建站点 build完后的站点文件夹下 public 目录
   #设置主题 cd themes git clone git@github.com:setsevireon/photophobia.git git submodule add https://github.com/alex-shpak/hugo-book themes/book
 #启动本地调试 hugo server &amp;ndash;theme=photophobia &amp;ndash;buildDrafts &amp;ndash;watch</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/hugo/2.%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/hugo/2.%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>#搭建个人博客站点，可以把平时学习或工作中的一些笔记或知识点积累的东西分享到 ，分享几种实现博客搭建的方式#1. github pages 静态网页托管服务这里有官方说明 分分钟搭建起来
 首先根据前面我写的 hugo 教程，先创建自己的网站内容先。 创建仓库，仓库名称 注意： github 账户名+github.io 比如：zouni88.github.io 内容提交  # 仓库 down 到本地git clone git@github.com:Yourname/Yourname.github.io.git# 切换分支到master，默认应该是maingit checkout -b master# 查看分支git branchmain* master# 添加 index.html文件,并编辑touch index.html# 提交git push --set-upstream origin master 大功告成，浏览器打开： Yourname.github.io  #2. gitee pages 静态网页托管服务使用方法和github pages 类似, 官方帮助文档
#3. gitbook,买个域名先这个就是要根据自己的网络情况了，不是每次都能顺利打开。
#4. 如果有能力就自己搭建服务或购买云服务</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/hugo/book%E7%9A%AE%E8%82%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/hugo/book%E7%9A%AE%E8%82%A4/</guid>
      <description>https://github.com/idealvin/hugo-book</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/ftp/FTP%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/ftp/FTP%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80/</guid>
      <description>查看ftp默认用户主目录在哪里 Yum install finger
finger ftp [root@OX39Ø6c finger ftp Login: ftp Directory: / var/ftp Never logged in. No mail. No Plan. Name: FTP User Shell: /sbin/nologin /
修改默认目录 vim /etc/passwd
[root@OX39Ø6c vim /etc/passwd ftp:x:14:50: FTP
修改/var/ftp 为想要修改的目录路径 然后重启vsftpd服务 service vsftpd restart
如果修改之后仍不能用，需要关闭 SELinux
 修改/etc/selinux/config文件中的SELINUX=&amp;quot;&amp;quot; 为 disabled ，然后重启。 如果不想重启系统，使用命令setenforce 0  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/ftp/ftp%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/ftp/ftp%E9%85%8D%E7%BD%AE/</guid>
      <description>1.查看是否安装ftp服务
rpm -q vsftpd
2.安装ftp服务
yum install vsftpd
3.开机启动
 chkconfig vsftpd on
4.启动服务
 service vsftpd start
5.重新启动vsftpd
service vsftpd restart
来自 https://www.cnblogs.com/surge/p/3868270.html
修改相关配置项在 /etc/vsftpd/vsftpd.conf中</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/grub2%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/grub2%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/</guid>
      <description>#设置grub2 分辨率 进入grub 命令行
在grub 启动界面，按下c 键进入命令行界面 查询支持的分辨率
输入 videoinfo 得到支持的分辨率列表 命令行设置选择的分辨率
输入terminal_output console 进入终端模式，输入 set gfxmode=1024x768 (x 不是*) 退出
terminal_output gfxterm 退出到图形模式  #进入系统设置/boot/grub/grub.cfg</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/ldconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/ldconfig/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/ubuntu/</guid>
      <description>#键盘失灵1.安装软件后键盘鼠标失灵，需要安装xserver包 xserver-xorg-input-all 保证电脑能联网，或者通过ssh远程连接
sudo apt install xserver-xorg-input-all </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E4%BF%AE%E6%94%B9%E5%9B%BA%E5%AE%9AIP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E4%BF%AE%E6%94%B9%E5%9B%BA%E5%AE%9AIP/</guid>
      <description>#给系统设置固定IP定位到目录：
cd /etc/sysconfig/network-scripts  ifcfg-em1 ifdown-eth ifdown-ppp ifup ifup-ipv6 ifup-routes init.ipv6-global ifcfg-em1.bak ifdown-ib ifdown-routes ifup-aliases ifup-isdn ifup-sit network-functions ifcfg-em2 ifdown-ippp ifdown-sit ifup-bnep ifup-plip ifup-Team network-functions-ipv6 ifcfg-lo ifdown-ipv6 ifdown-Team ifup-eth ifup-plusb ifup-TeamPort ifdown ifdown-isdn ifdown-TeamPort ifup-ib ifup-post ifup-tunnel ifdown-bnep ifdown-post ifdown-tunnel ifup-ippp ifup-ppp ifup-wireless vi 编辑 ifcfg-em1文件， 这个文件是对应网卡的脚本内容，直接修改：增加如下几项，包括IP地址，网关等等
IPADDR=&amp;#34;192.168.2.6&amp;#34; NETMASK=&amp;#34;255.255.255.0&amp;#34; GATEWAY=&amp;#34;192.168.1.1&amp;#34; NETWORK=&amp;#34;192.168.1.0&amp;#34; DNS1=&amp;#34;192.168.1.1&amp;#34; #修改完成后，重启networkservice network restart ending&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E4%BF%AE%E6%94%B9%E6%BA%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E4%BF%AE%E6%94%B9%E6%BA%90/</guid>
      <description>修改官方源，改成阿里源
# 先备份原sources.list 文件 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak # sed 命令替换域名 sudo sed -i &amp;#39;s/security.ubuntu/mirrors.aliyun/g&amp;#39; /etc/apt/sources.list sudo sed -i &amp;#39;s/archive.ubuntu/mirrors.aliyun/g&amp;#39; /etc/apt/sources.list sudo apt update sudo apt-get upgrade //更新已安装的包到最新，这个是可选的 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E5%8D%B8%E8%BD%BD%E5%88%A0%E9%99%A4%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E5%8D%B8%E8%BD%BD%E5%88%A0%E9%99%A4%E8%BD%AF%E4%BB%B6/</guid>
      <description>#卸载软件 apt-get autoremove 删除相关联的所有包  sudo apt-get autoremove docker docker-ce docker-engine docker.io containerd runc 看看还有没有  dpkg -l | grep docker 卸载一切有关联的软件  sudo apt-get autoremove docker-ce-* 删除配置和相关目录  sudo rm -rf /etc/systemd/system/docker.service.dsudo rm -rf /var/lib/docker 卸载完毕  docker --version </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid>
      <description>#定时任务 查看定时任务  crontab -l 编辑定时任务  crontab -e 每周五23点定时关机
0 23 * * 5 /usr/sbin/shutdown now 命令必须是完整路径：/usr/sbin/shutdown
查看命令路径：which</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>命令 描述 注解     ls -h 比如:20M 文件大小以给人看的格式显示    crontab 定时任务    cat filename 查看文件    tail filename -n linenum 查看文件指定多少行    reboot 普通重启    shutdown -r now 立即重启(root)    shutdown -r 10 10分钟后重启    shutdown -r 20:00 8点重启    halt 立刻关机    poweroff 立刻关机    shutdown -h now 立刻关机(root)    shutdown -h 10 10分钟后关机    ps 查找进程    sudo apt-get remove 删除软件 不会删除配置文件   sudo apt-get purge mysql 彻底删除     #文件   命令 描述 注解     scp 上传下载文件    scp root@host:/root/log.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B/</guid>
      <description>#进程相关# 查找进程ps auxf |grep uwsgi# 查看当前进程pstree -ap|grep gunicorn# 杀死 进程kill -9 544 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC/</guid>
      <description>内核版本
uname -a 所有版本信息
lsb_release -a centos 查看版本
cat /etc/redhat-release 结果
CentOS Linux release 8.1.1911 (Core) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E7%94%A8%E6%88%B7/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E7%94%A8%E6%88%B7/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>#ssh root@ip ssh登录时提示「permission denied please try again」 sudo vi /etc/ssh/sshd_config
 编辑
 PermitRootLogin yes
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/</guid>
      <description>#查看硬盘使用情况df -h #查看大文件du -h -x --max-depth=1 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</guid>
      <description>#查看指定端口占用情况 netstat -apn|grep 8888
  lsof -i:8080
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/</guid>
      <description>#linux 设置静态IP 查看网卡  root@zouni:~# ifconfig  eno1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500  inet 192.168.1.6 netmask 255.255.255.0 broadcast 192.168.1.255  inet6 fe80::2247:47ff:fe98:9e30 prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;  inet6 240e:305:7880:36d2:2247:47ff:fe98:9e30 prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt;  ether 20:47:47:98:9e:30 txqueuelen 1000 (Ethernet)  RX packets 15733 bytes 3827041 (3.8 MB)  RX errors 0 dropped 8440 overruns 0 frame 0  TX packets 3586 bytes 376173 (376.1 KB)  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0  device interrupt 16   enp3s0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt; mtu 1500  ether 00:e0:51:46:0b:01 txqueuelen 1000 (Ethernet)  RX packets 0 bytes 0 (0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/linux/%E9%98%B2%E7%81%AB%E5%A2%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/linux/%E9%98%B2%E7%81%AB%E5%A2%99/</guid>
      <description>#Linux 防火墙 ufw firewalld iptables 默认：iptables  #2. ubuntu : ufw ufw 查询防火墙状态  查看开放端口：  sudo ufw status 允许80端口开放：  sudo ufw allow 80 允许22端口开放：  sudo ufw allow 22 启动防火墙：  sudo ufw enable 重启防火墙使端口配置生效：  sudo ufw reload  ufw status # 关闭 ufw disable #3. 红帽系列 firewallsystemctl status firewalld # 启动防火墙 systemctl start firewalld # 停止防火墙 systemctl stop firewalld # 永久停用防火墙 systemctl disable firewalld # 启用防火墙 systemctl enable firewalld  防火墙开放指定端口  # permanent 永久 # 开放8080端口 firewall-cmd --permanent --zone=public --add-port=8080/tcp # 查询8080端口开放情况，若返回success，则为开放成功 # --zone docker  firewall-cmd --zone=public --query-port=8080/tcp # 重启防火墙 firewall-cmd --reload  其它防火墙命令  启动： systemctl start firewalld查看状态： systemctl status firewalld停止： systemctl disable firewalld禁用： systemctl stop firewalld启动服务：systemctl start firewalld.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/mac/brew%E9%94%99%E8%AF%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/mac/brew%E9%94%99%E8%AF%AF/</guid>
      <description>brew异常
yunhai@bogon Downloads % brew Traceback (most recent call last):  11: from /usr/local/Homebrew/Library/Homebrew/brew.rb:13:in `&amp;lt;main&amp;gt;&amp;#39; 10: from /usr/local/Homebrew/Library/Homebrew/brew.rb:13:in `require_relative&amp;#39;  9: from /usr/local/Homebrew/Library/Homebrew/global.rb:26:in `&amp;lt;top (required)&amp;gt;&amp;#39; 8: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require&amp;#39;  7: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require&amp;#39; 6: from /usr/local/Homebrew/Library/Homebrew/os.rb:1:in `&amp;lt;top (required)&amp;gt;&amp;#39;  5: from /usr/local/Homebrew/Library/Homebrew/os.rb:19:in `&amp;lt;module:OS&amp;gt;&amp;#39; 4: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:52:in `prerelease?&amp;#39;  3: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:18:in `version&amp;#39; 2: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:18:in `new&amp;#39;  1: from /usr/local/Homebrew/Library/Homebrew/os/mac/version.rb:29:in `initialize&amp;#39; /usr/local/Homebrew/Library/Homebrew/version.rb:369:in `initialize&amp;#39;: Version value must be a string; got a NilClass () (TypeError) 重置试试：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/KL%E6%95%A3%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/KL%E6%95%A3%E5%BA%A6/</guid>
      <description>KL散度 -&amp;gt; 相对熵</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/tensorboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/tensorboard/</guid>
      <description> import tensorflow as tf # 这一步在网络初始化后 mode.summary()  tf.summary.create_file_writer(&amp;#39;logs&amp;#39;) #指定要监听的工作日志目录tensorboard --logdir logs </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/%E5%AE%89%E8%A3%85/centos%E5%AE%89%E8%A3%85tensorflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/%E5%AE%89%E8%A3%85/centos%E5%AE%89%E8%A3%85tensorflow/</guid>
      <description>官网地址
 https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=CentOS&amp;target_version=8&amp;target_type=runfilelocal
 wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run sudo sh cuda_10.2.89_440.33.01_linux.run </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/%E5%AE%B9%E5%99%A8/</guid>
      <description>docker run -itd &amp;ndash;name=tensorflow -p 8888:8888 -v D:\docker\tf:/tmp -w /tmp 90338865fe9
Cannot connect:Cannot connect to the Docker daemon at tcp://localhost:2375,Is the docker daemon running?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/%E5%AF%B9%E6%95%B0log2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/%E5%AF%B9%E6%95%B0log2/</guid>
      <description>tensorlfow math.log() 是以自然常数e为底 转化为以2为底：
根据对数换底公式：
∵
∴ loge(4)/loge(2) = log2(4) = 2 代码实例：
import tensorflow as tf x = tf.math.log(4.)/tf.math.log(2.) Out:
&amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=2.0&amp;gt; 效果等同于 numpy log2(4)
import numpy as np  np.log2(4) Out:
2.0 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>#常用函数#unstack作用：把向量按照维度拆分
#gather通过索引获取 标量或者向量
#gather_nd可以索引多维
argmax 最大值的索引
tf.argmax([1,2,3,4,5,6,7,8])&amp;lt;tf.Tensor: shape=(), dtype=int64, numpy=7&amp;gt; softmax 概率最大的索引</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0/fill/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0/fill/</guid>
      <description># %% import tensorflow as tf from matplotlib import pyplot as plt  x = tf.zeros([2, 2], dtype=tf.int32) # 如果要画一个灰度图，那么如下 # 填充一个[2,2]的矩阵为128 也就是灰色值 # [[255,255], # [255,255]] z = tf.fill([2, 2], 128) # 在最后一个维度展开一次，变成[2,2,1] z = tf.expand_dims(z, axis=-1) # 在最后一个维度平铺3次 # [2,2,3] z = tf.tile(z, [1, 1, 3]) plt.imshow(z) plt.show() # %% # 画一个红色的图，也很简单 # 三个通道不同颜色 比如洋红色的rgb色值[255,0,255] r = tf.fill([3, 3], 255) g = tf.zeros([3, 3],dtype=tf.int32) b = r img = tf.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/tensorflow/%E5%BC%A0%E9%87%8F%E5%90%91%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/tensorflow/%E5%BC%A0%E9%87%8F%E5%90%91%E9%87%8F/</guid>
      <description>张量是一维 二维是矩阵 张量</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BC%A9%E6%94%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BC%A9%E6%94%BE/</guid>
      <description>#数据缩放到某个区间归一化公式：
每一个样本减去最小值，除以 最大值-最小值 (x - min(x) )/ (max(x) - min(x))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</guid>
      <description>#数据预处理无量纲化
数据缩放： 标准化，归一化
标准化
处理缺失值
处理编码哑变量
二值化，分箱</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/</guid>
      <description>#关于反向传播前向传播</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%B8%B8%E7%94%A8%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%B8%B8%E7%94%A8%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</guid>
      <description>#sigmoidimport tensorflow as tf from matplotlib import pyplot as plt x = tf.linspace(-5.,5,20) x = tf.nn.sigmoid(x)  plt.figure(facecolor=&amp;#39;white&amp;#39;) plt.plot(x) plt.show() numpy实现的sigmoid函数
from matplotlib import pyplot as plt import numpy as np  x = np.linspace(-5,5,20) x = list(map(lambda x: 1/(1+np.exp(-x)),x)) plt.figure(facecolor=&amp;#39;white&amp;#39;) plt.plot(x) plt.show() #relu&amp;lt; 0 就化为0
from tensorflow.keras import activations activations.relu([1,2,3,-1,0])  out: &amp;lt;tf.Tensor: shape=(5,), dtype=int32, numpy=array([1, 2, 3, 0, 0])&amp;gt; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/yolov3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/yolov3/</guid>
      <description>#准备数据集labelImg 数据标注工具 #模型结构 如下图：网络输入 416x416 经过一系列卷积层之后分成了三个分支，最终得到三个输出：[13,13,c],[26,26,c],[52,52,c] c是通道数
feature map 越大，感受野越小，适合预测小目标，
[13,13] feature map适合预测大目标
#数据 target转换同等变换，[512,512,3] =&amp;gt; [13,13,5]
因为网络输出是 [13,13,255] [26,26,255] [52,52,255] 这里的255是：3*(5+80) 每一个网格预测3个bbox,每个box有(x,y,w,h,iou,classes) 所以要将y_true也进行转换 [13,13,3,6] =&amp;gt;[13,13,3,(x,y,w,h,iou,class)] 意思是 512x512的图片上的真是框 映射到13x13的 feature map上，缩放32倍
每个图片上 最多有 gtbox_max个框，每个box 有5个值[x,y,w,h,confidence]
因为网络输出是中心点坐标，所以x,y得转换成中心点坐标 图片转换成网络输入大小 x = [h,w,3] =&amp;gt; [416,416,3] label转换成网络输出 yolov3有9个anchors 网络输出有三个分支： [boxes,(x,y,x1,y1,class)] =&amp;gt;[13,13,3,(x,y,w,h,confidence,class))] # x,y是中心点坐标 [boxes,5] =&amp;gt;[26,26,3,6] [boxes,5] =&amp;gt;[52,52,3,6] y</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E6%95%B0%E6%8D%AE%E9%9B%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E6%95%B0%E6%8D%AE%E9%9B%86/</guid>
      <description>#标注数据集labelImg.exe 工具标注
#制作数据集训练集
 python tools/voc2012.py &amp;ndash;data_dir &amp;lsquo;D:/DeepLearning/datasets\VOCtrainval_11-May-2012\VOCdevkit\VOC2012&amp;rsquo; &amp;ndash;split train &amp;ndash;output_file ./data/voc2012_train.tfrecord
 测试集
 python tools/voc2012.py &amp;ndash;data_dir &amp;lsquo;./data/voc2012_raw/VOCdevkit/VOC2012&amp;rsquo; &amp;ndash;split val &amp;ndash;output_file ./data/voc2012_val.tfrecord
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E8%BF%87%E6%8B%9F%E5%90%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E8%BF%87%E6%8B%9F%E5%90%88/</guid>
      <description>#over fitting过拟合：当模型在训练集上表现好，在验证集上表现变差的时候出现过拟合
#解决过拟合 问题的方向 降低模型复杂度，减少参数量， 正则化 早停法  #early stopping早停法： 当模型在验证集上的表现开始下降的时候，停止训练</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/MSE_MAE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/MSE_MAE/</guid>
      <description>#均方误差#平均绝对误差</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E4%BF%A1%E6%81%AF%E7%86%B5_%E4%BA%A4%E5%8F%89%E7%86%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E4%BF%A1%E6%81%AF%E7%86%B5_%E4%BA%A4%E5%8F%89%E7%86%B5/</guid>
      <description>事件的信息量随着事件发生概率的变大而 递减，信息不为负
两个不相关事件同时发生所产生的信息： h(x,y) = h(x) + h(y)
两个事件的概率满足： p(x,y) = p(x) * p(y).
对数形式的 真数相乘=&amp;gt;对数相加
信息： 𝐡(𝐱) = −𝒍𝒐𝒈𝟐𝒑(𝒙)
熵： 𝐇(𝐱) = −𝒔𝒖𝒎(𝒑(𝒙)𝒍𝒐𝒈𝟐𝒑(𝒙))
𝐟(𝐱) = −𝒍𝒐𝒈𝟐𝒙 函数图像 #交叉熵交叉熵： 两个事件的分布相似情况， H(p,q) = H(p) + KL(p,q)
KL散度用来衡量真实分布和预测分布的差异情况
假设 两个事件的概率分布相同则有：
∵ p=q,则 KL(p,q)=0
∴ H(p,q) = H(p)
根据 以上推导可知：
假设 p = [0,1,0]
H(p) = -log2(p) = 0 # P事件的信息为0 惊喜度最低
H(p,q) = 0 + KL(p,q) = KL(p,q)
所以H(p,q) = -plog(q) = -1log(q) # 其实就是计算KL最小值 KL(p,q) = 0, p=q</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%B9%B3%E6%96%B9%E5%92%8C%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%B9%B3%E6%96%B9%E5%92%8C%E5%85%AC%E5%BC%8F/</guid>
      <description>#平方和公式求连续的自然数的平方和
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%BE%AE%E7%A7%AF%E5%88%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%BE%AE%E7%A7%AF%E5%88%86/</guid>
      <description>https://www.zhihu.com/question/336322284/answer/918067537?clicktime=1579274262
我们假设0到1之间被平均分成了n份，那么每一份的宽度就是1/n。而矩形的高度就是函数的纵坐标的值，纵坐标可以通过y=x²很容易算出来。于是，我们就知道，第1个矩形的高度为（1/n）²，第2个为（2/n）²，第3个为（3/n）²……
微分积分互逆 积分是求原函数 微分是对原函数求导
反向微分 =&amp;gt; 原函数 =&amp;gt; 积分</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%BF%85%E9%9C%80%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%BF%85%E9%9C%80%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</guid>
      <description>平方和公式
三角函数：正切</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E5%A4%A7%E7%BA%B2/</guid>
      <description>#信息论#统计代数#微积分 方差 均方误差  MSE 3. 傅里叶变换 4. 逆矩阵 5. 贝叶斯 概率 6. 线性代数 7. 概率论 8. 信息论 9. 微积分 10. 方差，标准差 正态分布 熵，交叉熵 贝叶斯，朴素贝叶斯概率 极大似然估计 最小二乘法 拉格朗日乘子法 微积分 矩阵：逆矩阵，单位矩阵，矩阵乘法 =》 向量模，向量内积（点积） 对数定理
#傅里叶变换</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/</guid>
      <description>机器学习
 数据特征处理  数据无量纲化：数据缩放 数据标准化   概率论：条件概率，联合概率，贝叶斯，朴素贝叶斯 信息论：信息熵，交叉熵，条件熵 线性回归 矩阵  了解全连接神经网络要先了解一些基本数学概念
数据无量纲化 数据缩放 数据标准化
什么是线性函数 线性回归和线性回归解决什么问题
函数求导
 微积分，微分积分互逆性，导数运算法则， 定积分，不定积分  矩阵乘法和矩阵逆
方差和标准差和偏差
对数概念</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%96%B9%E5%B7%AE%E5%92%8C%E5%81%8F%E5%B7%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%96%B9%E5%B7%AE%E5%92%8C%E5%81%8F%E5%B7%AE/</guid>
      <description>方差：方差就是 衡量数据的离散程度
每个样本和（所有样本的平均数 的差 的平方 的和除以 样本数
低方差：数据看起来比较密集，离散程度 比较低
高方差：数据看起来比较离散
低偏差：数据看起来距离靶心比较近
高偏差：数据距离则偏离靶心 较远
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/</guid>
      <description>极大似然估计
抛硬币，已知硬币是正方两面，抛出硬币为花的概率</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E8%87%AA%E7%84%B6%E5%B8%B8%E6%95%B0e/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E8%87%AA%E7%84%B6%E5%B8%B8%E6%95%B0e/</guid>
      <description>#自然常数e(1+1/n)^n ≈ 2.718
伯努利研究发现： </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E9%87%8F%E7%BA%B2_%E6%97%A0%E9%87%8F%E7%BA%B2%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/ML/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E9%87%8F%E7%BA%B2_%E6%97%A0%E9%87%8F%E7%BA%B2%E5%8C%96/</guid>
      <description>#量纲量纲就好像是 度量单位一样，不同的单位的数据是没办法比较的，所以要统一，这就叫 去量纲化 or 无量纲化
百科解释 : 时间的长短（秒、分、时）、质量的大小（g、Kg）、速度的快慢（Km/h、m/s）等，都是量纲，它们反映特定物理量或物理现象的度量，在物理学或者计算上通常以物理量的单位来表示。
量纲是物理量的度量，是物理量的测量数据的表示。用来表示量纲的单位必须反映特定物理现象或物理量，如温度、位移、速度、质量等。仅代表特定数目的单位，称为“无量纲单位”。例如“打”代表12；“罗”代表12打或144。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/nginx/%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/nginx/%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1/</guid>
      <description>#一个端口配置多个服务实验阶段&amp;mdash;&amp;mdash;-
server { listen 80; server_name apitest.aa.com; location / {proxy_pass http://10.26.31.176:8081; #微服务地址测试环境root html; index index.html index.htm; } }server { listen 80; server_name api.aa.com; location / { proxy_pass http://10.26.31.176:8080; #微服务地址线上环境root html; index index.html index.htm; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/nginx/%E5%AE%B9%E5%99%A8%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/nginx/%E5%AE%B9%E5%99%A8%E6%9E%84%E5%BB%BA/</guid>
      <description>#构建nginx容器docker run -itd --name=nginx -p 8088:80 -p 443:443 -v /home/zouni/nginx/conf.d:/etc/nginx/conf.d -v /home/zouni/web/static:/home/zouni/web/static –restart=always –user=root nginx  --privileged=true docker run -itd --name=nginx -p 8088:80 -p 443:443 -v /home/zouni/nginx/conf.d:/etc/nginx/conf.d -v /home/zouni/web/static:/home/zouni/web/static -user=root nginx:latest docker run -itd &amp;ndash;name=nginx -p 8088:80 -p 443:443 -v /home/zouni/nginx/conf.d:/etc/nginx/conf.d -v /home/zouni/web/static:/home/zouni/web/static &amp;ndash;restart=always -user=root -privileged=true nginx:latest</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/nginx/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/nginx/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>#启动nginx #查看帮助nginx -h  #查看版本nginx -v #查看配置参数nginx -V #指定参数nginx -s #测试配置参数是否正确nginx -t -C filename #测试配置是否正确nginx -t  #重载，每次修改配置信息都需要重载nginxnginx -s reload #停止运行nginx -s stop </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/nginx/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/nginx/%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/</guid>
      <description>#下载官方nginx 包 wget http://nginx.org/download/nginx-1.10.1.tar.gz
 #配置nginx#&amp;ndash;prefix 指定安装的目录 #/usr/local/nginx 是安装目录，不能和自己下载的文件目录重了 #./configure &amp;ndash;prefix=/usr/local/nginx
#带ssl stub_status模块 添加strem模块 –with-stream，这样就能传输tcp协议了 #http_stub_status_module 状态监控 #http_ssl_module 配置https #stream 配置tcp得转发 #http_gzip_static_module 压缩 #http_sub_module 替换请求
./configure &amp;ndash;prefix=/usr/local/nginx &amp;ndash;with-http_stub_status_module &amp;ndash;with-http_ssl_module &amp;ndash;with-stream
#带用户得方式 ./configure &amp;ndash;user=www &amp;ndash;group=www &amp;ndash;prefix=/usr/local/nginx &amp;ndash;with-http_stub_status_module &amp;ndash;with-http_ssl_module &amp;ndash;with-stream &amp;ndash;with-http_gzip_static_module &amp;ndash;with-http_sub_module
 #编译 安装 make &amp;amp;&amp;amp; make install
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/nginx/%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/nginx/%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</guid>
      <description>#403异常第一次配置一般是权限问题 /etc/nginx/nginx.conf
use nginx; 改为： use root;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/nginx/%E8%BF%94%E5%9B%9E%E5%9B%BA%E5%AE%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/nginx/%E8%BF%94%E5%9B%9E%E5%9B%BA%E5%AE%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</guid>
      <description>配置静态站点，有些时候需要返回固定页面，访问url: /site/pageA /site/pageB 都返回index.html页面，这时候需要用到下面配置
location / {try_files $uri /index.html;} </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/other/wrk-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/other/wrk-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
      <description>#性能测试工具使用1.安装
git clone https://github.com/wg/wrkcd wrkmake # 编译cp wrk /usr/local/sbin # 二进制文件 放入非管理员目录，可直接运行命令  wrk http://163.com
  Thread Stats Avg Stdev Max +/- StdevLatency 32.49ms 56.14ms 230.86ms 84.38%Req/Sec 637.05 222.35 1.09k 63.00%12710 requests in 10.03s, 6.71MB readRequests/sec: 1267.57Transfer/sec: 685.72KB </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/other/%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/other/%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D%E8%AE%B0%E5%BD%95/</guid>
      <description>   英文 中文     trigger 触发   necessary 必要的   depending 依赖   logic 逻辑   acquire 获取   heavy 重；大；沉重   separate 单独的，分离的    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/bs4/%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/bs4/%E5%9F%BA%E7%A1%80%E8%A7%A3%E6%9E%90/</guid>
      <description>#请求网页内容# features : 解析器类型 result = BeautifulSoup(pagecontent,features = &amp;#39;html.parser&amp;#39;) # 获取所有ul标签 result.find_all(&amp;#39;ul&amp;#39;,id=&amp;#39;list&amp;#39;) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/enviroment/anaconda/jupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/enviroment/anaconda/jupyter/</guid>
      <description>#生成配置文件jupyter notebook --generate-config #生成密钥jupyter notebook password # 设置密码：123456 #如下地址/root/.jupyter/jupyter_notebook_config.json # 生成密钥如下： sha1:23524a335a85:461a1f37e8e32af1ab8899329b3e41c41ea6e546 #修改配置文件vi /root/.jupyter/jupyter_notebook_config.py 修改如下内容：
# 允许 作为root访问 c.NotebookApp.allow_root = True # 允许访问的主机ip * 随意访问 c.NotebookApp.ip=&amp;#39;*&amp;#39; # 密钥：/root/.jupyter/jupyter_notebook_config.json 文件的内容 c.NotebookApp.password = u&amp;#39;sha1:03... &amp;#39; # 修改工作目录 c.NotebookApp.notebook_dir=&amp;#39;filepath&amp;#39; 修改完之后，重新启动jupyter notebook，浏览器打开127.0.0.1:8888输入刚开始设置的密码就正常登录了</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/enviroment/anaconda/tensorflow-gpu%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/enviroment/anaconda/tensorflow-gpu%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>修改镜像源为国内源，方便快速下载
直接创建环境，并下载tensorflow-gpu
conda create -n tf2 tensorflow-gpu 激活环境
source activate  conda activate tf2 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/enviroment/anaconda/%E4%BF%AE%E6%94%B9%E6%BA%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/enviroment/anaconda/%E4%BF%AE%E6%94%B9%E6%BA%90/</guid>
      <description>生成配置文件：conda config命令
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --set show_channel_urls yes 会在用户根目录下生成.condarc文件
conda info  查看是否生效
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/enviroment/anaconda/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/enviroment/anaconda/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>创建虚拟环境，并指定安装的model
conda create -n env_name script_nameF:conda create -n tensorflow tensorflow-gpu==2.1 指定要安装的model版本，conda会自动安装所有关联的包</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/enviroment/anaconda/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/enviroment/anaconda/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看所有创建的虚拟环境
conda info -eorconda env list 创建虚拟环境
conda create -n envname 激活虚拟环境
# centos 需要执行 source activate
conda activate envname 关闭虚拟环境
conda deactivate envname  删除虚拟环境
conda remove -n envname --all 重命名环境 =&amp;gt; 先clone 再重建 == 克隆or移植环境
conda create -n python_basic --clone matplotlib_basic </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/enviroment/pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/enviroment/pip/</guid>
      <description>#pip 安装软件-U : 升级到最新版本
-i : 指定下载库源
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -U funcat #pip 更新失败pip install --upgrade pip 更新失败 解决办法： 重新下载安装
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py 强制安装：
python get-pip.py --force-reinstall </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/enviroment/pypi%E4%BF%AE%E6%94%B9%E6%BA%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/enviroment/pypi%E4%BF%AE%E6%94%B9%E6%BA%90/</guid>
      <description>#修改源的两种方式 临时修改 -i 指定源 安装指定的 model
-U : 升级到最新版本
-i : 指定下载库源  pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -U funcat 永久修改  pip install pip -Upip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ #源   name source     清华 https://pypi.tuna.tsinghua.edu.cn/simple   阿里 https://mirrors.aliyun.com/pypi/simple/    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/flask_migrate/%E5%9D%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/flask_migrate/%E5%9D%91/</guid>
      <description>#flask-migrate 坑 字段长度更新会提示 No changes in schema detected.  解决办法：初始化Migrate的时候增加属性compare_type为True
Migrate(app=app, db=db,render_as_batch = True,compare_type = True) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/flask_migrate/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/flask_migrate/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</guid>
      <description>#初始化初始化迁移文件
python manage.py db init 将模型映射 添加到文件中
python manage.py db migrate 最后 映射到数据库中：
python manage.py db upgrade #manage.py 添加数据命令行 添加数据
python manage.py create_user -u yunhai -e cao_cgq@163.com -p 1234 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/form/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/html/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/js/ajax%E9%87%8D%E5%AE%9A%E5%90%91%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/js/ajax%E9%87%8D%E5%AE%9A%E5%90%91%E9%97%AE%E9%A2%98/</guid>
      <description>ajax 收到服务器端返回请求302,服务端给定重定向地址
服务端返回
{&amp;#39;code&amp;#39;: 302, &amp;#39;data&amp;#39;: &amp;#39;/cms/&amp;#39;} 前端处理
$(function () {  var url = window.location.pathname  $.ajax({  url: url+&amp;#39;logout&amp;#39;,  type: &amp;#39;get&amp;#39;,  dataType:&amp;#39;json&amp;#39;  success: function (data,status) {  // var datas = JSON.parse(data)  if(data.code === 302){  location.href = data.data;  }  alert(&amp;#39;重定向&amp;#39;)  },  error: function (data) {  console.log(data.toString())  }  }) } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/session/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/session/</guid>
      <description>session 过期时间
def login():  session.permanent = True  app.permanent_session_lifetime = timedelta(minutes=1) # 设置session到期时间 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/uwsgi%E5%9D%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/uwsgi%E5%9D%91/</guid>
      <description>#pip3 安装 uwsgi遇到异常： Exception: you need a C compiler to build uWSGI
 解决办法：
yum install gcc #安装完c解释器后没有 又提示没找到python文件 plugins/python/uwsgi_python.h:2:10: fatal error: Python.h: No such file or directory
 解决办法：
 安装python3-dev,正常这么安装 提示找不到,先搜索
 yum search python3 dev  因为当前版本是python3.6, 所以最终找到python36-devel 并安装
 yum install python36-devel </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E5%AD%90%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E5%AD%90%E5%9F%9F%E5%90%8D/</guid>
      <description>1.本地测试需要修改hosts文件：C:\Windows\System32\drivers\etc\hosts目录
127.0.0.1	zouni.vip127.0.0.1	student.zouni.vip 2.代码中设置： 修改蓝图 subdomain 为指定的子域名
bp = Blueprint(&amp;#39;cms&amp;#39;, __name__, subdomain=&amp;#39;cms&amp;#39;) 3.设置 config 配置 SERVER_NAME=主域名</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E6%A8%A1%E6%9D%BF/%E6%A8%A1%E6%9D%BF%E5%88%9B%E5%BB%BA%E6%B3%A8%E6%84%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E6%A8%A1%E6%9D%BF/%E6%A8%A1%E6%9D%BF%E5%88%9B%E5%BB%BA%E6%B3%A8%E6%84%8F/</guid>
      <description>蓝图自定义模板文件夹template_folder注意点：
如果app/templates中有index.html
并且app/cms/templates也有index.html文件
渲染模板会优先查找app/templates目录下。
蓝图如果要正常使用，创建规则必须是app/cms/templates/cms/index.html，渲染render_template(&#39;cms/index.html&#39;) 完整例子：
bp = Blueprint(&amp;#39;cms&amp;#39;, __name__, url_prefix=&amp;#39;/cms&amp;#39;, template_folder=&amp;#39;templates&amp;#39;)  @bp.route(&amp;#39;/cms/index&amp;#39;) def index():  return render_template(&amp;#39;cms/index.html&amp;#39;） flask模板查找规则是优先项目根目录``</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/docker%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/docker%E9%83%A8%E7%BD%B2/</guid>
      <description>docker run -itd &amp;ndash;name=nginx -p 80:80 -d -v /usr/local/small/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -v /usr/local/small/nginx/conf.d:/etc/nginx/conf.d -v /usr/local/small/web/:/root/web/ -d nginx</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/supervisor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/supervisor/</guid>
      <description>#supervisor是进程守护服务安装supervisor有以下操作
supervisor必须用python2
pip2 install supervisor 创建supervisor.conf 配置文件
# supervisor的程序名字 [program:项目名字] # supervisor执行的命令 command=uwsgi --ini uwsgi.ini # 项目的目录 directory = /项目路径 # 开始的时候等待多少秒 startsecs=0 # 停止的时候等待多少秒 stopwaitsecs=0 # 自动开始 autostart=true # 程序挂了后自动重启 autorestart=true # 输出的log文件 stdout_logfile=/var/log/supervisord.log # 输出的错误文件 stderr_logfile=/var/log/supervisord.err  [supervisord] # log的级别 loglevel=debug  [inet_http_server] # supervisor的服务器 port = :9001 # 用户名和密码 username = admin password = 123  # 使用supervisorctl的配置 [supervisorctl] # 使用supervisorctl登录的地址和端口号 serverurl = http://127.0.0.1:9001  # 登录supervisorctl的用户名和密码 username = admin password = 123  [rpcinterface:supervisor] supervisor.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/uwsgi%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/uwsgi%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</guid>
      <description>#编译配套 ssl的 uwsgi#安装编译需要的环境yum install opensslyum install openssl-devel #安装 greenletpip3 install greenlet #找到 greenlet 位置/root/.virtualenvs/flask/include/site/python3.6 #安装CFLAGS=&amp;#34;-I/root/.virtualenvs/flask/include/site/python3.6&amp;#34; UWSGI_PROFILE=&amp;#34;asyncio&amp;#34; pip install uwsgi --no-use-wheel or
CFLAGS=&amp;#34;-I/usr/include/openssl&amp;#34; UWSGI_PROFILE_OVERRIDE=ssl=true pip install uwsgi -I --no-cache-dir CFLAGS=&amp;quot;-I$/usr/bin/python3.6&amp;quot; UWSGI_PROFILE=&amp;ldquo;asyncio&amp;rdquo; pip3 install uwsgi &amp;ndash;no-use-wheel
CFLAGS=&amp;quot;-I/usr/local/opt/openssl/include&amp;quot; LDFLAGS=&amp;quot;-L/usr/local/opt/openssl/lib&amp;quot; UWSGI_PROFILE_OVERRIDE=ssl=true pip install uwsgi -I &amp;ndash;no-cache-dir
CFLAGS=&amp;quot;-I/usr/include/openssl&amp;quot; UWSGI_PROFILE_OVERRIDE=ssl=true pip install uwsgi -I &amp;ndash;no-cache-dir
sudo CFLAGS=&amp;quot;-I/usr/local/opt/openssl/include&amp;quot; LDFLAGS=&amp;quot;-L/usr/local/opt/openssl/lib&amp;quot; UWSGI_PROFILE_OVERRIDE=ssl=true pip3 install uwsgi -I &amp;ndash;no-cache-dir</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/virtualenvwrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/virtualenvwrapper/</guid>
      <description>#安装虚拟环境安装虚拟环境
pip2 install virtualenvwrapper # **查找安装路径**  which virtualenvwrapper.sh 编辑.bashrc
vim ~/.bashrc # 增加以下环境变量 export WORKON_HOME=$HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh 立即生效
source .bashrc 查找python3路径
which python3 创建虚拟环境
mkvirtualenv --python=/usr/bin/python3 name-env  workon name-env 切换/激活 虚拟环境
workon name-evn  cd ~/.virtualenvs/name-env/bin/ 退出虚拟环境
deactivate name-env 删除虚拟环境
rmvirtualenv env-name </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/</guid>
      <description>#mysql 配置#首先查看centos是否已经安装了mysql源yum list installed mysql*如果有就删除yum remove mysql-community-* #安装mysql源https://dev.mysql.com/downloads/repo/yum/ wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm #安装mysqlyum -y install mysql57-community-release-el7-10.noarch.rpm #查看是否已经安装了数据库源yum repolist all | grep mysql #查看数据库源/etc/yum.repos.d/mysql-community.repo修改源可用 mysql80 enable = 1 #安装数据库服务yum install mysql-server #启动mysqlsystemctl start mysqld.service #查看状态systemctl status mysqld.service #查看初始密码grep &amp;#34;password&amp;#34; /var/log/mysqld.log #修改密码mysql&amp;gt; ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;new password&amp;#39;; #注意:密码设置必须要大小写字母数字和特殊符号（,/&amp;rsquo;;:等）,不然不能配置成功#开启mysql的远程访问 两种方式 方式1  grant all privileges on *.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/flask/%E9%83%A8%E7%BD%B2/%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/</guid>
      <description>#安装虚拟环境安装虚拟环境
pip2 install virtualenvwrapper # **查找安装路径**  which virtualenvwrapper.sh 编辑.bashrc
vim ~/.bashrc # 增加以下环境变量 export WORKON_HOME=$HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh 立即生效
source .bashrc 查找python3路径
which python3 创建虚拟环境
mkvirtualenv --python=/usr/bin/python3 name-env  workon name-env 切换/激活 虚拟环境
workon name-evn  cd ~/.virtualenvs/name-env/bin/ 退出虚拟环境
deactivate name-env #安装git用来传代码安装git
yum install git # 生成公钥 ssh-keygen -t rsa -C “email” # 查看公钥 cat ~/.ssh/id_rsa.pub  #同步代码 git clone #Uwsgipip3 install uwsgi 在项目中创建uwsgi.ini配置文件
 [uwsgi]   # 必须全部为绝对路径  # 项目的路径  chdir = /root/flask_f/  # Django的wsgi文件  wsgi-file = /root/flask_f/app.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/Ipython%E9%AD%94%E6%B3%95%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/Ipython%E9%AD%94%E6%B3%95%E5%91%BD%E4%BB%A4/</guid>
      <description>#IPython是一个增强的shell工具,%cd —更改当前工作目录
%edit —打开编辑器并在关闭编辑器后执行键入的代码
%env —显示当前环境变量
%pip install [pkgs] —在不离开交互式shell的情况下安装软件包
%time和%timeit—定时执行Python代码</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/jupyter/%E8%8E%B7%E5%8F%96token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/jupyter/%E8%8E%B7%E5%8F%96token/</guid>
      <description>查看当前运行的jupyter notebook token
jupyter notebook list http://0.0.0.0:8888/?token=3c1c5cc60766ae6c4aea6234268d73b869fb34072b051cef
http://127.0.0.1:8888/?token=3c1c5cc60766ae6c4aea6234268d73b869fb34072b051cef</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/matplotlib/animation%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/matplotlib/animation%E5%8A%A8%E7%94%BB/</guid>
      <description>#动画from matplotlib import animation,pyplot as plt import numpy as np fig,axe = plt.subplots() x = np.arange(0,2*np.pi,0.01) line, = axe.plot(x,np.sin(x))  def animations(i):  line.set_ydata(np.sin(x+i/10))  return line def init():  line.set_ydata(np.sin(x))  return line  # func 动画更新函数回调 # frames : 帧数，共多少帧 播放完 # init_func : 初始化回调函数 # interval : 刷新间隔 ms 毫秒 # blit ：是否整体刷新 ani = animation.FuncAnimation(fig=fig,func=animations,frames=100,init_func=init,interval=20,blit=False) plt.show() </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/matplotlib/%E5%AD%90%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/matplotlib/%E5%AD%90%E5%9B%BE/</guid>
      <description>#最简单方式创建子图import numpy as np from matplotlib import pyplot as plt  np.random.seed(123456) # 随机生成1-20的随机数 x = np.random.randint(1, 20, 20)  xmax = x.max() xmin = x.min() xmax, xmin # 数据缩放到0-1的 区间 xx = (x - xmin) / (xmax - xmin) # 2,1,1, 代表 画子图 2行1列第一 个位置 # 参数中间的逗号可以免掉不写，211 plt.subplot(211) plt.plot(x) plt.subplot(2,1,2) plt.plot(y)  plt.show() #创建子图from matplotlib import pyplot as plt # 第一个子图 将 整个图分成 2行1列，占据第1个位置 plt.subplot(211) plt.plot([1,2],[3,4]) # 第二个子图 将整个图分成 2行3列 放在第4个位置，也就是2行第1位 plt.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/matplotlib/%E6%95%A3%E7%82%B9%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/matplotlib/%E6%95%A3%E7%82%B9%E5%9B%BE/</guid>
      <description>散点图
from matplotlib import pyplot as plt x = [1, 2, 3] y = [3, 4, 5] plt.scatter(x, y) plt.show() meshgrid生成点阵图
from matplotlib import pyplot as plt x = [1, 2, 3] y = [3, 4, 5] xxx, yyy = np.meshgrid(x, y) plt.scatter(xxx, yyy) plt.show() </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/numpy/meshgrid%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/numpy/meshgrid%E7%94%A8%E6%B3%95/</guid>
      <description>import numpy as np  x = [1,2] y = [2,3] xx,yy = np.meshgrid(x,y) # 生成对应的网格坐标点 Out:
# 对应输出坐标点：(1，2),(1,3),(2,2,),(2,3) [[1 2]  [1 2]] [[2 2]  [3 3]] </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/numpy/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/numpy/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</guid>
      <description>查看数组有多少类别
import numpy as np array = [1,2,3,2,1,2,1] np.unique(array)  ------------------------- array([1, 2, 3]) # x np.sum(x) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/opencv/%E5%9B%BE%E5%83%8F%E5%90%88%E5%B9%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/opencv/%E5%9B%BE%E5%83%8F%E5%90%88%E5%B9%B6/</guid>
      <description>#图像融合cv2.addWeighted(src1, alpha, src2, beta, gamma, dst=None, dtype=None)
 src1 : 图像 alpha : 透明系数 src2 : 图像2 beta : 透明系数 gamma : 亮度调节  import cv2 a = cv2.imread(&amp;#39;images/aaa.png&amp;#39;) b = cv2.imread(&amp;#39;images/bbb.png&amp;#39;) a = a[:b.shape[0],:b.shape[1],:] res = cv2.addWeighted(src1=a,alpha=0.3,src2=b,beta=1,gamma=0.3) cv2.imshow(&amp;#39;a&amp;#39;,a) cv2.waitKey(1000) cv2.imshow(&amp;#39;b&amp;#39;,b) cv2.waitKey(1000) cv2.imshow(&amp;#39;res&amp;#39;,res) cv2.waitKey(1000)  cv2.destroyAllWindows() </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/opencv/%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</guid>
      <description>#读取图片import cv2 img = cv2.imread(&amp;#39;image_path&amp;#39;) #显示图片 import cv2 img = cv2.imread(&amp;#39;image_path&amp;#39;) cv2.imshow(&amp;#39;name&amp;#39;,img) cv2.waitKey() cv2.destroyAllWindows() #图像形状import cv2 img = cv2.imread(&amp;#39;image_path&amp;#39;) img.shape #图像分割，通道拆分import cv2 img = cv2.imread(&amp;#39;image_path&amp;#39;) b,g,r = cv2.split(img) #图像运算 cv2.add 方法 相加 取最大值255 img_a + img_b ,直接相加结果除255 取模  import cv2 img_a = cv2.imread(&amp;#39;image_a_path&amp;#39;) img_b = cv2.imread(&amp;#39;image_b_path&amp;#39;) img_c = cv2.add(img_a,img_b) img_d = img_a + img_b </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/opencv/%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/opencv/%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E5%8F%98%E6%8D%A2/</guid>
      <description>#图像缩放 两种方式   dsize : 元组，传入要缩放图像的宽高  import cv2 img = cv2.imread(&amp;#39;img_path&amp;#39;) img1 = cv2.resize(av,dsize=(100,100)) cv2.imshow(&amp;#39;img&amp;#39;,img) cv2.imshow(&amp;#39;img1&amp;#39;,img1) cv2.waitKey() cv2.destroyAllWindows() fx fy 参数，分别 修改横列 缩放系数  import cv2 img = cv2.imread(&amp;#39;img_path&amp;#39;) img1 = cv2.resize(img,None,fx=2,fy=2) cv2.imshow(&amp;#39;img&amp;#39;,img) cv2.imshow(&amp;#39;img1&amp;#39;,img1) cv2.waitKey() cv2.destroyAllWindows() #翻转变换flipCode:
 &amp;gt;1 沿着y axis左右变换 =0 沿着x axis上下变换 &amp;lt;0 沿着x axis上下 翻转，再沿着y axis 左右反转  import cv2 img = cv2.imread(&amp;#39;img_path&amp;#39;) img1 = cv2.flip(img,flipCode=1) cv2.imshow(&amp;#39;img&amp;#39;,img) cv2.imshow(&amp;#39;img1&amp;#39;,img1) cv2.waitKey() cv2.destroyAllWindows() </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/opencv/%E7%94%BB%E7%9F%A9%E5%BD%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/opencv/%E7%94%BB%E7%9F%A9%E5%BD%A2/</guid>
      <description>import cv2 imgpath = &amp;#39;d:/img.png&amp;#39; x,y,x1,y1 = 641,165,752,278  img = cv2.imread(imgpath) img.shape linet = cv2.LINE_4 img = cv2.rectangle(img, (x, y), (x1, y1), (0, 0, 255), linet,2) cv2.imshow(&amp;#39;name&amp;#39;, img) cv2.waitKey() cv2.destroyAllWindows() </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/pycharm/matplot%E5%9B%BE%E5%83%8F%E7%8B%AC%E7%AB%8B%E7%AA%97%E5%8F%A3%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/pycharm/matplot%E5%9B%BE%E5%83%8F%E7%8B%AC%E7%AB%8B%E7%AA%97%E5%8F%A3%E6%98%BE%E7%A4%BA/</guid>
      <description>pycharm默认会显示 图像窗口在pycharm 上， 单独显示需要去掉以下设置
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/pycharm/pycharm%E6%BF%80%E6%B4%BB%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/pycharm/pycharm%E6%BF%80%E6%B4%BB%E7%A0%81/</guid>
      <description>XCTXZDU09E-eyJsaWNlbnNlSWQiOiJYQ1RYWkRVMDlFIiwibGljZW5zZWVOYW1lIjoi5bGx5Lic55CG5bel5aSn5a2mIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU0YiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQREIiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBSQiIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiRFAiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiRFBBIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjAwMzI2TFBBQTAwNTAwOCIsImhhc2giOiIxNjc5MTc3Mi8wOi0xNDczMTA4OTgxIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-FNMSclTw4g1JqWPPguaWKx52Mcp2N7DZUMhnWlUOTsNsiK/QdB2pwxX+FvNjEhKdCkAsO111gLa1Q1XXvXRIkMA8BFgYrlxZli9WSyqfbx0CBm35jw8TozH089e4S9iB5c82z6EMPOc+wxdmm1TxSqKOqP+qVmZVbt76vVhQoISb4Fx7EHPi06Po4+r8e40s+chXVGkGZihVcbxwjjSKe0p3ARj4BsXw5v9bznyxw9AU/2vLoyr+xyS49FzSFERnn+EZirf/93bcbzdFGFdNs2secIoi+q2JflgSs+8O6vLFaYx03PCs6W+405J9UziaT8866tgtbRhn/0nLigRq/A==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/pycharm/pyqt%E9%85%8D%E7%BD%AE/designer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/pycharm/pyqt%E9%85%8D%E7%BD%AE/designer/</guid>
      <description>#windows 平台 环境配置 首先安装pyqt5  pip install sip //这个是pyqt开发商提供的支持包pip install pyqt5pip install pyqt5-tools #pycharm 配置pyqt 可拖拽控件工具  打开pycharm 找到Tools/External_Tools 新增一个   找到desiginer.exe位置,我的是在anaconda3安装的，就在我的虚拟环境目录下面找到：
D:\Anaconda3\envs\python_basic\Scripts\designer.exe
  Working directory 这个路径是工作路径，所以一般就填入$FileDir$
编辑完UI后，还需要转换成py文件才行，所以需要配置pyui转换  需要配置下参数：
Program: python.exe 路径Arguments: -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.pyWorking directory: $FileDir$ 第一次使用,先新建一个ui文件先  妥妥拽拽一些控件华丽界面就完成了
 最后一步，转换成py文件   end
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/pycharm/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E6%8A%A5%E9%94%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/pycharm/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E6%8A%A5%E9%94%99/</guid>
      <description>pycharm使用相对路径，要修改当前解释器的工作路径到当前项目路径
修改完之后重启解释器，就可以了</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/pycharm/%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/pycharm/%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
      <description>#pycharm 设置代理</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/python%E6%89%93%E5%8C%85exe/pyinstaller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/python%E6%89%93%E5%8C%85exe/pyinstaller/</guid>
      <description>#举个例子先 pyinstaller -F xxx.py #参数说明-F 打包单个文件 -W 去掉控制台窗口，就那个黑框 cmdshell -i 图标</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>#windows-b 绑定ip地址python -m http.server -b 192.168.1.145 8888 #Mac 系统python -m SimpleHTTPServer 8888 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/call/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/call/</guid>
      <description>#call函数使用方法__call__ 函数一般用于实例对象的回调,至少看起来实例对象的调用方式和函数一样 call 函数一个普通的函数，一般实现父类的方法之后，会在父类的__call__函数中回调
class Base():def call(self):print(&#39;我是base&#39;)def __call__(self, *args, **kwargs):self.call()class A(Base):def __init__(self, name):self.name = namedef call(self):print(self.name) 实例化：
a = A(&#39;small&#39;)a() 输出：
small  子类不实现call，则会输出：
我是base </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/json%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/json%E8%BD%AC%E6%8D%A2/</guid>
      <description>#pyton对象转字符串import json  json.dumps(object,default=lambda obj:obj.__dict__,sort_keys = False,indent = 4,ensure_ascii = False) json.dumps() # 对象转json  # lambda 是python类对象的方法 dict 保存的是对象的字典转成的字符串 #json字符串转对象 # class必须试先init方法 classStus:  list:list   def__init__(self,d):  self.__dict__=d  jsons = {&amp;#34;list&amp;#34;: [{&amp;#34;id&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;cao&amp;#34;, &amp;#34;age&amp;#34;: 10, &amp;#34;profile&amp;#34;: &amp;#34;曹的自我介绍&amp;#34;},{&amp;#34;id&amp;#34;: 2, &amp;#34;name&amp;#34;: &amp;#34;wang&amp;#34;, &amp;#34;age&amp;#34;: 20, &amp;#34;profile&amp;#34;: &amp;#34;王的自我介绍&amp;#34;}]}  jsons = json.dumps(jsons) 将python字典转成json串  json.loads(jsons,object_hooks = class) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/map/</guid>
      <description>获取map第一个元素的方法
map = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2} keys = map.keys() # keys 是 dict_list类型 转成list keys = list(keys) # 利用第一个key来获取value item1 = map[keys[0]] print(item1) 打印结果：
1 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/open/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/open/</guid>
      <description>#open 函数open ： 如果文件 不存在，则创建
open(filename,mode=&amp;#39;&amp;#39;) ## 常用mode w 以写方式打开，  a 以追加模式打开 (从 EOF 开始, 必要时创建新文件)  r+ 以读写模式打开  w+ 以读写模式打开 (参见 w )  a+ 以读写模式打开 (参见 a )  rb 以二进制读模式打开  wb 以二进制写模式打开 (参见 w )  ab 以二进制追加模式打开 (参见 a )  rb+ 以二进制读写模式打开 (参见 r+ )  wb+ 以二进制读写模式打开 (参见 w+ )  ab+ 以二进制读写模式打开 (参见 a+ ) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/with/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/with/</guid>
      <description>with用法和原理：
class Sample:  def __enter__(self):  print(&amp;#34;In __enter__()&amp;#34;)  return &amp;#34;Foo&amp;#34;  def __exit__(self, type, value, trace):  print(&amp;#34;In __exit__()&amp;#34;) def get_sample():  return Sample() with get_sample() as sample:  print (&amp;#34;sample:%s&amp;#34; % sample) 运行代码，输出如下
In __enter__() sample: Foo In __exit__() 先执行__enter__方法，最后执行__exit__方法退出</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</guid>
      <description>#getsizeofx: 对象 return : 对象的字节数 sys.getsizeof(x)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80%E8%A7%A3%E9%87%8A/</guid>
      <description>#uunicode编码
#r不转义字符</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>a = 0 try:  2 / a except Exception as e:  print(&amp;#39;a---&amp;#39;, e) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E6%96%AD%E8%A8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E6%96%AD%E8%A8%80/</guid>
      <description>a = -1 # 断言 a&amp;gt;0才正常执行，否则抛 异常 assert a&amp;gt;0 [Out]:
Traceback (most recent call last):File &amp;#34;D:\Anaconda3\envs\tensorflow\lib\site-packages\IPython\core\interactiveshell.py&amp;#34;, line 3331, in run_codeexec(code_obj, self.user_global_ns, self.user_ns)File &amp;#34;&amp;lt;ipython-input-45-013be11a8622&amp;gt;&amp;#34;, line 3, in &amp;lt;module&amp;gt;assert a&amp;gt;0AssertionError </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/python/%E5%B0%8F%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90%E5%A4%A7%E5%9B%BE%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/python/%E5%B0%8F%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90%E5%A4%A7%E5%9B%BE%E7%89%87/</guid>
      <description>#python 小图片合成大图片这段代码是前两年搞的，有很长时间没动了，正好是在学习python的时候拿来练手的。
 先说一下前因后果为什么要做这个，起初的想法是一个朋友给的，他手机存了很多女儿的照片，有一天他告诉我：他希望有个工具能把这些照片合成一个图片墙，在手机看毕竟不方便，希望能有一些小创意，为以后孩子大了留个回忆；可巧不巧正好快赶上七夕了，就想着给媳妇一个惊喜，所以就赶紧把相册里的给媳妇以前拍的照片收集了一下，切图工具把一些照片简单处理了一下；
 基于以上种种，哈哈，就搞了这么个玩意儿！ 但是代码写的比较烂，懒得贴代码了，链接放在这里：有兴趣的可以看看 主要代码放在ConcatImg/concat_img/concat.py这个文件 https://github.com/SmallCao/ConcatImg
最终效果 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/RaspberryPi/%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/RaspberryPi/%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>用户名：pi 密码：raspberry</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/RaspberryPi/%E5%AE%89%E8%A3%85docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/RaspberryPi/%E5%AE%89%E8%A3%85docker/</guid>
      <description>#docker 脚本安装sudo curl https://get.docker.com/ &amp;gt; ./docker_install.shsudo sh docker_install.sh –mirror Aliyun </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/RaspberryPi/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/RaspberryPi/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>#打开配置sudo raspi-config </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/RaspberryPi/%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/RaspberryPi/%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</guid>
      <description>#下载镜像将镜像写入sd卡 ，下载写入程序
https://www.raspberrypi.org/downloads/ #修改配置写入sd卡后，不要拔出，直接在sdcard中修改配置：
 开启ssh 在根目录下直接新建ssh文件夹，就成功了 开启HDMI显示输出 修改config.txt文件  hdmi_safe=1config_hdmi_boost=4hdmi_ignore_edid=0xa5000080hdmi_group=2hdmi_mode=82    参数 说明     hdmi_safe=1 安全启动HDMI   config_hdmi_boost=4 开启热插拔   hdmi_group=1 CEA电视显示器   hdmi_group=2 DMT电脑显示器   hdmi_ignore_edid=0xa5000080 忽略自动探测的分辨率   hdmi_mode=4 640x480 60Hz   hdmi_mode=9 800x600 60Hz   hdmi_mode=16 1024x768 60Hz   hdmi_mode=82 1080p 60Hz    #连接树莓派树莓派启动后，红灯亮表示 接通电源；绿灯表示正在读写sd卡 3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/README/</guid>
      <description>#学习笔记笔记中主要记录个人的编程生涯的一些学习笔记；</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/springboot/%E5%AD%97%E6%AE%B5%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/springboot/%E5%AD%97%E6%AE%B5%E6%B3%A8%E8%A7%A3/</guid>
      <description>@JsonProperty(&amp;quot;game_name&amp;quot;): 给字段起别名； @JsonInclude(JsonInclude.Include.NON_NULL): 字段如果空值，json中不返回
data class Game(val id:Int,  @JsonProperty(&amp;#34;wowo&amp;#34;)  @JsonInclude(JsonInclude.Include.NON_NULL)  val name: String?){ [  {  &amp;#34;id&amp;#34;: 1,  &amp;#34;wowo&amp;#34;: &amp;#34;csgo&amp;#34;  },  {  &amp;#34;id&amp;#34;: 2  } ] </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/springboot/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/springboot/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      <description>常用注解：
  @Controller
标注控制器，如果要包装json数据，需要 配合@ResponseBody
  @RestController
标注控制器，返回 json 数据
  @RequestMapping
路由映射
  @SpringBootApplication
应用住程序入口标注
  @ComponentScan
扫描指定包，给定一个范围，不指定默认扫描全部包
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/springboot/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/springboot/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>  启动类位置： 一般放在根目录下
  Failed to configure a DataSource: &amp;lsquo;url&amp;rsquo; attribute is not specified and no em
缺少配置信息
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/web/css3/float%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/web/css3/float%E5%B1%9E%E6%80%A7/</guid>
      <description>float： 漂浮在页面上层，也就是Z轴 漂浮元素不占据原有位置； 漂浮起来后会先找依赖，根节点或一同漂浮的元素</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/web/nodejs/mysql%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/web/nodejs/mysql%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5/</guid>
      <description>数据库连接失败
Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL clientat Handshake.Sequence._packetToError (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)at Handshake.ErrorPacket (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\sequences\Handshake.js:123:18)at Protocol._parsePacket (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\Protocol.js:291:23)at Parser._parsePacket (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\Parser.js:433:10)at Parser.write (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\Parser.js:43:10)at Protocol.write (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\Protocol.js:38:16)at Socket.&amp;lt;anonymous&amp;gt; (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\Connection.js:88:28)at Socket.&amp;lt;anonymous&amp;gt; (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\Connection.js:526:10)at Socket.emit (events.js:315:20)at addChunk (_stream_readable.js:302:12)--------------------at Protocol._enqueue (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\Protocol.js:144:48)at Protocol.handshake (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\protocol\Protocol.js:51:23)at Connection.connect (D:\WorkProject\DeepLearning\python_basic\node_modules\mysql\lib\Connection.js:116:18)at Object.&amp;lt;anonymous&amp;gt; (D:\WorkProject\DeepLearning\python_basic\catch\game\test.js:10:12)at Module._compile (internal/modules/cjs/loader.js:1200:30)at Object.Module._extensions..js (internal/modules/cjs/loader.js:1220:10)at Module.load (internal/modules/cjs/loader.js:1049:32)at Function.Module._load (internal/modules/cjs/loader.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/web/nodejs/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/web/nodejs/npm/</guid>
      <description>#查看版本 npm -v
 #更新 npm install -g npm
 #指定版本更新 npm -g install npm@6.8.0
 #清理 npm cache clean &amp;ndash;force
 #查看当前使用的源 npm config get registry
 #重置为官方源 npm config set registry https://registry.npmjs.org/q
 #修改国内源# 阿里源升级http://npm.taobao.org =&amp;gt; http://npmmirror.comhttp://registry.npm.taobao.org =&amp;gt; http://registry.npmmirror.com #1. 临时修改源 npm &amp;ndash;registry http://registry.npmmirror.com install express
 #2. 永久修改 npm config set registry http://registry.npmmirror.com
 #使用国内镜像，可以使用 cnpm 命令行,npm的定制版 npm install -g cnpm &amp;ndash;registry=https://registry.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/web/nodejs/%E5%AE%89%E8%A3%85gitbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/web/nodejs/%E5%AE%89%E8%A3%85gitbook/</guid>
      <description>node -V
npm install gitbook-cli -g
gitbook -V</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/web/nodejs/%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/web/nodejs/%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83/</guid>
      <description>#官网https://nodejs.org/en/download/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/web/vue.js/%E5%92%8Cjinjia2%E6%A8%A1%E6%9D%BF%E5%86%B2%E7%AA%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/web/vue.js/%E5%92%8Cjinjia2%E6%A8%A1%E6%9D%BF%E5%86%B2%E7%AA%81/</guid>
      <description>vue 和jinjia2模板冲突：
 修改vue模板：  delimiters: [&amp;#39;{[&amp;#39;, &amp;#39;]}&amp;#39;] 修改jinjia2模板：  app.jinja_env.variable_start_string = &amp;#39;[[&amp;#39;app.jinja_env.variable_end_string = &amp;#39;]]&amp;#39; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/mingw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/mingw/</guid>
      <description>#安装mingw-w64 官网
https://www.mingw-w64.org/downloads/#sources 下载
https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/vscode%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/vscode%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E6%96%87%E4%BB%B6/</guid>
      <description>#vscode 不能直接复制粘贴文件，可以拖拽vscode 分为两个版本：user版本和System版本，user版本应该是不能拖拽的，system版本可以拖拽，官网下载system版本
选择 Other downloads 选择System Installer 版本下载 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/windows-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/windows-terminal/</guid>
      <description>windows新终端   可以自定义主题
  打开设置
  在这里选择一个喜欢的 主题
  将选择好的主题配置信息，放在下图schemes集合里
修改上图list增加colorScheme 名字对应添加的schemes中的name
  #不够炫酷？修改背景图片，&amp;#34;backgroundImage&amp;#34;: &amp;#34;E:\\bg.png&amp;#34;,&amp;#34;backgroundImageOpacity&amp;#34;: 0.3,&amp;#34;backgroundImageStretchMode&amp;#34;:&amp;#34;none&amp;#34;, # 有四个选项 uniformToFill | none | fill | uniform 注意图片路径的反斜杠-转义或者用正斜杠：&amp;rsquo;/&amp;rsquo; 否则会设置失败
#最终效果：重新打开终端，ok</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/wsl-ubuntu%E5%BC%80%E5%90%AFssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/wsl-ubuntu%E5%BC%80%E5%90%AFssh/</guid>
      <description>clion配置toolschains:
 mingw64 wsl - ubuntu  打开终端 进入subsystem,安装ssh small@small:~$ sudo apt-get install ssh [sudo] password for small: Reading package lists... Done Building dependency tree Reading state information... Done openssh-server is already the newest version (1:8.2p1-4ubuntu0.2). 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.  编辑ssh配置文件： small@small:/etc/ssh$ sudo vi sshd_config # 解开以下注释 Port 2222 AddressFamily any ListenAddress 0.0.0.0 ListenAddress ::  # 还有这里 # To disable tunneled clear text passwords, change to no here!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/wsl-%E5%BC%80%E5%90%AFsystemctl%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/wsl-%E5%BC%80%E5%90%AFsystemctl%E5%91%BD%E4%BB%A4/</guid>
      <description>#WSL 默认是不开启systemctl命令的,开启方法：  安装daemonize
sudo apt-get install daemonize
  执行以下命令：
sudo daemonize /usr/bin/unshare &amp;ndash;fork &amp;ndash;pid &amp;ndash;mount-proc /lib/systemd/systemd &amp;ndash;system-unit=basic.target
exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/wsl-%E6%97%A0%E7%BD%91%E7%BB%9C%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/wsl-%E6%97%A0%E7%BD%91%E7%BB%9C%E4%BF%AE%E5%A4%8D/</guid>
      <description>#wsl linux 连不上网#解决办法：管理员权限打开命令行工具wsl --shutdown netsh winsock reset netsh int ip reset all netsh winhttp reset proxy ipconfig /flushdns 重启电脑，重试</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/wsl%E5%8D%87%E7%BA%A7wsl2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/wsl%E5%8D%87%E7%BA%A7wsl2/</guid>
      <description>#检查当前运行的wsl版本wsl -l -v 下载windows wsl2 linux内核
wsl --set-version &amp;lt;distro name&amp;gt; 2，将 &amp;lt;distro name&amp;gt; 替换为要更新的 Linux 发行版的名称。
例如，wsl --set-version Ubuntu-20.04 2 会将 Ubuntu 20.04 发行版设置为使用 WSL 2</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/%E5%AE%89%E8%A3%85choco/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/%E5%AE%89%E8%A3%85choco/</guid>
      <description>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;lsquo;https://chocolatey.org/install.ps1&#39;))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>#powershell 查看环境变量语法：$env:环境变量名称
# $env 后面紧跟要查看的环境变量名称 PS C:\Users\cao_c&amp;gt; $env:GOPATH D:\workproject\go 设置环境变量
$env:name=value </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</guid>
      <description>#系统安装过程中常见问题 汇总#1. windows只能安装到GPT磁盘如何解决  进入选择语言界面操作：shift+F10 ，进入命令行操作；
  输入命令：
 diskpart list disk （列出所有磁盘） select disk 0 （选中要安装的磁盘）这里是零 clean （注意：这一步是格式化磁盘了） convert gpt 转换完之后也可以直接退出，重新进入系统引导安装流程了 list partition create partition efi size=1000 (单位是M) create partition msr size=1280 create partition primary size=102400 （根据需要设定分区大小） exit 退出命令行    重新进入安装流程，选择设定好的分区安装系统就ok了
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zouni.vip/docs/document/windows/%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zouni.vip/docs/document/windows/%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>#无法生成D:config.msi下的常规子目录的列表，拒绝访问。怎么解决无法生成D:config.msi下常规子文件夹的列表拒绝访问错误。
修改 打开注册表 ：win+R + regedit
 HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/User Shell Folders/下Personal
 #shell中输入python等 关键字会跳转到应用商店 去掉WindowsApps 在环境变量中
 </description>
    </item>
    
  </channel>
</rss>
