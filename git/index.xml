<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 西凉观云海</title>
    <link>https://r.xboox.cn/git/</link>
    <description>Recent content in git on 西凉观云海</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://r.xboox.cn/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. 生成公钥</title>
      <link>https://r.xboox.cn/git/1.%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/1.%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/</guid>
      <description>1. 生成公钥 ssh-keygen -t rsa -C &amp;#34;xxxxx@xxxxx.com&amp;#34; 或 ssh-keygen -t ed25519 -C &amp;#34;xxxxx@xxxxx.com&amp;#34; 两种操作一样只是生成密钥的加密方式不同 2. 查看公钥 cat ~/.ssh/id_rsa.pub&#xD;PS C:\Users\sss&amp;gt; cat ~/.ssh/id_ed25519.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL7iL5mVSeEYnMJvNhpTxZR/rv2WApe2+IkfL4iXlfCu xxxxx@xxx.com&#xD;</description>
    </item>
    <item>
      <title>2. 提交到远程仓库</title>
      <link>https://r.xboox.cn/git/2.%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/2.%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>将本地项目提交到远程仓库需要以下操作： 1. 本地提交 git init 初始化本地仓库 git add . git commit -m &amp;#34;###&amp;#34; 2. 添加目标仓库地址 git remote add origin git@xx.xx.xx.xx:repos/xxx/xxx/xxx.git&#xD;3. 同步到远程仓库，先 pull 后 push # 允许一些无关联的历史&#x9;git pull origin master --allow-unrelated-histories git push origin 本地分支:远程分支 # 强制进行push git push origin master -f 修改远程仓库地址3种方式 1. 直接修改 git remote set-url origin [url] # 可以添加多个仓库地址，也就意味着可以同时把代码提交到多个仓库 git remote set-url --add origin [url]&#xD;2. 先删除后修改 删除&#xA;git remote rm origin 查看 remote url git remote -v</description>
    </item>
    <item>
      <title>3. branch-tag</title>
      <link>https://r.xboox.cn/git/3.branch-tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/3.branch-tag/</guid>
      <description>branch 创建分支 git branch dev&#xA;切换分支 git checkout dev&#xA;提交分支 git push origin dev&#xA;合并分支 先切换到要合并的分支&#xA;git checkout master 同步代码 git pull origin master 合并代码 git merge dev 这样dev分支就合并到了master&#xA;删除本地分支 git branch -d branchname&#xA;强制删除分支 -D git branch -D branchname&#xA;删除远程分支 git push origin &amp;ndash;delete branchname&#xA;tag 附注标签 ： git tag -a versionCode -m “1.2版本”&#xA;查看标签： git show tag&#xA;切换标签： git checkout tagname&#xA;git push origin &amp;ndash;tag&#xA;打标签 git tag -a mirror_v1.</description>
    </item>
    <item>
      <title>3. 撤销操作</title>
      <link>https://r.xboox.cn/git/4.%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/4.%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/</guid>
      <description>撤销 撤销是在本地，回滚是操作远程&#xA;在工作区的代码 git checkout -- a.txt # 丢弃某个文件，或者 git checkout -- . # 丢弃全部&#xD;注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。&#xA;代码git add到缓存区，并未commit提交 ## 将本地commit的内容撤回，修改的文件内容不会消失 git reset HEAD~ git reset HEAD . #或者 git reset HEAD a.txt&#xD;这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化&#xA;文件执行了git add操作，但想撤销对其的修改（index内回滚） # 取消暂存 git reset HEAD fileName # 撤销修改 git checkout fileName&#xD;修改的文件已被git commit，但想再次修改不再产生新的Commit # 修改最后一次提交 git add sample.txt git commit --amend -m&amp;#34;说明&amp;#34;&#xD;已在本地进行了多次git commit操作，现在想撤销到其中某次Commit git reset [--hard|soft|mixed|merge|keep] [commit|HEAD]&#xD;已add，但是没commit git reset HEAD~&#xD;已commit，不改变代码，仅仅只是想取消这个操作 git reset --soft HEAD^ # ^ 一次提交 ^^ 两次提交&#xD;</description>
    </item>
    <item>
      <title>5. 回滚</title>
      <link>https://r.xboox.cn/git/5.%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/5.%E5%9B%9E%E6%BB%9A/</guid>
      <description>回滚 （回滚是远程仓库操作，撤销是本地操作） 已进行git push，即已推送到远程仓库中。我们将已被提交到“远程仓库”的代码还原操作叫做回滚！&#xA;注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！&#xA;1. 撤销指定文件到指定版本 # 查看指定文件的历史版本 git log &amp;lt;filename&amp;gt; # 回滚到指定commitID git checkout &amp;lt;commitID&amp;gt; &amp;lt;filename&amp;gt;&#xD;2. 删除最后一次远程提交 使用revert&#xA;git revert HEAD git push origin master&#xD;使用reset&#xA;git reset --hard HEAD^ git push origin master -f&#xD;二者区别：&#xA;revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在； reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。 回滚某次提交 # 找到要回滚的commitID git log git revert commitID&#xD;删除某次提交 git log --oneline -n5&#xD;git rebase -i &amp;#34;commit id&amp;#34;^&#xD;注意：需要注意最后的^号，意思是commit id的前一次提交&#xA;git rebase -i &amp;#34;8475cb5&amp;#34;^&#xD;</description>
    </item>
    <item>
      <title>6. 删除远程仓库文件</title>
      <link>https://r.xboox.cn/git/6.%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/6.%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6/</guid>
      <description>删除文件夹 git rm --cached -r dir_name&#xD;删除文件 git rm --cached filename&#xD;删除后不用git add 直接提交 git commit -m &amp;quot;desc&amp;quot; 提交 git push&#xD;</description>
    </item>
    <item>
      <title>7. gitee使用说明</title>
      <link>https://r.xboox.cn/git/gitee%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/gitee%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>第一次使用git，没有环境？ 1. 先安装git 2. 生成公钥，用来添加到远程仓库 生成公钥 # 生成公钥，然后一路回车 ssh-keygen -t rsa -C &amp;#34;cao_cgq@163.com&amp;#34;&#xD;查看公钥 3. 复制公钥，打开码云-&amp;gt; 个人头像点设置-&amp;gt;找到安全设置-&amp;gt;SSH公钥 添加完公钥之后，就可以接下来的步骤了&#xA;怎么样将代码提交到远程仓库 1. 在码云新建仓库，beego_first 2. 本地项目路径下初始化仓库 git init&#xD;3. 本地项目添加远程仓库 # git remote add origin 仓库地址 git remote add origin git@gitee.com:SmallMrCao/beego_first.git&#xD;4. 添加完之后先pull，然后再add git pull git add *&#xD;出现这个问题，说明在add之前没有pull，需要执行以下命令，把无关的内容pull下来&#xA;git pull origin master --allow-unrelated-histories&#xD;5. 最后执行提交就完成了 git push&#xD;</description>
    </item>
    <item>
      <title>gitlab</title>
      <link>https://r.xboox.cn/git/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/gitlab/</guid>
      <description>gitlab 删除默认main 分支 将默认分支修改为master&#xA;Settings -&amp;gt; Repository -&amp;gt; Default branch Repository -&amp;gt; Branches -&amp;gt; 删除 </description>
    </item>
    <item>
      <title>gitosis</title>
      <link>https://r.xboox.cn/git/gitosis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/gitosis/</guid>
      <description>自动化管理用户公钥的工具项目&#xA;https://github.com/res0nat0r/gitosis/tree/master/gitosis</description>
    </item>
    <item>
      <title>nas使用gitserver</title>
      <link>https://r.xboox.cn/git/nas%E4%BD%BF%E7%94%A8gitserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/nas%E4%BD%BF%E7%94%A8gitserver/</guid>
      <description>群晖nas 使用 git server 安装git-server，并配置git存储库目录 可以在/volume1 路径下创建共享文件夹 gits&#xA;创建git本地账户在nas上 控制面板-&amp;gt; 用户群组 -&amp;gt; 新增 gits 用户&#xA;进入新创建的 gits 用户目录，新增 .ssh 文件夹, 将要同步代码库的电脑端 公钥 配置到gits 用户下 .ssh 文件夹下新增文件 key 编辑key文件，增加用户 id_rsa.pub 公钥 进入gits 存储库目录创建项目仓库，并设置 读写权限给gits用户 mkdir repo.git chown -R gits:users repo.git&#xD;参考链接：https://blog.csdn.net/xiaxl/article/details/129165776</description>
    </item>
    <item>
      <title>submodule</title>
      <link>https://r.xboox.cn/git/submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/submodule/</guid>
      <description>拉取主仓库 同步主项目加上 --recurse-submodules 递归拉取子项目&#xA;git clone git@github.com:smallcgq/xbook.git --recurse-submodules&#xD;添加其他仓库到当前仓库 git submodule add https://github.com/alex-shpak/hugo-book themes/book&#xD;git clone https://github.com/alex-shpak/hugo-book --recursive&#xD;添加完成项目根目录下会多出一个 .gitmodules 文件 同步其他仓库更新 //一步到位，不用挨个查找，直接遍历一遍&#xD;git submodule foreach git pull&#xD;删除submodule git submodule deinit themes/book&#xD;</description>
    </item>
    <item>
      <title>主要目录</title>
      <link>https://r.xboox.cn/git/%E4%B8%BB%E8%A6%81%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://r.xboox.cn/git/%E4%B8%BB%E8%A6%81%E7%9B%AE%E5%BD%95/</guid>
      <description>主要目录介绍 / ：根目录，所有的目录、文件、设备都在/之下，/就是Linux文件系统的组织者，也是最上级的领导者。 /bin ：bin 就是二进制（binary）英文缩写。在一般的系统当中，都可以在这个目录下找到linux常用的命令。系统所需要的那些命令位于此目录。 /boot ：Linux的内核及引导系统程序所需要的文件目录，比如 vmlinuz initrd.img 文件都位于这个目录中。在一般情况下，GRUB或LILO系统引导管理器也位于这个目录。 /cdrom ：这个目录在刚刚安装系统的时候是空的。可以将光驱文件系统挂在这个目录下。例如：mount /dev/cdrom /cdrom /dev ：dev 是设备（device)的英文缩写。这个目录对所有的用户都十分重要。因为在这个目录中包含了所有linux系统中使用的外部设备。但是这里并不是放的外部设备的驱动程序。这一点和常用的windows,dos操作系统不一样。它实际上是一个访问这些外部设备的端口。可以非常方便地去访问这些外部设备，和访问一个文件，一个目录没有任何区别。 /etc ：etc这个目录是linux系统中最重要的目录之一。在这个目录下存放了系统管理时要用到的各种配置文件和子目录。要用到的网络配置文件，文件系统，x系统配置文件，设备配置信息，设置用户信息等都在这个目录下。 /home：如果建立一个用户，用户名是&amp;quot;xx&amp;quot;,那么在/home目录下就有一个对应的/home/xx路径，用来存放用户的主目录。 /lib：lib是库（library）英文缩写。这个目录是用来存放系统动态连接共享库的。几乎所有的应用程序都会用到这个目录下的共享库。因此，千万不要轻易对这个目录进行什么操作，一旦发生问题，系统就不能工作了。 /lost+found ：在ext2或ext3文件系统中，当系统意外崩溃或机器意外关机，而产生一些文件碎片放在这里。当系统启动的过程中fsck工具会检查这里，并修复已经损坏的文件系统。正在上传、重新上传、取消Linux系统有时系统发生问题，有很多的文件被移到这个目录中，可能会用手工的方式来修复，或移到文件到原来的位置上。 /mnt ：这个目录一般是用于存放挂载储存设备的挂载目录的，比如有cdrom等目录。可以参看/etc/fstab的定义。 /media ：有些linux的发行版使用这个目录来挂载那些usb接口的移动硬盘（包括U盘）、CD/DVD驱动器等等。 /opt ：这里主要存放那些可选的程序。 /proc ：可以在这个目录下获取系统信息。这些信息是在内存中，由系统自己产生的。 /root ：Linux超级权限用户root的家目录。 /sbin ：这个目录是用来存放系统管理员的系统管理程序。大多是涉及系统管理的命令的存放，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令，这个目录和/usr/sbin ：/usr/X11R6/sbin或/usr/local/sbin目录是相似的，凡是目录sbin中包含的都是root权限才能执行的。 /selinux ：对SElinux的一些配置文件目录，SElinux可以让linux更加安全。 /srv ： 服务启动后，所需访问的数据目录，举个例子来说，www服务启动读取的网页数据就可以放在/srv/www中 /sys ：Linux 内核中设计较新的一种虚拟的基于内存的文件系统，它的作用与 proc 有些类似，但除了与 proc 相同的具有查看和设定内核参数功能之外，还有为 Linux 统一设备模型作为管理之用。 /tmp ：临时文件目录，用来存放不同程序执行时产生的临时文件。有时用户运行程序的时候，会产生临时文件。/tmp就用来存放临时文件的。/var/tmp目录和这个目录相似。 /usr：这是linux系统中占用硬盘空间最大的目录。用户的很多应用程序和文件都存放在这个目录下。在这个目录下，可以找到那些不适合放在/bin或/etc目录下的额外的工具 /usr/local ：这里主要存放那些手动安装的软件，即不是通过“新立得”或apt-get安装的软件。它和/usr目录具有相类似的目录结构。让软件包管理器来管理/usr目录，而把自定义的脚本（scripts)放到/usr/local目录下面。 /usr/share ：系统共用的东西存放地，比如 /usr/share/fonts 是字体目录，/usr/share/doc和/usr/share/man帮助文件。 /var ：这个目录的内容是经常变动的，看名字就知道，可以理解为vary的缩写，/var下有/var/log 这是用来存放系统日志的目录。/var/ www目录是定义Apache服务器站点存放目录；/var/lib 用来存放一些库文件，比如MySQL的，以及MySQL数据库的的存放地。 </description>
    </item>
  </channel>
</rss>
